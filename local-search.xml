<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/11/14/%E5%B8%B8%E8%A7%84%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/11/14/%E5%B8%B8%E8%A7%84%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>启动redis</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">进入至redis 源码目录中<br>brew services <span class="hljs-literal">start</span> redis<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>苹果电脑屏蔽系统升级操作</title>
    <link href="/2024/04/24/%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91%E5%B1%8F%E8%94%BD%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/04/24/%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91%E5%B1%8F%E8%94%BD%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="苹果电脑屏蔽系统升级操作"><a href="#苹果电脑屏蔽系统升级操作" class="headerlink" title="苹果电脑屏蔽系统升级操作"></a>苹果电脑屏蔽系统升级操作</h1><p><strong>一、修改hosts文件</strong></p><p>通过修改hosts文件，禁止访问苹果更新服务器。</p><p>打开hosts文件</p><p>sudo vi &#x2F;etc&#x2F;hosts </p><p>将以下内容复制到hosts文件内</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"># macOS 屏蔽更新<br><br><span class="hljs-number">127.0.0.1</span> gg.apple.com<br><br><span class="hljs-number">127.0.0.1</span> gnf-mdn.apple.com<br><br><span class="hljs-number">127.0.0.1</span> gnf-mr.apple.com<br><br><span class="hljs-number">127.0.0.1</span> ig.apple.com<br><br><span class="hljs-number">127.0.0.1</span> mesu.apple.com<br><br><span class="hljs-number">127.0.0.1</span> skl.apple.com<br><br><span class="hljs-number">127.0.0.1</span> swcdn.apple.com<br><br><span class="hljs-number">127.0.0.1</span> swdist.apple.com<br><br><span class="hljs-number">127.0.0.1</span> swdownload.apple.com<br><br><span class="hljs-number">127.0.0.1</span> swpost.apple.com<br><br><span class="hljs-number">127.0.0.1</span> swscan.apple.com<br><br><span class="hljs-number">127.0.0.1</span> updates-http.cdn-apple.com<br><br><span class="hljs-number">127.0.0.1</span> updates.apple.com<br><br><span class="hljs-number">127.0.0.1</span> updates.cdn-apple.com<br><br><span class="hljs-number">127.0.0.1</span> xp.apple.com<br><br><span class="hljs-number">10.211.55.19</span> macos.shared macos <br>#prl_hostonly shared<br></code></pre></td></tr></table></figure><p>然后保存hosts文件</p><p><strong>二、删除右上角角标</strong></p><p>打开终端，输入以下命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">defaults</span> delete com.apple.systempreferences AttentionPrefBundleIDs; <span class="hljs-attribute">killall</span> Dock、<br></code></pre></td></tr></table></figure><p><strong>三、恢复更新</strong></p><p>如果想在线升级，只需要把hosts里面添加的内容删掉就行了。</p>]]></content>
    
    
    <categories>
      
      <category>Macos</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/04/18/Java%20(Springboot)/"/>
    <url>/2024/04/18/Java%20(Springboot)/</url>
    
    <content type="html"><![CDATA[<h1 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h1><h2 id="统一结果返回。"><a href="#统一结果返回。" class="headerlink" title="统一结果返回。"></a>统一结果返回。</h2><p>HttpStatusEnum.java 封装返回结果枚举值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Http状态返回枚举</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> javadog</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">HttpStatusEnum</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作成功</span><br><span class="hljs-comment">     */</span><br>    SUCCESS(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;操作成功&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对象创建成功</span><br><span class="hljs-comment">     */</span><br>    CREATED(<span class="hljs-number">201</span>, <span class="hljs-string">&quot;对象创建成功&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求已经被接受</span><br><span class="hljs-comment">     */</span><br>    ACCEPTED(<span class="hljs-number">202</span>, <span class="hljs-string">&quot;请求已经被接受&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作已经执行成功，但是没有返回数据</span><br><span class="hljs-comment">     */</span><br>    NO_CONTENT(<span class="hljs-number">204</span>, <span class="hljs-string">&quot;操作已经执行成功，但是没有返回数据&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 资源已被移除</span><br><span class="hljs-comment">     */</span><br>    MOVED_PERM(<span class="hljs-number">301</span>, <span class="hljs-string">&quot;资源已被移除&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 重定向</span><br><span class="hljs-comment">     */</span><br>    SEE_OTHER(<span class="hljs-number">303</span>, <span class="hljs-string">&quot;重定向&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 资源没有被修改</span><br><span class="hljs-comment">     */</span><br>    NOT_MODIFIED(<span class="hljs-number">304</span>, <span class="hljs-string">&quot;资源没有被修改&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 参数列表错误（缺少，格式不匹配）</span><br><span class="hljs-comment">     */</span><br>    BAD_REQUEST(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;参数列表错误（缺少，格式不匹配）&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 未授权</span><br><span class="hljs-comment">     */</span><br>    UNAUTHORIZED(<span class="hljs-number">401</span>, <span class="hljs-string">&quot;未授权&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 访问受限，授权过期</span><br><span class="hljs-comment">     */</span><br>    FORBIDDEN(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;访问受限，授权过期&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 资源，服务未找到</span><br><span class="hljs-comment">     */</span><br>    NOT_FOUND(<span class="hljs-number">404</span>, <span class="hljs-string">&quot;资源，服务未找！&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 不允许的http方法</span><br><span class="hljs-comment">     */</span><br>    BAD_METHOD(<span class="hljs-number">405</span>, <span class="hljs-string">&quot;不允许的http方法&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 资源冲突，或者资源被锁</span><br><span class="hljs-comment">     */</span><br>    CONFLICT(<span class="hljs-number">409</span>, <span class="hljs-string">&quot;资源冲突，或者资源被锁&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 不支持的数据，媒体类型</span><br><span class="hljs-comment">     */</span><br>    UNSUPPORTED_TYPE(<span class="hljs-number">415</span>, <span class="hljs-string">&quot;不支持的数据，媒体类型&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统内部错误</span><br><span class="hljs-comment">     */</span><br>    ERROR(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;系统内部错误&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口未实现</span><br><span class="hljs-comment">     */</span><br>    NOT_IMPLEMENTED(<span class="hljs-number">501</span>, <span class="hljs-string">&quot;接口未实现&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统警告消息</span><br><span class="hljs-comment">     */</span><br>    WARN(<span class="hljs-number">601</span>,<span class="hljs-string">&quot;系统警告消息&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer code;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String message;<br><br>    HttpStatusEnum(Integer code, String message) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>封装返回结果集</p><p>ResponseResult.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回结果集</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> javadog</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseResult</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer code;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Boolean status;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 全参数方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code    状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status  状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 返回信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data    返回数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;     泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">response</span><span class="hljs-params">(Integer code, Boolean status, String message, T data)</span> &#123;<br>        ResponseResult&lt;T&gt; responseResult = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseResult</span>&lt;&gt;();<br>        responseResult.setCode(code);<br>        responseResult.setStatus(status);<br>        responseResult.setMessage(message);<br>        responseResult.setData(data);<br>        <span class="hljs-keyword">return</span> responseResult;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 全参数方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code    状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status  状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 返回信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;     泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">response</span><span class="hljs-params">(Integer code, Boolean status, String message)</span> &#123;<br>        ResponseResult&lt;T&gt; responseResult = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseResult</span>&lt;&gt;();<br>        responseResult.setCode(code);<br>        responseResult.setStatus(status);<br>        responseResult.setMessage(message);<br>        <span class="hljs-keyword">return</span> responseResult;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功返回（无参）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> response(HttpStatusEnum.SUCCESS.getCode(), <span class="hljs-literal">true</span>, HttpStatusEnum.SUCCESS.getMessage(), <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功返回（枚举参数）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> httpResponseEnum 枚举参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;              泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(HttpStatusEnum httpResponseEnum)</span> &#123;<br>        <span class="hljs-keyword">return</span> response(httpResponseEnum.getCode(), <span class="hljs-literal">true</span>, httpResponseEnum.getMessage());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功返回（状态码+返回信息）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code    状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 返回信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;     泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(Integer code, String message)</span> &#123;<br>        <span class="hljs-keyword">return</span> response(code, <span class="hljs-literal">true</span>, message);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功返回（返回信息 + 数据）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 返回信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data    数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;     泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(String message, T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> response(HttpStatusEnum.SUCCESS.getCode(), <span class="hljs-literal">true</span>, message, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功返回（状态码+返回信息+数据）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code    状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 返回信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data    数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;     泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(Integer code, String message, T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> response(code, <span class="hljs-literal">true</span>, message, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功返回（数据）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;  泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> response(HttpStatusEnum.SUCCESS.getCode(), <span class="hljs-literal">true</span>, HttpStatusEnum.SUCCESS.getMessage(), data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功返回（返回信息）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 返回信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;  泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-keyword">return</span> response(HttpStatusEnum.SUCCESS.getCode(), <span class="hljs-literal">true</span>, message, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败返回（无参）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">fail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> response(HttpStatusEnum.ERROR.getCode(), <span class="hljs-literal">false</span>, HttpStatusEnum.ERROR.getMessage(), <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败返回（枚举）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> httpResponseEnum 枚举</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;              泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">fail</span><span class="hljs-params">(HttpStatusEnum httpResponseEnum)</span> &#123;<br>        <span class="hljs-keyword">return</span> response(httpResponseEnum.getCode(), <span class="hljs-literal">false</span>, httpResponseEnum.getMessage());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败返回（状态码+返回信息）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code    状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 返回信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;     泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">fail</span><span class="hljs-params">(Integer code, String message)</span> &#123;<br>        <span class="hljs-keyword">return</span> response(code, <span class="hljs-literal">false</span>, message);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败返回（返回信息+数据）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 返回信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data    数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;     泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">fail</span><span class="hljs-params">(String message, T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> response(HttpStatusEnum.ERROR.getCode(), <span class="hljs-literal">false</span>, message, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败返回（状态码+返回信息+数据）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code    状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 返回消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data    数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;     泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">fail</span><span class="hljs-params">(Integer code, String message, T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> response(code, <span class="hljs-literal">false</span>, message, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败返回（数据）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;  泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">fail</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> response(HttpStatusEnum.ERROR.getCode(), <span class="hljs-literal">false</span>, HttpStatusEnum.ERROR.getMessage(), data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败返回（返回信息）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 返回信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;  泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ResponseResult&lt;T&gt;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; ResponseResult&lt;T&gt; <span class="hljs-title function_">fail</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-keyword">return</span> response(HttpStatusEnum.ERROR.getCode(), <span class="hljs-literal">false</span>, message, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>随后在需要返回的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ResponseResult&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt; <span class="hljs-title function_">getUser</span><span class="hljs-params">(String name)</span> &#123;<br>    System.out.println(name);<br>    <span class="hljs-comment">//判空处理</span><br>    <span class="hljs-keyword">if</span> (StringUtils.hasLength(name)) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select name from user where name LIKE &#x27;%&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;%&#x27;&quot;</span> ;<br>        System.out.println(sql);<br>        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(sql);<br>        System.out.println(<span class="hljs-string">&quot;调用了hi这个接口了&quot;</span>);<br>        <span class="hljs-keyword">return</span> ResponseResult.success(list);<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select name from user&quot;</span>;<br>    List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(sql);<br>    System.out.println(<span class="hljs-string">&quot;调用了hi这个接口了&quot;</span>);<br>   <span class="hljs-keyword">return</span> ResponseResult.success(list); <span class="hljs-comment">//调用此处实现统一格式化输出结果。</span><br>&#125;<br><br>ResponseResult&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt; 定义返回类型<br><span class="hljs-keyword">return</span> ResponseResult.success(list);  list为返回信息<br>基本格式如下<br>&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;成功&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常处理返回"><a href="#异常处理返回" class="headerlink" title="异常处理返回"></a>异常处理返回</h2><p>pojo 层   实体类–主要存放数据库对应数据及方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name=&quot;user&quot;)</span><br><span class="hljs-meta">@JsonIgnoreProperties(&#123;&quot;handler&quot;,&quot;hibernateLazyInitializer&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">user</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-meta">@Column(name = &quot;id&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Dao 层    继承 JpaRepository  实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">userDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;user, Integer&gt; &#123;<br>    <span class="hljs-comment">//判断ID 是否存在</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">existsById</span><span class="hljs-params">(<span class="hljs-type">long</span> id)</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">existsByName</span><span class="hljs-params">(String name)</span>;<br><br>    <span class="hljs-comment">//查看数据总数</span><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">count</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>service层       方法行为定义 ，定义一个方法isExist，调用了Dao中的existsById 方法，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isExist</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-keyword">return</span> userDao.existsById(id);<br>&#125;<br></code></pre></td></tr></table></figure><p>controller 层，编写接口地址，调用方法，逻辑处理，返回结果。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/getUserById&quot;)</span><br><span class="hljs-keyword">public</span> ResponseResult&lt;user&gt; <span class="hljs-title function_">getId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-keyword">if</span> (userService.isExist(id)) &#123;<br>        System.out.println(<span class="hljs-string">&quot;存在&quot;</span>);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> userService.getById(id);<br>        <span class="hljs-keyword">return</span> ResponseResult.success(info);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ResponseResult.fail(<span class="hljs-string">&quot;ID不存在&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx从安装到基础配置</title>
    <link href="/2024/04/16/nginx%20%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/04/16/nginx%20%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h1><p>mac系统利用brew 包管理工具安装</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>nginx<br></code></pre></td></tr></table></figure><p>安装完成后使用命令查看版本号</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs d">nginx -v<br><span class="hljs-comment">//终端配置</span><br>yuhang<span class="hljs-keyword">@yuhangdeMacBook</span>-Pro ~ % nginx -v     <br>nginx <span class="hljs-keyword">version</span>: nginx/<span class="hljs-number">1.25</span><span class="hljs-number">.4</span><br></code></pre></td></tr></table></figure><p>利用命令查看nginx 的安装目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">nginx -V<br><br>nginx version: nginx/<span class="hljs-number">1.25</span>.<span class="hljs-number">4</span><br>built by clang <span class="hljs-number">14.0</span>.<span class="hljs-number">0</span> (clang-<span class="hljs-number">1400.0</span>.<span class="hljs-number">29.202</span>)<br>built with OpenSSL <span class="hljs-number">3.2</span>.<span class="hljs-number">1</span> <span class="hljs-number">30</span> Jan <span class="hljs-number">2024</span><br>TLS SNI support enabled<br>configure arguments: --prefix=<span class="hljs-regexp">/opt/</span>homebrew<span class="hljs-regexp">/Cellar/</span>nginx<span class="hljs-regexp">/1.25.4 --sbin-path=/</span>opt<span class="hljs-regexp">/homebrew/</span>Cellar<span class="hljs-regexp">/nginx/</span><span class="hljs-number">1.25</span>.<span class="hljs-number">4</span><span class="hljs-regexp">/bin/</span>nginx --with-cc-opt=<span class="hljs-string">&#x27;-I/opt/homebrew/opt/pcre2/include -I/opt/homebrew/opt/openssl@3/include&#x27;</span> --with-ld-opt=<span class="hljs-string">&#x27;-L/opt/homebrew/opt/pcre2/lib -L/opt/homebrew/opt/openssl@3/lib&#x27;</span> <br>--conf-path=<span class="hljs-regexp">/opt/</span>homebrew<span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/nginx.conf --pid-path=/</span>opt<span class="hljs-regexp">/homebrew/</span>var<span class="hljs-regexp">/run/</span>nginx.pid --lock-path=<span class="hljs-regexp">/opt/</span>homebrew<span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/nginx.lock --http-client-body-temp-path=/</span>opt<span class="hljs-regexp">/homebrew/</span>var<span class="hljs-regexp">/run/</span>nginx<span class="hljs-regexp">/client_body_temp --http-proxy-temp-path=/</span>opt<span class="hljs-regexp">/homebrew/</span>var<span class="hljs-regexp">/run/</span>nginx<span class="hljs-regexp">/proxy_temp --http-fastcgi-temp-path=/</span>opt<span class="hljs-regexp">/homebrew/</span>var<span class="hljs-regexp">/run/</span>nginx<span class="hljs-regexp">/fastcgi_temp --http-uwsgi-temp-path=/</span>opt<span class="hljs-regexp">/homebrew/</span>var<span class="hljs-regexp">/run/</span>nginx<span class="hljs-regexp">/uwsgi_temp --http-scgi-temp-path=/</span>opt<span class="hljs-regexp">/homebrew/</span>var<span class="hljs-regexp">/run/</span>nginx<span class="hljs-regexp">/scgi_temp --http-log-path=/</span>opt<span class="hljs-regexp">/homebrew/</span>var<span class="hljs-regexp">/log/</span>nginx<span class="hljs-regexp">/access.log --error-log-path=/</span>opt<span class="hljs-regexp">/homebrew/</span>var<span class="hljs-regexp">/log/</span>nginx/error.log --with-compat --with-debug --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-http_v3_module --with-ipv6 --with-mail --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module<br></code></pre></td></tr></table></figure><p>nginx 的一些配置命令</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">brew services <span class="hljs-built_in">start</span> nginx    <span class="hljs-comment"># 启动 或nginx  直接启动</span><br>nginx -c /usr/<span class="hljs-built_in">local</span>/nginx/conf/nginx.conf    <span class="hljs-comment"># 首先利用配置文件启动nginx</span><br>nginx -h                     <span class="hljs-comment"># 查看帮助信息</span><br>nginx -v                     <span class="hljs-comment"># 查看nginx版本(小写字母v)</span><br>nginx -V                     <span class="hljs-comment"># 除版本信息外还显示配置参数信息(大写字母V)</span><br><span class="hljs-built_in">start</span> nginx                  <span class="hljs-comment"># 启动nginx</span><br><span class="hljs-built_in">start</span> nginx -c filename      <span class="hljs-comment"># 指定配置文件启动nginx</span><br>nginx -s quit                <span class="hljs-comment"># 关闭nginx，完整有序的停止nginx，保存相关信息</span><br>nginx -s <span class="hljs-built_in">stop</span>                <span class="hljs-comment"># 关闭nginx，快速停止nginx，可能并不保存相关信息</span><br>nginx -s reload              <span class="hljs-comment"># 重新载入nginx，当配置信息修改需要重新加载配置是使用</span><br>nginx -s reopen              <span class="hljs-comment"># 重新打开日志文件</span><br>nginx -t -c filename         <span class="hljs-comment"># 测试nginx配置文件是否正确</span><br>systemctl <span class="hljs-built_in">stop</span> nginx.service       <span class="hljs-comment"># linux停止</span><br>systemctl <span class="hljs-built_in">start</span> nginx.service      <span class="hljs-comment"># linux启动</span><br>ps aux | grep nginx                <span class="hljs-comment"># 查看服务</span><br>systemctl restart nginx.service    <span class="hljs-comment"># 重启</span><br>netstat -tlnp                      <span class="hljs-comment"># 端口号</span><br></code></pre></td></tr></table></figure><h1 id="2、部署一个静态文件"><a href="#2、部署一个静态文件" class="headerlink" title="2、部署一个静态文件"></a>2、部署一个静态文件</h1><p>打开配置文件nginx.conf</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#user  nobody;</span><br>worker_processes  <span class="hljs-number">1</span>;   \\work 的进程数量--一般对应为服务器的内核数量 可以配置为auto<br><span class="hljs-comment">#worker_processes  auto;</span><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><span class="hljs-comment">#服务器与客户端之间网络连接的相关配置</span><br>events &#123;<br>    worker_connections  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-comment">#配置虚拟主机、反向代理</span><br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br>    sendfile        on;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    keepalive_timeout  <span class="hljs-number">65</span>;<br>    <span class="hljs-comment">#gzip  on;</span><br>    server &#123;<br>        listen       <span class="hljs-number">8080</span>;   监听<span class="hljs-number">8080</span> 端口<br>        server_name  localhost;<br><span class="hljs-comment"># 防止刷新后出现404 </span><br>try_files $uri $uri/ /index.html =<span class="hljs-number">404</span>; <br>       <span class="hljs-comment">#charset koi8-r;</span><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><span class="hljs-comment">#根目录</span><br>        <span class="hljs-keyword">location</span> <span class="hljs-title">/ &#123;</span><br><span class="hljs-title">        #静态页面位置</span><br><span class="hljs-title">            root</span>   html;<br>            index  index.html index.htm;<br>        &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>        <span class="hljs-keyword">location</span> <span class="hljs-title">= /50x</span>.html &#123;<br>            root   html;<br>        &#125;<br><br>        <span class="hljs-comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    proxy_pass   http://127.0.0.1;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    root           html;</span><br>        <span class="hljs-comment">#    fastcgi_pass   127.0.0.1:9000;</span><br>        <span class="hljs-comment">#    fastcgi_index  index.php;</span><br>        <span class="hljs-comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br>        <span class="hljs-comment">#    include        fastcgi_params;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># deny access to .htaccess files, if Apache&#x27;s document root</span><br>        <span class="hljs-comment"># concurs with nginx&#x27;s one</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ /\.ht &#123;</span><br>        <span class="hljs-comment">#    deny  all;</span><br>        <span class="hljs-comment">#&#125;</span><br>    &#125;<br><br><br>    <span class="hljs-comment"># another virtual host using mix of IP-, name-, and port-based configuration</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       8000;</span><br>    <span class="hljs-comment">#    listen       somename:8080;</span><br>    <span class="hljs-comment">#    server_name  somename  alias  another.alias;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br><br>    <span class="hljs-comment"># HTTPS server</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       443 ssl;</span><br>    <span class="hljs-comment">#    server_name  localhost;</span><br><br>    <span class="hljs-comment">#    ssl_certificate      cert.pem;</span><br>    <span class="hljs-comment">#    ssl_certificate_key  cert.key;</span><br><br>    <span class="hljs-comment">#    ssl_session_cache    shared:SSL:1m;</span><br>    <span class="hljs-comment">#    ssl_session_timeout  5m;</span><br><br>    <span class="hljs-comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br>    <span class="hljs-comment">#    ssl_prefer_server_ciphers  on;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br>    include servers/*;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li><p>Nginx 页面刷新变成404 解决方案 在页面服务中添加以下代码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.html =<span class="hljs-number">404</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="虚拟主机配置（一台服务器配置多个网站服务）"><a href="#虚拟主机配置（一台服务器配置多个网站服务）" class="headerlink" title="虚拟主机配置（一台服务器配置多个网站服务）"></a>虚拟主机配置（一台服务器配置多个网站服务）</h3><p>配置文件目录下添加配置文件例如：vue.conf</p><p>配置新的监听服务、使用新端口号</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">server</span>&#123;<br>listen <span class="hljs-number">8081</span>;  监听端口号<br>server_name localhost;   域名<br>location / &#123;<br>root html/vue;  静态页面文件地址<br><span class="hljs-keyword">index</span>  <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>try_files $uri $uri/ /<span class="hljs-keyword">index</span>.html =<span class="hljs-number">404</span>;  防止刷新后出现页面<span class="hljs-number">404</span> 问题<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、跨域问题"><a href="#3、跨域问题" class="headerlink" title="3、跨域问题"></a>3、跨域问题</h1><p>通过配置代理方式</p><p>请求方</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>服务端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>teas.peri-nas.top;<br></code></pre></td></tr></table></figure><p>实现跨域请求，避免cors 跨域检查。</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">location /&#123;<br>通过代理的方式请求。<br><span class="hljs-attribute">proxy_pass https</span>://teas<span class="hljs-variable">.peri-nas</span><span class="hljs-variable">.top</span>;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="4、https"><a href="#4、https" class="headerlink" title="4、https"></a>4、https</h1><p>申请安全证书文件、或者自己生成一个证书</p><p>通过命令</p><p>生成私钥文件（private key）</p><p>openssl genrsa -out private.key 2048 </p><p>生成证书签名请求文件</p><p>openssl req -new -key private.key -out cert.csr</p><p>使用私钥对证书签名从而生成证书文件pem</p><p>openssl x509 -req -in cert.csr -out caret.pem -signkey private.key</p><p>随后将caret.pem，private.key文件保存，并在配置文件中配置正确的位置</p><pre><code class="hljs"># HTTPS server#server &#123;   listen       443 ssl;   server_name  localhost;   ssl_certificate     caret.pem;   ssl_certificate_key  private.key;   ssl_session_cache    shared:SSL:1m;   ssl_session_timeout  5m;   ssl_ciphers  HIGH:!aNULL:!MD5;   ssl_prefer_server_ciphers  on;   location / &#123;        root   html;        index  index.html index.htm;        try_files $uri $uri/ /index.html =404;        proxy_pass https://teas.peri-nas.top;        &#125;    &#125;</code></pre><p>让http 请求自动跳转到https 请求(添加至http的server服务中)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">retrun <span class="hljs-number">301</span> https:<span class="hljs-regexp">//</span><span class="hljs-variable">$server_name</span><span class="hljs-variable">$request_uri</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;<br>    listen       <span class="hljs-number">8080</span>;<br>    server_name  localhost;<br>return <span class="hljs-number">301</span> https:<span class="hljs-variable">$server_name</span><span class="hljs-variable">$request_uri</span>;<br>    <span class="hljs-comment">#charset koi8-r;</span><br>    <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br>    location / &#123;   匹配根目录内容<br>        root   html;<br>        index  index.html index.htm;<br>try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.html =<span class="hljs-number">404</span>;<br>proxy_pass https:<span class="hljs-regexp">//</span>teas.peri-nas.top;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式大全</title>
    <link href="/2024/02/23/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%A7%E5%85%A8/"/>
    <url>/2024/02/23/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式大全"><a href="#正则表达式大全" class="headerlink" title="正则表达式大全"></a>正则表达式大全</h1><h3 id="1、利用正则表达式去除中文或者其他字符"><a href="#1、利用正则表达式去除中文或者其他字符" class="headerlink" title="1、利用正则表达式去除中文或者其他字符"></a>1、利用正则表达式去除中文或者其他字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> newStr = <span class="hljs-title class_">String</span>(item).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[^a-zA-Z0-9]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);    item为需要去除的字符串<br></code></pre></td></tr></table></figure><h3 id="2、大写字母转换为小写"><a href="#2、大写字母转换为小写" class="headerlink" title="2、大写字母转换为小写"></a>2、大写字母转换为小写</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let newStr = list.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/[A-Z]/g</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">match</span>) &#123;<br>  <span class="hljs-keyword">return</span> match.toLowerCase();<br>&#125;);<br>list 为需要转换的字符串<br></code></pre></td></tr></table></figure><h3 id="3、去除字符串中的第一个字符"><a href="#3、去除字符串中的第一个字符" class="headerlink" title="3、去除字符串中的第一个字符"></a>3、去除字符串中的第一个字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-string">&#x27;/pages/index/message&#x27;</span>;<br><span class="hljs-comment">// 使用正则表达式去除第一个斜杠</span><br><span class="hljs-keyword">const</span> result = path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\//</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>4、匹配字符串中的前面括号</p><p>例如如下，通过正则表达式筛选出前面的’(123)’并且不影响到后面的’(5334)’</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos">(<span class="hljs-number">123</span>)测试字符串(<span class="hljs-number">5334</span>)<br>const result = <span class="hljs-built_in">path</span>.<span class="hljs-built_in">replace</span>(\\((.*?)\\);<br></code></pre></td></tr></table></figure><p>5、限制特殊字符</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">const emojiReg = /[<span class="hljs-symbol">\uD83C</span>|<span class="hljs-symbol">\uD83D</span>|<span class="hljs-symbol">\uD83E</span>][<span class="hljs-symbol">\uDC00</span>-<span class="hljs-symbol">\uDFFF</span>][<span class="hljs-symbol">\u200D</span>|<span class="hljs-symbol">\uFE0F</span>]|[<span class="hljs-symbol">\uD83C</span>|<span class="hljs-symbol">\uD83D</span>|<span class="hljs-symbol">\uD83E</span>][<span class="hljs-symbol">\uDC00</span>-<span class="hljs-symbol">\uDFFF</span>]|[0-9|*|#]<span class="hljs-symbol">\uFE0F</span><span class="hljs-symbol">\u20E3</span>|[0-9|#]<span class="hljs-symbol">\u20E3</span>|[<span class="hljs-symbol">\u203C</span>-<span class="hljs-symbol">\u3299</span>]<span class="hljs-symbol">\uFE0F</span><span class="hljs-symbol">\u200D</span>|[<span class="hljs-symbol">\u203C</span>-<span class="hljs-symbol">\u3299</span>]<span class="hljs-symbol">\uFE0F</span>|[<span class="hljs-symbol">\u2122</span>-<span class="hljs-symbol">\u2B55</span>]|<span class="hljs-symbol">\u303D</span>|[\A9|\AE]<span class="hljs-symbol">\u3030</span>|\uA9|\uAE|<span class="hljs-symbol">\u3030</span>/ig;<br>return  !emojiReg.test(value);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>正则表达式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>下拉多选组件</title>
    <link href="/2024/01/10/%E5%A4%9A%E9%80%89/"/>
    <url>/2024/01/10/%E5%A4%9A%E9%80%89/</url>
    
    <content type="html"><![CDATA[<p>形如下图所示效果，可多选选项并展示标签，超多所设定最大标签数则将其隐藏并显示对应数目</p><h1 id="muiltpleSelect-vue"><a href="#muiltpleSelect-vue" class="headerlink" title="muiltpleSelect.vue"></a>muiltpleSelect.vue</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;template&gt;<br>  &lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-stat__select&quot;</span>&gt;<br>    &lt;span v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;label&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-label-text&quot;</span>&gt;&#123;&#123;label + <span class="hljs-string">&#x27;：&#x27;</span>&#125;&#125;&lt;/span&gt;<br>    &lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-stat-box&quot;</span> :<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;&#123;&#x27;uni-stat__actived&#x27;: current&#125;&quot;</span>&gt;<br>      &lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-select&quot;</span> :style=<span class="hljs-string">&quot;&#123;height:multiple?&#x27;100%&#x27;:&#x27; 35px;&#x27;&#125;&quot;</span><br>            :<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;&#123;&#x27;uni-select--disabled&#x27;:disabled&#125;&quot;</span>&gt;<br>        &lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-select__input-box&quot;</span> :style=<span class="hljs-string">&quot;&#123;height:multiple?&#x27;100%&#x27;:&#x27;35px;&#x27;&#125;&quot;</span> <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;toggleSelector&quot;</span>&gt;<br>          &lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;&quot;</span> style=<span class="hljs-string">&quot;display: flex;flex-wrap: wrap;width: 100%;&quot;</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;multiple&amp;&amp;current.length&gt;0&quot;</span>&gt;<br>            &lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;tag-calss&quot;</span><br>                  v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(item,index) in collapseTags?current.slice(0,collapseTagsNum):current&quot;</span><br>                  :key=<span class="hljs-string">&quot;item[dataValue]&quot;</span>&gt;<br>              &lt;span <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;&#123;&#123;item[dataKey]&#125;&#125;&lt;/span&gt;<br>              &lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-meta">@click</span>.stop=<span class="hljs-string">&quot;delItem(item)&quot;</span>&gt;<br>                &lt;uni-icons type=<span class="hljs-string">&quot;clear&quot;</span> style=<span class="hljs-string">&quot;margin-left: 4px;&quot;</span> color=<span class="hljs-string">&quot;#c0c4cc&quot;</span> /&gt;<br>              &lt;/view&gt;<br>            &lt;/view&gt;<br>            &lt;view v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;current.length&gt;collapseTagsNum&amp;&amp;collapseTags&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;tag-calss&quot;</span>&gt;<br>              &lt;span <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;+&#123;&#123;current.length-collapseTagsNum&#125;&#125;&lt;/span&gt;<br>            &lt;/view&gt;<br>          &lt;/view&gt;<br>          &lt;view v-<span class="hljs-keyword">else</span>-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;current&amp;&amp;current.length&gt;0&amp;&amp;!filterable&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-select__input-text&quot;</span>&gt;&#123;&#123;current&#125;&#125;<br>          &lt;/view&gt;<br>          &lt;input v-<span class="hljs-keyword">else</span>-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;filterable&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-select__input-text&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> style=<span class="hljs-string">&quot;font-size: 12px;&quot;</span><br>                 :placeholder=<span class="hljs-string">&quot;placeholderOld&quot;</span> v-model=<span class="hljs-string">&quot;current&quot;</span>&gt;<br>          &lt;view v-<span class="hljs-keyword">else</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-select__input-text uni-select__input-placeholder&quot;</span>&gt;&#123;&#123;typePlaceholder&#125;&#125;&lt;/view&gt;<br>          &lt;uni-icons v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;current &amp;&amp; clear&quot;</span> type=<span class="hljs-string">&quot;clear&quot;</span> color=<span class="hljs-string">&quot;#c0c4cc&quot;</span> size=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;clearVal&quot;</span> /&gt;<br>          &lt;uni-icons v-<span class="hljs-keyword">else</span> :type=<span class="hljs-string">&quot;showSelector? &#x27;top&#x27; : &#x27;bottom&#x27;&quot;</span> size=<span class="hljs-string">&quot;14&quot;</span> color=<span class="hljs-string">&quot;#999&quot;</span> /&gt;<br>        &lt;/view&gt;<br>        &lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-select--mask&quot;</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;showSelector&quot;</span> <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;toggleSelector&quot;</span> /&gt;<br>        &lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-select__selector&quot;</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;showSelector&quot;</span>&gt;<br>          &lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-popper__arrow&quot;</span>&gt;&lt;/view&gt;<br>          &lt;scroll-view scroll-y=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-select__selector-scroll&quot;</span>&gt;<br>            &lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-select__selector-empty&quot;</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;filterMixinDatacomResData.length === 0&quot;</span>&gt;<br>              &lt;span&gt;&#123;&#123;emptyTips&#125;&#125;&lt;/span&gt;<br>            &lt;/view&gt;<br>            &lt;view v-<span class="hljs-keyword">else</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;uni-select__selector-item&quot;</span><br>                  style=<span class="hljs-string">&quot;display: flex;justify-content: space-between;align-items: center;&quot;</span><br>                  v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(item,index) in filterMixinDatacomResData&quot;</span> :key=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;change(item)&quot;</span>&gt;<br>&lt;span<br>                  :<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;&#123;&#x27;uni-select__selector__disabled&#x27;: item.disable&#125;&quot;</span>&gt;&#123;&#123;formatItemName(item)&#125;&#125;&lt;/span&gt;<br>              &lt;uni-icons v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;multiple&amp;&amp;currentArr.includes(item[dataValue])&quot;</span> type=<span class="hljs-string">&quot;checkmarkempty&quot;</span><br>                         color=<span class="hljs-string">&quot;#007aff&quot;</span> /&gt;<br>            &lt;/view&gt;<br>          &lt;/scroll-view&gt;<br>        &lt;/view&gt;<br>      &lt;/view&gt;<br>    &lt;/view&gt;<br>  &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * DataChecklist 数据选择器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 通过数据渲染的下拉框组件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@tutorial</span> https://uniapp.dcloud.io/component/uniui/uni-data-select</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> &#123;String&#125; value 默认值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> &#123;Array&#125; localdata 本地数据 ，格式 [&#123;text:&#x27;&#x27;,value:&#x27;&#x27;&#125;]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> &#123;Boolean&#125; clear 是否可以清空已选项</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> &#123;Boolean&#125; emptyText 没有数据时显示的文字 ，本地数据无效</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> &#123;String&#125; label 左侧标题</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> &#123;String&#125; placeholder 输入框的提示文字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> &#123;Boolean&#125; disabled 是否禁用</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@event</span> &#123;Function&#125; change  选中发生变化触发</span><br><span class="hljs-comment"> */</span><br><br>export default &#123;<br>  name: <span class="hljs-string">&quot;my-selectCheckbox&quot;</span>,<br>  mixins: [uniCloud.mixinDatacom || &#123;&#125;],<br>  props: &#123;<br>    collapseTagsNum: &#123;<br>      type: Number,<br>      default: <span class="hljs-number">1</span><br>    &#125;,<br>    collapseTags: &#123;<br>      type: <span class="hljs-built_in">Boolean</span>,<br>      default: <span class="hljs-literal">false</span><br>    &#125;,<br>    dataKey: &#123;<br>      type: [String],<br>      default: <span class="hljs-string">&#x27;text&#x27;</span><br>    &#125;,<br>    dataValue: &#123;<br>      type: [String],<br>      default: <span class="hljs-string">&#x27;value&#x27;</span><br>    &#125;,<br>    multiple: &#123;<br>      type: <span class="hljs-built_in">Boolean</span>,<br>      default: <span class="hljs-literal">false</span><br>    &#125;,<br>    filterable: &#123;<br>      type: <span class="hljs-built_in">Boolean</span>,<br>      default: <span class="hljs-literal">false</span><br>    &#125;,<br>    localdata: &#123;<br>      type: Array,<br>      default () &#123;<br>        <span class="hljs-keyword">return</span> []<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">// #ifndef VUE3</span><br>    value: &#123;<br>      type: [String, Number, Array],<br>      default: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;,<br>    <span class="hljs-comment">// #endif</span><br>    <span class="hljs-comment">// #ifdef VUE3</span><br>    modelValue: &#123;<br>      type: [String, Number, Array],<br>      default: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;,<br>    <span class="hljs-comment">// #endif</span><br>    label: &#123;<br>      type: String,<br>      default: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;,<br>    placeholder: &#123;<br>      type: String,<br>      default: <span class="hljs-string">&#x27;请选择&#x27;</span><br>    &#125;,<br>    emptyTips: &#123;<br>      type: String,<br>      default: <span class="hljs-string">&#x27;无选项&#x27;</span><br>    &#125;,<br>    clear: &#123;<br>      type: <span class="hljs-built_in">Boolean</span>,<br>      default: <span class="hljs-literal">true</span><br>    &#125;,<br>    defItem: &#123;<br>      type: Number,<br>      default: <span class="hljs-number">0</span><br>    &#125;,<br>    disabled: &#123;<br>      type: <span class="hljs-built_in">Boolean</span>,<br>      default: <span class="hljs-literal">false</span><br>    &#125;,<br>    <span class="hljs-comment">// 格式化输出 用法 field=&quot;_id as value, version as text, uni_platform as label&quot; format=&quot;&#123;label&#125; - &#123;text&#125;&quot;</span><br>    format: &#123;<br>      type: String,<br>      default: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;,<br>  &#125;,<br>  <span class="hljs-keyword">data</span>() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      showSelector: <span class="hljs-literal">false</span>,<br>      current: [],<br>      mixinDatacomResData: [],<br>      apps: [],<br>      channels: [],<br>      cacheKey: <span class="hljs-string">&quot;uni-data-select-lastSelectedValue&quot;</span>,<br>      placeholderOld: <span class="hljs-string">&quot;&quot;</span>,<br>      currentArr: []<br>    &#125;;<br>  &#125;,<br>  created() &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.multiple) &#123;<br>      <span class="hljs-comment">// #ifndef VUE3</span><br>      <span class="hljs-keyword">this</span>.currentArr = <span class="hljs-keyword">this</span>.value || []<br>      <span class="hljs-comment">// #endif</span><br>      <span class="hljs-comment">// #ifdef VUE3</span><br>      <span class="hljs-keyword">this</span>.currentArr = <span class="hljs-keyword">this</span>.modelValue || []<br>      <span class="hljs-comment">// #endif</span><br>      <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.current) &#123;<br>        <span class="hljs-keyword">this</span>.current = []<br>      &#125;<br>      <span class="hljs-comment">// #ifndef VUE3</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value &amp;&amp; <span class="hljs-keyword">this</span>.value.length &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">this</span>.filterMixinDatacomResData.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">this</span>.value.forEach(item =&gt; &#123;<br>          let current = <span class="hljs-keyword">this</span>.filterMixinDatacomResData.find(e =&gt;<br>              e[<span class="hljs-keyword">this</span>.dataValue] == item<br>          )<br>          <span class="hljs-comment">// this.current.push(current)</span><br>        &#125;)<br>      &#125;<br>      <span class="hljs-comment">// #endif</span><br>      <span class="hljs-comment">// #ifdef VUE3</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.modelValue &amp;&amp; <span class="hljs-keyword">this</span>.modelValue.length &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">this</span>.filterMixinDatacomResData.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">this</span>.modelValue.forEach(item =&gt; &#123;<br>          let current = <span class="hljs-keyword">this</span>.filterMixinDatacomResData.find(e =&gt;<br>              e[<span class="hljs-keyword">this</span>.dataValue] == item<br>          )<br>          <span class="hljs-keyword">this</span>.current.push(current)<br>        &#125;)<br>      &#125;<br>      <span class="hljs-comment">// #endif</span><br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// #ifndef VUE3</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value) &#123;<br>        <span class="hljs-keyword">this</span>.current = <span class="hljs-keyword">this</span>.formatItemName(<span class="hljs-keyword">this</span>.filterMixinDatacomResData.find(e =&gt;<br>            e[<span class="hljs-keyword">this</span>.dataValue] == <span class="hljs-keyword">this</span>.value<br>        ))<br>      &#125;<br>      <span class="hljs-comment">// #endif</span><br>      <span class="hljs-comment">// #ifdef VUE3</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.modelValue) &#123;<br>        <span class="hljs-keyword">this</span>.current = <span class="hljs-keyword">this</span>.formatItemName(<span class="hljs-keyword">this</span>.filterMixinDatacomResData.find(e =&gt;<br>            e[<span class="hljs-keyword">this</span>.dataValue] == <span class="hljs-keyword">this</span>.modelValue<br>        ))<br>      &#125;<br>      <span class="hljs-comment">// #endif</span><br>    &#125;<br>    <span class="hljs-keyword">this</span>.placeholderOld = <span class="hljs-keyword">this</span>.placeholder<br>    <span class="hljs-keyword">this</span>.debounceGet = <span class="hljs-keyword">this</span>.debounce(() =&gt; &#123;<br>      <span class="hljs-keyword">this</span>.query();<br>    &#125;, <span class="hljs-number">300</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.collection &amp;&amp; !<span class="hljs-keyword">this</span>.localdata.length) &#123;<br>      <span class="hljs-keyword">this</span>.debounceGet();<br>    &#125;<br>  &#125;,<br>  computed: &#123;<br>    filterMixinDatacomResData() &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.filterable &amp;&amp; <span class="hljs-keyword">this</span>.current) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.mixinDatacomResData.filter(e =&gt; e[<span class="hljs-keyword">this</span>.dataKey].includes(<span class="hljs-keyword">this</span>.current))<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.mixinDatacomResData<br>      &#125;<br>    &#125;,<br>    typePlaceholder() &#123;<br>      <span class="hljs-keyword">const</span> text = &#123;<br>        <span class="hljs-string">&#x27;opendb-stat-app-versions&#x27;</span>: <span class="hljs-string">&#x27;版本&#x27;</span>,<br>        <span class="hljs-string">&#x27;opendb-app-channels&#x27;</span>: <span class="hljs-string">&#x27;渠道&#x27;</span>,<br>        <span class="hljs-string">&#x27;opendb-app-list&#x27;</span>: <span class="hljs-string">&#x27;应用&#x27;</span><br>      &#125;<br>      <span class="hljs-keyword">const</span> common = <span class="hljs-keyword">this</span>.placeholder<br>      <span class="hljs-keyword">const</span> placeholder = text[<span class="hljs-keyword">this</span>.collection]<br>      <span class="hljs-keyword">return</span> placeholder ?<br>          common + placeholder :<br>          common<br>    &#125;,<br>    valueCom() &#123;<br>      <span class="hljs-comment">// #ifdef VUE3</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.modelValue;<br>      <span class="hljs-comment">// #endif</span><br>      <span class="hljs-comment">// #ifndef VUE3</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value;<br>      <span class="hljs-comment">// #endif</span><br>    &#125;<br>  &#125;,<br>  watch: &#123;<br>    localdata: &#123;<br>      immediate: <span class="hljs-literal">true</span>,<br>      handler(<span class="hljs-keyword">val</span>, old) &#123;<br>        <span class="hljs-keyword">if</span> (Array.isArray(<span class="hljs-keyword">val</span>) &amp;&amp; old !== <span class="hljs-keyword">val</span>) &#123;<br>          <span class="hljs-keyword">this</span>.mixinDatacomResData = <span class="hljs-keyword">val</span><br>        &#125;<br><br>      &#125;<br>    &#125;,<br>    valueCom(<span class="hljs-keyword">val</span>, old) &#123;<br>      <span class="hljs-keyword">this</span>.initDefVal()<br>    &#125;,<br>    mixinDatacomResData: &#123;<br>      immediate: <span class="hljs-literal">true</span>,<br>      handler(<span class="hljs-keyword">val</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">val</span>.length) &#123;<br>          <span class="hljs-keyword">this</span>.initDefVal()<br>        &#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">// modelValue(val) &#123;</span><br>    <span class="hljs-comment">// if (this.multiple &amp;&amp; val &amp;&amp; val.length &gt; 0) &#123;</span><br>    <span class="hljs-comment">// this.currentArr = val</span><br>    <span class="hljs-comment">// if (!this.current) &#123;</span><br>    <span class="hljs-comment">// this.current = []</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// val.forEach(item =&gt; &#123;</span><br>    <span class="hljs-comment">// let current = this.filterMixinDatacomResData.find(e =&gt;</span><br>    <span class="hljs-comment">// e[this.dataValue] == item</span><br>    <span class="hljs-comment">// )</span><br>    <span class="hljs-comment">// this.current.push(current)</span><br>    <span class="hljs-comment">// &#125;)</span><br>    <span class="hljs-comment">// &#125; else &#123;</span><br>    <span class="hljs-comment">// if (val) &#123;</span><br>    <span class="hljs-comment">// this.current = this.formatItemName(this.filterMixinDatacomResData.find(e =&gt;</span><br>    <span class="hljs-comment">// e[this.dataValue] == val</span><br>    <span class="hljs-comment">// ))</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// &#125;,</span><br>    <span class="hljs-comment">// value(val) &#123;</span><br>    <span class="hljs-comment">// if (this.multiple &amp;&amp; val &amp;&amp; val.length &gt; 0) &#123;</span><br>    <span class="hljs-comment">// this.currentArr = val</span><br>    <span class="hljs-comment">// if (!this.current) &#123;</span><br>    <span class="hljs-comment">// this.current = []</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// val.forEach(item =&gt; &#123;</span><br>    <span class="hljs-comment">// let current = this.filterMixinDatacomResData.find(e =&gt;</span><br>    <span class="hljs-comment">// e[this.dataValue] == item</span><br>    <span class="hljs-comment">// )</span><br>    <span class="hljs-comment">// this.current.push(current)</span><br>    <span class="hljs-comment">// &#125;)</span><br>    <span class="hljs-comment">// &#125; else &#123;</span><br>    <span class="hljs-comment">// if (val) &#123;</span><br>    <span class="hljs-comment">// this.current = this.formatItemName(this.filterMixinDatacomResData.find(e =&gt;</span><br>    <span class="hljs-comment">// e[this.dataValue] == val</span><br>    <span class="hljs-comment">// ))</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// &#125;</span><br>  &#125;,<br>  methods: &#123;<br>    debounce(fn, time = <span class="hljs-number">100</span>) &#123;<br>      let timer = <span class="hljs-literal">null</span><br>      <span class="hljs-keyword">return</span> function(...args) &#123;<br>        <span class="hljs-keyword">if</span> (timer) clearTimeout(timer)<br>        timer = setTimeout(() =&gt; &#123;<br>          fn.apply(<span class="hljs-keyword">this</span>, args)<br>        &#125;, time)<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 执行数据库查询</span><br>    query() &#123;<br>      <span class="hljs-keyword">this</span>.mixinDatacomEasyGet();<br>    &#125;,<br>    <span class="hljs-comment">// 监听查询条件变更事件</span><br>    onMixinDatacomPropsChange() &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.collection) &#123;<br>        <span class="hljs-keyword">this</span>.debounceGet();<br>      &#125;<br>    &#125;,<br>    initDefVal() &#123;<br>      let defValue = <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">this</span>.valueCom || <span class="hljs-keyword">this</span>.valueCom === <span class="hljs-number">0</span>) &amp;&amp; !<span class="hljs-keyword">this</span>.isDisabled(<span class="hljs-keyword">this</span>.valueCom)) &#123;<br>        defValue = <span class="hljs-keyword">this</span>.valueCom<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        let strogeValue<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.collection) &#123;<br>          strogeValue = <span class="hljs-keyword">this</span>.getCache()<br>        &#125;<br>        <span class="hljs-keyword">if</span> (strogeValue || strogeValue === <span class="hljs-number">0</span>) &#123;<br>          defValue = strogeValue<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          let defItem = <span class="hljs-string">&#x27;&#x27;</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.defItem &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">this</span>.defItem &lt;= <span class="hljs-keyword">this</span>.mixinDatacomResData.length) &#123;<br>            defItem = <span class="hljs-keyword">this</span>.mixinDatacomResData[<span class="hljs-keyword">this</span>.defItem - <span class="hljs-number">1</span>][<span class="hljs-keyword">this</span>.dataValue]<br>          &#125;<br>          defValue = defItem<br>        &#125;<br>        <span class="hljs-keyword">if</span> (defValue || defValue === <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">this</span>.emit(defValue)<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.multiple) &#123;<br>        <span class="hljs-keyword">this</span>.current = []<br>        defValue.forEach(item =&gt; &#123;<br>          let current = <span class="hljs-keyword">this</span>.filterMixinDatacomResData.find(e =&gt;<br>              e[<span class="hljs-keyword">this</span>.dataValue] == item<br>          )<br>          <span class="hljs-keyword">this</span>.current.push(current)<br>        &#125;)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">const</span> def = <span class="hljs-keyword">this</span>.mixinDatacomResData.find(item =&gt; item[<span class="hljs-keyword">this</span>.dataValue] === defValue)<br>        <span class="hljs-keyword">this</span>.current = def ? <span class="hljs-keyword">this</span>.formatItemName(def) : <span class="hljs-string">&#x27;&#x27;</span><br>      &#125;<br>    &#125;,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;[String, Number]&#125; value</span><br><span class="hljs-comment">     * 判断用户给的 value 是否同时为禁用状态</span><br><span class="hljs-comment">     */</span><br>    isDisabled(value) &#123;<br>      let isDisabled = <span class="hljs-literal">false</span>;<br><br>      <span class="hljs-keyword">this</span>.mixinDatacomResData.forEach(item =&gt; &#123;<br>        <span class="hljs-keyword">if</span> (item[<span class="hljs-keyword">this</span>.dataValue] === value) &#123;<br>          isDisabled = item.disable<br>        &#125;<br>      &#125;)<br><br>      <span class="hljs-keyword">return</span> isDisabled;<br>    &#125;,<br><br>    clearVal() &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.multiple) &#123;<br>        <span class="hljs-keyword">this</span>.current = []<br>        <span class="hljs-keyword">this</span>.currentArr = []<br>        <span class="hljs-keyword">this</span>.emit([])<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">this</span>.current = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">this</span>.currentArr = []<br>        <span class="hljs-keyword">this</span>.emit(<span class="hljs-string">&#x27;&#x27;</span>)<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.collection) &#123;<br>        <span class="hljs-keyword">this</span>.removeCache()<br>      &#125;<br>      <span class="hljs-keyword">this</span>.placeholderOld = <span class="hljs-keyword">this</span>.placeholder<br>    &#125;,<br>    change(item) &#123;<br>      <span class="hljs-keyword">if</span> (!item.disable) &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.multiple) &#123;<br>          <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.current) &#123;<br>            <span class="hljs-keyword">this</span>.current = []<br>          &#125;<br>          <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.currentArr) &#123;<br>            <span class="hljs-keyword">this</span>.currentArr = []<br>          &#125;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.currentArr.includes(item[<span class="hljs-keyword">this</span>.dataValue])) &#123;<br>            let index = <span class="hljs-keyword">this</span>.current.findIndex(e =&gt; &#123;<br>              <span class="hljs-keyword">return</span> e[<span class="hljs-keyword">this</span>.dataValue] == item[<span class="hljs-keyword">this</span>.dataValue]<br>            &#125;)<br><br>            <span class="hljs-keyword">this</span>.current.splice(index, <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">this</span>.currentArr.splice(index, <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">this</span>.emit(<span class="hljs-keyword">this</span>.current)<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            <span class="hljs-keyword">this</span>.current.push(item)<br>            <span class="hljs-keyword">this</span>.currentArr.push(item[<span class="hljs-keyword">this</span>.dataValue])<br>            <span class="hljs-keyword">this</span>.emit(<span class="hljs-keyword">this</span>.current)<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">this</span>.showSelector = <span class="hljs-literal">false</span><br>          <span class="hljs-keyword">this</span>.current = <span class="hljs-keyword">this</span>.formatItemName(item)<br>          <span class="hljs-keyword">this</span>.emit(item[<span class="hljs-keyword">this</span>.dataValue])<br>        &#125;<br>      &#125;<br>    &#125;,<br>    delItem(item) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.currentArr.includes(item[<span class="hljs-keyword">this</span>.dataValue])) &#123;<br>        let index = <span class="hljs-keyword">this</span>.current.findIndex(e =&gt; &#123;<br>          <span class="hljs-keyword">return</span> e[<span class="hljs-keyword">this</span>.dataValue] == item[<span class="hljs-keyword">this</span>.dataValue]<br>        &#125;)<br>        <span class="hljs-keyword">this</span>.current.splice(index, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">this</span>.currentArr.splice(index, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">this</span>.emit(<span class="hljs-keyword">this</span>.current)<br>      &#125;<br>    &#125;,<br>    emit(<span class="hljs-keyword">val</span>) &#123;<br>      <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-keyword">val</span>)<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.multiple) &#123;<br>        <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-keyword">this</span>.currentArr)<br>        <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">&#x27;update:modelValue&#x27;</span>, <span class="hljs-keyword">this</span>.currentArr)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-keyword">val</span>)<br>        <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">&#x27;update:modelValue&#x27;</span>, <span class="hljs-keyword">val</span>)<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.collection) &#123;<br>        <span class="hljs-keyword">this</span>.setCache(<span class="hljs-keyword">val</span>);<br>      &#125;<br>    &#125;,<br>    toggleSelector() &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.disabled) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.filterable &amp;&amp; <span class="hljs-keyword">this</span>.current &amp;&amp; <span class="hljs-keyword">this</span>.mixinDatacomResData.findIndex(e =&gt; &#123;<br>        <span class="hljs-keyword">return</span> e[<span class="hljs-keyword">this</span>.dataKey] == <span class="hljs-keyword">this</span><br>            .current<br>      &#125;) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">this</span>.current = <span class="hljs-string">&quot;&quot;</span><br>      &#125;<br>      <span class="hljs-keyword">this</span>.showSelector = !<span class="hljs-keyword">this</span>.showSelector<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.filterable &amp;&amp; <span class="hljs-keyword">this</span>.current &amp;&amp; <span class="hljs-keyword">this</span>.showSelector) &#123;<br>        <span class="hljs-keyword">this</span>.placeholderOld = <span class="hljs-keyword">this</span>.current<br>        <span class="hljs-keyword">this</span>.current = <span class="hljs-string">&quot;&quot;</span><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.filterable &amp;&amp; !<span class="hljs-keyword">this</span>.current &amp;&amp; !<span class="hljs-keyword">this</span>.showSelector) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.placeholderOld != <span class="hljs-keyword">this</span>.placeholder) &#123;<br>          <span class="hljs-keyword">this</span>.current = <span class="hljs-keyword">this</span>.placeholderOld<br>        &#125;<br>      &#125;<br><br>    &#125;,<br>    formatItemName(item) &#123;<br>      <span class="hljs-keyword">if</span> (!item) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>      &#125;<br>      let text = item[<span class="hljs-keyword">this</span>.dataKey]<br>      let value = item[<span class="hljs-keyword">this</span>.dataValue]<br>      let &#123;<br>        channel_code<br>      &#125; = item<br>      channel_code = channel_code ? `($&#123;channel_code&#125;)` : <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.format) &#123;<br>        <span class="hljs-comment">// 格式化输出</span><br>        let str = <span class="hljs-string">&quot;&quot;</span>;<br>        str = <span class="hljs-keyword">this</span>.format;<br>        <span class="hljs-keyword">for</span> (let key <span class="hljs-keyword">in</span> item) &#123;<br>          str = str.replace(new RegExp(`&#123;$&#123;key&#125;&#125;`, <span class="hljs-string">&quot;g&quot;</span>), item[key]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> str;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.collection.indexOf(<span class="hljs-string">&#x27;app-list&#x27;</span>) &gt; <span class="hljs-number">0</span> ?<br>            `$&#123;text&#125;($&#123;value&#125;)` :<br>            (<br>                text ?<br>                    text :<br>                    `未命名$&#123;channel_code&#125;`<br>            )<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 获取当前加载的数据</span><br>    getLoadData() &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.mixinDatacomResData;<br>    &#125;,<br>    <span class="hljs-comment">// 获取当前缓存key</span><br>    getCurrentCacheKey() &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.collection;<br>    &#125;,<br>    <span class="hljs-comment">// 获取缓存</span><br>    getCache(name = <span class="hljs-keyword">this</span>.getCurrentCacheKey()) &#123;<br>      let cacheData = uni.getStorageSync(<span class="hljs-keyword">this</span>.cacheKey) || &#123;&#125;;<br>      <span class="hljs-keyword">return</span> cacheData[name];<br>    &#125;,<br>    <span class="hljs-comment">// 设置缓存</span><br>    setCache(value, name = <span class="hljs-keyword">this</span>.getCurrentCacheKey()) &#123;<br>      let cacheData = uni.getStorageSync(<span class="hljs-keyword">this</span>.cacheKey) || &#123;&#125;;<br>      cacheData[name] = value;<br>      uni.setStorageSync(<span class="hljs-keyword">this</span>.cacheKey, cacheData);<br>    &#125;,<br>    <span class="hljs-comment">// 删除缓存</span><br>    removeCache(name = <span class="hljs-keyword">this</span>.getCurrentCacheKey()) &#123;<br>      let cacheData = uni.getStorageSync(<span class="hljs-keyword">this</span>.cacheKey) || &#123;&#125;;<br>      delete cacheData[name];<br>      uni.setStorageSync(<span class="hljs-keyword">this</span>.cacheKey, cacheData);<br>    &#125;,<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=<span class="hljs-string">&quot;scss&quot;</span>&gt;<br>$uni-base-color: #6a6a6a !default;<br>$uni-main-color: #<span class="hljs-number">333</span> !default;<br>$uni-secondary-color: #<span class="hljs-number">909399</span> !default;<br>$uni-border-<span class="hljs-number">3</span>: #e5e5e5;<br><br><br><span class="hljs-comment">/* #ifndef APP-NVUE */</span><br><span class="hljs-meta">@media</span> screen and (max-width: 500px) &#123;<br>  .hide-on-phone &#123;<br>    display: none;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* #endif */</span><br>.uni-stat__select &#123;<br>  display: flex;<br>  align-items: center;<br>  <span class="hljs-comment">// padding: 15px;</span><br>  cursor: pointer;<br>  width: <span class="hljs-number">100</span>%;<br>  flex: <span class="hljs-number">1</span>;<br>  box-sizing: border-box;<br>&#125;<br><br>.uni-stat-box &#123;<br>  width: <span class="hljs-number">100</span>%;<br>  flex: <span class="hljs-number">1</span>;<br>&#125;<br><br>.uni-stat__actived &#123;<br>  width: <span class="hljs-number">100</span>%;<br>  flex: <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// outline: 1px solid #2979ff;</span><br>&#125;<br><br>.uni-label-text &#123;<br>  font-size: 14px;<br>  font-weight: bold;<br>  color: $uni-base-color;<br>  margin: auto <span class="hljs-number">0</span>;<br>  margin-right: 5px;<br>&#125;<br><br>.uni-select &#123;<br>  font-size: 14px;<br>  border: 1px solid $uni-border-<span class="hljs-number">3</span>;<br>  box-sizing: border-box;<br>  border-radius: 4px;<br>  padding: <span class="hljs-number">0</span> 5px;<br>  padding-left: 10px;<br>  position: relative;<br>  <span class="hljs-comment">/* #ifndef APP-NVUE */</span><br>  display: flex;<br>  user-select: none;<br>  <span class="hljs-comment">/* #endif */</span><br>  flex-direction: row;<br>  align-items: center;<br>  border-bottom: solid 1px $uni-border-<span class="hljs-number">3</span>;<br>  width: <span class="hljs-number">100</span>%;<br>  flex: <span class="hljs-number">1</span>;<br>  height: 35px;<br>  min-height: 35px;<br><br>  &amp;--disabled &#123;<br>    background-color: #f5f7fa;<br>    cursor: not-allowed;<br>  &#125;<br>&#125;<br><br>.uni-select__label &#123;<br>  font-size: 16px;<br>  <span class="hljs-comment">// line-height: 22px;</span><br>  min-height: 35px;<br>  height: 35px;<br>  padding-right: 10px;<br>  color: $uni-secondary-color;<br>&#125;<br><br><br>.uni-select__input-box &#123;<br>  height: 35px;<br>  position: relative;<br>  <span class="hljs-comment">/* #ifndef APP-NVUE */</span><br>  display: flex;<br>  <span class="hljs-comment">/* #endif */</span><br>  flex: <span class="hljs-number">1</span>;<br>  flex-direction: row;<br>  align-items: center;<br><br>  .tag-calss &#123;<br>    font-family: Helvetica Neue, Helvetica, PingFang SC, Hiragino Sans GB, Microsoft YaHei, SimSun, sans-serif;<br>    font-weight: <span class="hljs-number">400</span>;<br>    -webkit-font-smoothing: antialiased;<br>    -webkit-tap-highlight-color: transparent;<br>    font-size: 12px;<br>    border: 1px solid #d9ecff;<br>    border-radius: 4px;<br>    white-space: nowrap;<br>    height: 24px;<br>    padding: <span class="hljs-number">0</span> 4px 0px 8px;<br>    line-height: 22px;<br>    box-sizing: border-box;<br>    margin: 2px <span class="hljs-number">0</span> 2px 6px;<br>    display: flex;<br>    max-width: <span class="hljs-number">100</span>%;<br>    align-items: center;<br>    background-color: #f4f4f5;<br>    border-color: #e9e9eb;<br>    color: #<span class="hljs-number">909399</span>;<br>    .text &#123;<br>      font-family: Helvetica Neue, Helvetica, PingFang SC, Hiragino Sans GB, Microsoft YaHei, SimSun, sans-serif;<br>      font-weight: <span class="hljs-number">400</span>;<br>      -webkit-font-smoothing: antialiased;<br>      -webkit-tap-highlight-color: transparent;<br>      font-size: torpx(<span class="hljs-number">20</span>);<br>      white-space: nowrap;<br>      line-height: 22px;<br>      color: #<span class="hljs-number">909399</span>;<br>      overflow: hidden;<br>      text-overflow: ellipsis;<br>    &#125;<br>  &#125;<br>&#125;<br><br>.uni-select__input &#123;<br>  flex: <span class="hljs-number">1</span>;<br>  font-size: 14px;<br>  height: 22px;<br>  line-height: 22px;<br>&#125;<br><br>.uni-select__input-plac &#123;<br>  font-size: 14px;<br>  color: $uni-secondary-color;<br>&#125;<br><br>.uni-select__selector &#123;<br>  <span class="hljs-comment">/* #ifndef APP-NVUE */</span><br>  box-sizing: border-box;<br>  <span class="hljs-comment">/* #endif */</span><br>  position: absolute;<br>  top: calc(<span class="hljs-number">100</span>% + 12px);<br>  left: <span class="hljs-number">0</span>;<br>  width: <span class="hljs-number">100</span>%;<br>  background-color: #FFFFFF;<br>  border: 1px solid #EBEEF5;<br>  border-radius: 6px;<br>  box-shadow: <span class="hljs-number">0</span> 2px 12px <span class="hljs-number">0</span> rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);<br>  z-index: <span class="hljs-number">3</span>;<br>  padding: 4px <span class="hljs-number">0</span>;<br>&#125;<br><br>.uni-select__selector-scroll &#123;<br>  <span class="hljs-comment">/* #ifndef APP-NVUE */</span><br>  max-height: 200px;<br>  box-sizing: border-box;<br>  <span class="hljs-comment">/* #endif */</span><br>&#125;<br><br>.uni-select__selector-empty,<br>.uni-select__selector-item &#123;<br>  <span class="hljs-comment">/* #ifndef APP-NVUE */</span><br>  display: flex;<br>  cursor: pointer;<br>  <span class="hljs-comment">/* #endif */</span><br>  line-height: 35px;<br>  font-size: 14px;<br>  text-align: center;<br>  <span class="hljs-comment">/* border-bottom: solid 1px $uni-border-3; */</span><br>  padding: 0px 10px;<br>&#125;<br><br>.uni-select__selector-item:hover &#123;<br>  background-color: #f9f9f9;<br>&#125;<br><br>.uni-select__selector-empty:last-child,<br>.uni-select__selector-item:last-child &#123;<br>  <span class="hljs-comment">/* #ifndef APP-NVUE */</span><br>  border-bottom: none;<br>  <span class="hljs-comment">/* #endif */</span><br>&#125;<br><br>.uni-select__selector__disabled &#123;<br>  opacity: <span class="hljs-number">0.4</span>;<br>  cursor: default;<br>&#125;<br><br><span class="hljs-comment">/* picker 弹出层通用的指示小三角 */</span><br>.uni-popper__arrow,<br>.uni-popper__arrow::after &#123;<br>  position: absolute;<br>  display: block;<br>  width: <span class="hljs-number">0</span>;<br>  height: <span class="hljs-number">0</span>;<br>  border-color: transparent;<br>  border-style: solid;<br>  border-width: 6px;<br>&#125;<br><br>.uni-popper__arrow &#123;<br>  filter: drop-shadow(<span class="hljs-number">0</span> 2px 12px rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.03</span>));<br>  top: -6px;<br>  left: <span class="hljs-number">10</span>%;<br>  margin-right: 3px;<br>  border-top-width: <span class="hljs-number">0</span>;<br>  border-bottom-color: #EBEEF5;<br>&#125;<br><br>.uni-popper__arrow::after &#123;<br>  content: <span class="hljs-string">&quot; &quot;</span>;<br>  top: 1px;<br>  margin-left: -6px;<br>  border-top-width: <span class="hljs-number">0</span>;<br>  border-bottom-color: #fff;<br>&#125;<br><br>.uni-select__input-text &#123;<br>  <span class="hljs-comment">// width: 280px;</span><br>  width: <span class="hljs-number">100</span>%;<br>  color: $uni-main-color;<br>  white-space: nowrap;<br>  text-overflow: ellipsis;<br>  -o-text-overflow: ellipsis;<br>  overflow: hidden;<br>&#125;<br><br>.uni-select__input-placeholder &#123;<br>  color: $uni-base-color;<br>  font-size: 12px;<br>&#125;<br><br>.uni-select--mask &#123;<br>  position: fixed;<br>  top: <span class="hljs-number">0</span>;<br>  bottom: <span class="hljs-number">0</span>;<br>  right: <span class="hljs-number">0</span>;<br>  left: <span class="hljs-number">0</span>;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;multipleSelect v-model=<span class="hljs-string">&quot;billTypeId&quot;</span> <br>:collapse-tags-num=<span class="hljs-number">2</span>  <span class="hljs-regexp">//</span>标签数最大显示数量，超出则显示+<span class="hljs-number">1</span>（多余的数）<br>collapse-tags  <span class="hljs-regexp">//</span>显示标签<br>multiple dataKey=<span class="hljs-string">&quot;label&quot;</span>  <span class="hljs-regexp">//</span>数据的标题 <br>dataValue=<span class="hljs-string">&quot;value&quot;</span>  <span class="hljs-regexp">//</span>数据的值<br>:localdata=<span class="hljs-string">&quot;billTypeList&quot;</span>  <span class="hljs-regexp">//</span>绑定列表数据  <br>本地数据格式如下<br>[&#123;  label: <span class="hljs-string">&quot;item.dictLabel&quot;</span>,value: <span class="hljs-string">&quot;item.id&quot;</span>&#125;]<br>@change=<span class="hljs-string">&quot;billTypeIdChange&quot;</span> <span class="hljs-regexp">//</span>change方法<br>&gt;&lt;/multipleSelect&gt;<br>                <br>                <br> 正确引入组件             <br>import multipleSelect from <span class="hljs-string">&quot;@/components/multipleSelect.vue&quot;</span>;<br>注册组件<br>  components: &#123;multipleSelect&#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web开发笔记</title>
    <link href="/2024/01/10/web/"/>
    <url>/2024/01/10/web/</url>
    
    <content type="html"><![CDATA[<p>#一、静态web</p><p>#二、动态web</p><p>#三、css</p><p>#四、JavaScript</p><p>#五、jQuery</p><p>#六、vue</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>什么是Servlet</title>
    <link href="/2024/01/10/%E4%BB%80%E4%B9%88%E6%98%AFServlet/"/>
    <url>/2024/01/10/%E4%BB%80%E4%B9%88%E6%98%AFServlet/</url>
    
    <content type="html"><![CDATA[<h4 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h4><p>1、加载和实例化：默认情况下，Servlet第一次被访问时，容器来创建Servlet对象</p><p>2、初始化：在实例化之后，容器将调用Servlet的init（）方法来初始化这个对象，完成一些如配置文件的加载，创建连接等初始化工作，仅调用一次。</p><p>3、请求处理：每次请求Servlet的时候，Servlet容器都会调用Servlet中的Service（）方法对请求进行处理。</p><p>4、服务终止：当需要释放内存或者关闭容器的时候，容器调用Servlet实例的destroy（）方法完成资源的释放。</p><h5 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h5><p>​Servlet      —-Servlet根接口</p><p>​GenericServlet —-Servlet抽象实现类</p><p>​HttpServlet   –http请求类</p><p>​重写doget（）以及dopost（）方法，实现对不同请求方式，调用不同的方法；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/demo2&quot;</span>)<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo4http</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;this is get&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;this is post&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​</p><h4 id="在Servlet中的Service（）方法判断访问的方式"><a href="#在Servlet中的Service（）方法判断访问的方式" class="headerlink" title="在Servlet中的Service（）方法判断访问的方式"></a>在Servlet中的Service（）方法判断访问的方式</h4><p>可创建一个逻辑类，将来其他类将继承次逻辑类，复用逻辑判断方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">HttpServletRequest</span> request=(<span class="hljs-title class_">HttpServletRequest</span>) servletRequest;<br><span class="hljs-comment">//获取http的request请求，并进行强制类型装换</span><br><span class="hljs-title class_">String</span> coo=request.<span class="hljs-title function_">getMethod</span>();<br><span class="hljs-comment">//使用getMethod（）方法获取请求方式</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;GET&quot;</span>.<span class="hljs-title function_">equals</span>(coo))&#123;<br><br>    <span class="hljs-title function_">doget</span>(servletRequest,servletResponse);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;POST&quot;</span>.<span class="hljs-title function_">equals</span>(coo))&#123;<br><br>    <span class="hljs-title function_">dopost</span>(servletRequest,servletResponse);<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">dopost</span>(<span class="hljs-params">ServletRequest servletRequest, ServletResponse servletResponse</span>) &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">doget</span>(<span class="hljs-params">ServletRequest servletRequest, ServletResponse servletResponse</span>) &#123; <br>    <span class="hljs-comment">//protected  将来方法要被别的类进行复写</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>将来在其他类中直接继承逻辑类，调用doget（），或者dopost（）方法进行逻辑判断。</p>]]></content>
    
    
    <categories>
      
      <category>Servlet</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前端面试秘籍</title>
    <link href="/2024/01/10/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%A7%98%E7%B1%8D/"/>
    <url>/2024/01/10/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%A7%98%E7%B1%8D/</url>
    
    <content type="html"><![CDATA[<p>#一、关于html</p><ol><li>简述一下你对 HTML 语义化的理解？<br>用正确的标签做正确的事情。<br>html 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析；即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的;<br>搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO;<br>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</li><li>标签上 title 与 alt 属性的区别是什么？<br>alt 是给搜索引擎识别，在图像无法显示时的替代文本；<br>title 是关于元素的注释信息，主要是给用户解读。<br>当鼠标放到文字或是图片上时有 title 文字显示。（因为 IE 不标准）在 IE 浏览器中 alt 起到了 title 的作用，变成文字提示。<br>在定义 img 对象时，将 alt 和 title 属性写全，可以保证在各种浏览器中都能正常使用。</li><li>iframe的优缺点？<br>优点：</li></ol><p>解决加载缓慢的第三方内容如图标和广告等的加载问题Security sandbox并行加载脚本</p><p>缺点：</p><p>iframe会阻塞主页面的Onload事件<br>即时内容为空，加载也需要时间<br>没有语意<br>4. href 与 src？</p><p>href (Hypertext Reference)指定网络资源的位置，从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系。（目的不是为了引用资源，而是为了建立联系，让当前标签能够链接到目标地址。）<br>src source（缩写），指向外部资源的位置，指向的内容将会应用到文档中当前标签所在位置。</p><p>href与src的区别</p><p>1、请求资源类型不同：href 指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的联系。在请求 src 资源时会将其指向的资源下载并应用到文档中，比如 JavaScript 脚本，img 图片；<br>2、作用结果不同：href 用于在当前文档和引用资源之间确立联系；src 用于替换当前内容；<br>3、浏览器解析方式不同：当浏览器解析到src ，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等也如此，类似于将所指向资源应用到当前内容。这也是为什么建议把 js 脚本放在底部而不是头部的原因。3</p><p>#二、css</p><ol><li>介绍一下 CSS 的盒子模型？</li></ol><p>有两种， IE 盒子模型、W3C 盒子模型；<br>盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；<br>区 别： IE 的 content 部分把 border 和 padding 计算了进去;</p><ol start="2"><li>css 选择器优先级？</li></ol><p>!important &gt; 行内样式（比重1000）&gt; ID 选择器（比重100） &gt; 类选择器（比重10） &gt; 标签（比重1） &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</p><ol start="3"><li>垂直居中几种方式？</li></ol><p>单行文本: line-height &#x3D; height<br>图片: vertical-align: middle;<br>absolute 定位: top: 50%;left: 50%;transform: translate(-50%, -50%);<br>flex: display:flex;margin:auto</p><ol start="4"><li>简明说一下 CSS link 与 @import 的区别和用法？</li></ol><p>link 是 XHTML 标签，除了加载CSS外，还可以定义 RSS 等其他事务；@import 属于 CSS 范畴，只能加载 CSS。<br>link 引用 CSS 时，在页面载入时同时加载；@import 需要页面网页完全载入以后加载。<br>link 是 XHTML 标签，无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持。<br>link 支持使用 Javascript 控制 DOM 去改变样式；而@import不支持。</p><ol start="5"><li>rgba和opacity的透明效果有什么不同？</li></ol><p>opacity 会继承父元素的 opacity 属性，而 RGBA 设置的元素的后代元素不会继承不透明属性。</p><ol start="6"><li>display:none和visibility:hidden的区别？</li></ol><p>display:none 隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。<br>visibility:hidden 隐藏对应的元素，但是在文档布局中仍保留原来的空间。</p><ol start="7"><li>position的值， relative和absolute分别是相对于谁进行定位的？</li></ol><p>relative:相对定位，相对于自己本身在正常文档流中的位置进行定位。<br>absolute:生成绝对定位，相对于最近一级定位不为static的父元素进行定位。<br>fixed: （老版本IE不支持）生成绝对定位，相对于浏览器窗口或者frame进行定位。<br>static:默认值，没有定位，元素出现在正常的文档流中。<br>sticky:生成粘性定位的元素，容器的位置根据正常文档流计算得出。</p><h2 id="简历问题"><a href="#简历问题" class="headerlink" title="简历问题"></a>简历问题</h2>]]></content>
    
    
    <categories>
      
      <category>前端面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb</title>
    <link href="/2024/01/10/JavaWeb/"/>
    <url>/2024/01/10/JavaWeb/</url>
    
    <content type="html"><![CDATA[<h1 id="使用骨架创建Maven-Web项目"><a href="#使用骨架创建Maven-Web项目" class="headerlink" title="使用骨架创建Maven Web项目"></a>使用骨架创建Maven Web项目</h1><p>1、新建项目–maven–从archetype创建—maven-archetypt-webapp–main目录创建文件夹java–创建文件夹resources。（补齐需要的文件夹）</p><p>在pom.xml中添加Tomcat Maven插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pom.xml">&lt;build&gt;<br>  &lt;plugins&gt;<br>    &lt;plugin&gt;<br>      &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;<br>      &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;<br>      &lt;version&gt;2.2&lt;/version&gt;<br>    &lt;/plugin&gt;<br>  &lt;/plugins&gt;<br>&lt;/build&gt;<br></code></pre></td></tr></table></figure><h2 id="创建一个servlet接口"><a href="#创建一个servlet接口" class="headerlink" title="创建一个servlet接口"></a>创建一个servlet接口</h2><h4 id="1、导入Servlet依赖坐标（pom-xml）"><a href="#1、导入Servlet依赖坐标（pom-xml）" class="headerlink" title="1、导入Servlet依赖坐标（pom.xml）"></a>1、导入Servlet依赖坐标（pom.xml）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Servlet依赖">&lt;dependency&gt;<br>  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br>  &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;<br>  &lt;version&gt;3.1.0&lt;/version&gt;<br>  &lt;scope&gt;provided&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="2、定义一个类，实现Servlet接口，并重写方法"><a href="#2、定义一个类，实现Servlet接口，并重写方法" class="headerlink" title="2、定义一个类，实现Servlet接口，并重写方法"></a>2、定义一个类，实现Servlet接口，并重写方法</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">ServletDemo1</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Servlet</span>&#123;<br><br>​<span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> service（）&#123;&#125;<br>此方法在访问Servlet接口时便执行<br>&#125;<span class="hljs-comment">//重写方法</span><br></code></pre></td></tr></table></figure><h4 id="3、类上使用-Webservlet注解，配置访问路径"><a href="#3、类上使用-Webservlet注解，配置访问路径" class="headerlink" title="3、类上使用@Webservlet注解，配置访问路径"></a>3、类上使用@Webservlet注解，配置访问路径</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">@Wevservlet（“demo”）<span class="hljs-regexp">//</span>配置后访问路径为<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/demo/</span>demo1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SMB服务器配置</title>
    <link href="/2024/01/10/Smb%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/01/10/Smb%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>实例：公司有多个部门，因工作需要，必须分门别类的建立相应部门的目录。要求将销售部的资料存放在samba服务器的&#x2F;companydata&#x2F;sales 目录下集中管理，以便销售人员浏览，并且该目录只允许销售部门员工访问</p><h2 id="1、在服务器上安装samba功能"><a href="#1、在服务器上安装samba功能" class="headerlink" title="1、在服务器上安装samba功能"></a>1、在服务器上安装samba功能</h2><p>rpm -qa |grep samba &#x2F;&#x2F;可以使用此命令检测是否安装此功能</p><p>yum clean all   &#x2F;&#x2F;在安装前清理缓存文件</p><p>yum install samba -y &#x2F;&#x2F;使用yum 方式安装samba功能</p><p>安装完成后，启动服务</p><p>systemctl start smb &#x2F;&#x2F;开启smb服务</p><p>systemctl enable smb &#x2F;&#x2F;设置开启自启</p><h3 id="2、新建共享目录"><a href="#2、新建共享目录" class="headerlink" title="2、新建共享目录"></a>2、新建共享目录</h3><p>mkdir &#x2F;companydata</p><p>midir  &#x2F;companydata&#x2F;sales</p><h3 id="3、创建销售部用户和组并添加相应的samba账号"><a href="#3、创建销售部用户和组并添加相应的samba账号" class="headerlink" title="3、创建销售部用户和组并添加相应的samba账号"></a>3、创建销售部用户和组并添加相应的samba账号</h3><p>groupadd sales</p><p>useradd -g sales sale1</p><p>useradd -g sales sale2</p><p>passwd sale1</p><p>psswd sale2</p><p>为销售部成员添加samba 账号</p><p>smbpasswd - a sale1</p><p>smbpasswd - a sale2</p><h2 id="4、修改samba配置文件"><a href="#4、修改samba配置文件" class="headerlink" title="4、修改samba配置文件"></a>4、修改samba配置文件</h2><p>[sales]&#x2F;&#x2F;共享名</p><p>​comment&#x3D;sales </p><p>​path&#x3D; &#x2F;companydata&#x2F;sales</p><p>​writable&#x3D;yes     &#x2F;&#x2F;目录可读写</p><p>​browseable&#x3D;yes &#x2F;&#x2F;目录可浏览</p><p>​valid users&#x3D;@sales     &#x2F;&#x2F;设置可访问的用户组</p><h2 id="5、设置共享目录的本地权限"><a href="#5、设置共享目录的本地权限" class="headerlink" title="5、设置共享目录的本地权限"></a>5、设置共享目录的本地权限</h2><p>chmod 777 &#x2F;companydata&#x2F;sales -R</p><p>chown sale1：sales &#x2F;conpanydata&#x2F;sales -R</p><p>chown sale2：sales &#x2F;conpanydata&#x2F;sales -R</p><p>6、更改共享目录的context值或者禁用SELinux</p><p>chcon -t samba_share_t &#x2F;companydata&#x2F;sales -R</p><p>或者</p><p>geteforce</p><p>setenforce Permissive</p><h2 id="6、放行防火墙服务"><a href="#6、放行防火墙服务" class="headerlink" title="6、放行防火墙服务"></a>6、放行防火墙服务</h2><p>systemctl start firewalld</p><p>firewall-cmd –permanent –add-service&#x3D;samba</p><p>firewall-cmd –reload   &#x2F;&#x2F;重新加载防火墙</p><p>firewall-cmd –list-all   &#x2F;&#x2F;查看已经加入防火墙的服务</p><h2 id="7、重新加载Samba服务"><a href="#7、重新加载Samba服务" class="headerlink" title="7、重新加载Samba服务"></a>7、重新加载Samba服务</h2><p>systemctl restart smb  重新启动Samba服务</p><p>即可在Windows访问</p><p>开始–运行–\IP地址+sales</p><p>输入刚才所创建的用户名即密码登录访问。</p>]]></content>
    
    
    <categories>
      
      <category>centos 7</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ajax</title>
    <link href="/2023/09/11/Ajax/"/>
    <url>/2023/09/11/Ajax/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Ajax"><a href="#1、Ajax" class="headerlink" title="1、Ajax"></a>1、Ajax</h1><p>异步请求，不刷新页面的情况下进行数据通讯。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade">axios（&#123;<br><span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;&#x27;</span><br>&#125;）.then(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>回调函数<br>&#125;)<br><br>axios(&#123;<br><span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment">//参数列表（传递给服务器的参数列表）</span><br>params:&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br><br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="2、token"><a href="#2、token" class="headerlink" title="2、token"></a>2、token</h1><p>令牌验证</p><p>在执行账户登录后将获取到的token保存至浏览器本地。</p><p>localStorage。setItem（‘token，res&#x2F;token’）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SVN</title>
    <link href="/2023/09/11/SVN%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/11/SVN%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1、SVN的三大指令"><a href="#1、SVN的三大指令" class="headerlink" title="1、SVN的三大指令"></a>1、SVN的三大指令</h1><h2 id="1、Checkout代码检出（将项目代码同步至本地）"><a href="#1、Checkout代码检出（将项目代码同步至本地）" class="headerlink" title="1、Checkout代码检出（将项目代码同步至本地）"></a>1、Checkout代码检出（将项目代码同步至本地）</h2><p>1.在项目详情中复制SVN地址</p><p>2.在文件夹右键单击选择SVN Chekout..</p><p>3.在弹出窗口中填写SVN地址，填写保存目录，首次需要填写SVN用户名和密码</p><p>4.点击确定即可同步代码到本地</p><h2 id="2、Upadte代码更新"><a href="#2、Upadte代码更新" class="headerlink" title="2、Upadte代码更新"></a>2、Upadte代码更新</h2><p>右键选择SVN Update进行代码的更新，可以将其他人提交的代码同步更新到自己的电脑上。</p><h2 id="3、Commit提交代码"><a href="#3、Commit提交代码" class="headerlink" title="3、Commit提交代码"></a>3、Commit提交代码</h2><p>使用SVN Commit 进行代码的提交，在提交之前我们应该先进行代码的更新，避免覆盖别人的代码，和代码冲突的出现。</p><p>在选择之后，填入提交的描述，就可以将本地的代码提交到服务器中。</p><h2 id="4、撤销已经提交的代码"><a href="#4、撤销已经提交的代码" class="headerlink" title="4、撤销已经提交的代码"></a>4、撤销已经提交的代码</h2><p>已经提交的代码，发现错了，还能够进行撤回</p><p>1.右键选择SVN&#x3D;&#x3D;&gt;showlog查看提交记录</p><p>2.选择我们需要回去的版本，右键选择Revert to this version 这样就能回去到指定的版本</p><p>3.最后还需要提交（Commit）一下撤销后的代码到仓库</p>]]></content>
    
    
    
    <tags>
      
      <tag>SVN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS布局</title>
    <link href="/2023/09/11/CSS%E5%B8%83%E5%B1%80/"/>
    <url>/2023/09/11/CSS%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1、CSS布局"><a href="#1、CSS布局" class="headerlink" title="1、CSS布局"></a>1、CSS布局</h1><h2 id="1-1针对于导航栏"><a href="#1-1针对于导航栏" class="headerlink" title="1.1针对于导航栏"></a>1.1针对于导航栏</h2><p>针对导航栏我们可以利用position: sticky; 粘性定位进行实现。使页面下滑时候导航栏依旧存在于页面顶部。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs axapta">&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;cebian&quot;</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;cebianButton&quot;</span>&gt;<br>这里编写导航栏的相关代码<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><span class="hljs-comment">//此处必须针对外框定义高度宽度值。</span><br>.cebian&#123;<br>height: <span class="hljs-number">7000</span>px;<br>width: <span class="hljs-number">100</span>%;<br>&#125;<br>.cebianButton&#123;<br>position: sticky;<br>top: <span class="hljs-number">0</span>px;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2针对于页面侧边的联系客服栏"><a href="#1-2针对于页面侧边的联系客服栏" class="headerlink" title="1.2针对于页面侧边的联系客服栏"></a>1.2针对于页面侧边的联系客服栏</h2><p>此时我们可以利用position: fixed 此定位方式相对于浏览器窗口，脱离文档流，在页面中不占据位置。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs axapta">&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;cebianButton&quot;</span>&gt;<br>这里编写导航栏的相关代码<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><br>.cebianButton&#123;<br>top:<span class="hljs-number">50</span>%<br>ponsition:fixed;<br>&#125;<br><span class="hljs-comment">//此时定位相对于浏览器窗口。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CSS布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2023/09/11/JavaScript/"/>
    <url>/2023/09/11/JavaScript/</url>
    
    <content type="html"><![CDATA[<h1 id="1、JavaScript输入输出语法"><a href="#1、JavaScript输入输出语法" class="headerlink" title="1、JavaScript输入输出语法"></a>1、JavaScript输入输出语法</h1><h2 id="1-1输出语法"><a href="#1-1输出语法" class="headerlink" title="1.1输出语法"></a>1.1输出语法</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">文档输出内容<br>docunment.write(<span class="hljs-string">&#x27;输出的内容&#x27;</span>)  <span class="hljs-comment">//用于向body内输出内容</span><br><br>alert（<span class="hljs-string">&#x27;输出内容&#x27;</span>） <span class="hljs-comment">//页面弹出警告对话框</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;控制台打印输出&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>1.2输入语句</p><p>页面弹出，输入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">prompt</span><span class="hljs-params">(<span class="hljs-string">&quot;请输入您的姓名：&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><h1 id="2、函数"><a href="#2、函数" class="headerlink" title="2、函数"></a>2、函数</h1><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi">函数声明<span class="hljs-keyword">name</span> 为函数名<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span> <span class="hljs-params">()</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">其中为函数操作。</span></span><br><span class="hljs-comment"><span class="hljs-function">&#125;</span></span><br><span class="hljs-function">函数调用</span><br><span class="hljs-function"><span class="hljs-title">name</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>1、具名函数（可以在任意位置进行调用）</p><p>function name (){</p><p>}</p><p>2、函数表达式（先写表达式，后面才能调用。）</p><p>匿名函数</p><p>let fn&#x3D;function(){</p><p>}</p><p>3、立即执行函数</p><p>​避免变量污染</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">11</span>)<br>&#125;)()；<br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">x,y</span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">11</span>)<br>x=<span class="hljs-number">1</span>,y=<span class="hljs-number">2</span><br>&#125;)(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)；<br></code></pre></td></tr></table></figure><h1 id="3、对象"><a href="#3、对象" class="headerlink" title="3、对象"></a>3、对象</h1><h1 id="4、数值"><a href="#4、数值" class="headerlink" title="4、数值"></a>4、数值</h1><p>1、Number构造函数</p><p>将字符串转换为int</p><p><code>number.parsenInt（string，radix）</code></p><p>string：转化的字符串值</p><p>radix：基数（进制数）</p><p>将字符串转换为浮点型</p><p><code>number.parsefloat（string）</code></p><p>2、字符串</p><p>String类型</p><p><code>var str=new String(&quot;hello&quot;)   //为object类型</code></p><p><code>var str1=&quot;hello&quot;   //为String类型</code></p><p>二者类型不一样</p><p>从字符串中返回指定位置的字符</p><p><code>string.charAt(index)</code>     index 位置索引值（0开始）</p><p><code>String.startsWith</code>（search String,[position]）</p><p>判断字符串是否以给定的子串为开头</p><p>参数：<br>    searchString：搜索的子字符串</p><p>​position：搜索子字符串的开始位置，默认值为0</p><p>返回值</p><p>​Boolean值，true或者false</p><p><code>String.endsWith（search String,[position]）</code></p><p>判断字符串是否以给定的子串为结尾</p><p>参数：<br>    searchString：搜索的子字符串</p><p>​position：搜索子字符串的位置，默认值为字符串的长度。</p><p>返回值</p><p>​Boolean值，true或者false</p><p><code>String.indexOf(searchValue,[fromIndex])</code></p><p>获取指定值在字符串中第一次出现的索引</p><p>参数</p><p>​searchValue:需要寻找的字符串</p><p><code>String.lastIndexOf(searchValue,[fromIndex])</code></p><p>指定值在字符串中最后一次出现的索引</p><p>参数</p><p>searchValue:字符串</p><p>fromIndex:初始索引</p><h1 id="5、数组"><a href="#5、数组" class="headerlink" title="5、数组"></a>5、数组</h1><p>创建数组Array 构造函数</p><p><code>var array= new Array()</code></p><p>创建一个空的数组</p><p><code>var array= new Array(2)</code></p><p>创建一个[ , ]数组，为空未定义</p><p><code>var array= new Array(1,6,8)</code></p><p>创建一个数组[1,6,8]</p><p>使用字面量方式创建数组</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">var<span class="hljs-built_in"> array </span>=[]；  //创建空的数组<br><br>var array=[1,6,3] //创建一个[1,6,3]数组<br><br><br></code></pre></td></tr></table></figure><p>创建一个数组</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> song=[<br>&#123;<br><span class="hljs-attribute">id:</span><span class="hljs-string">1,name</span>=<span class="hljs-string">&quot;name&quot;</span><br>&#125;,<br>&#123;<br><span class="hljs-attribute">id:</span><span class="hljs-string">2,name</span>=<span class="hljs-string">&quot;name&quot;</span><br>&#125;<br>]<br>数组中包含一个对象<br></code></pre></td></tr></table></figure><p>获取数组的元素</p><p>songs[0]</p><p>修改数组</p><p>songs[0]&#x3D;{id:3,name:”name”}</p><p>检测值是否为数组</p><p><code>Array.isArray(arg)</code></p><p>arg ：需要进行检测的值</p><p><code>Array.sort(comparefn)</code></p><p>对数组进行排序</p><p>comparefn:为指定某种顺序进行排序的函数</p><p><code>Array.push(...items)</code></p><p>将元素添加至数组的末尾。</p><p>返回更改过后的长度值length</p><p><code>Array.unshift(...items)</code></p><p>将元素添加至数组的开头位置</p><p>返回更改过后的长度值length</p><p><code>Array.pop()</code></p><p>删除数组中的最后一个元素</p><p>返回从数组中删除的元素，或者为未定义undefined</p><p><code>Array.shift()</code></p><p>删除数组中的第一个元素</p><p>返回从数组中删除的元素，或者为未定义undefined</p><h1 id="利用ES6语法进行数组去重操作"><a href="#利用ES6语法进行数组去重操作" class="headerlink" title="利用ES6语法进行数组去重操作"></a>利用ES6语法进行数组去重操作</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">let</span> nums =<span class="hljs-meta"> [0,0,1,1,1,2,2,3,3,4]</span><br><br><span class="hljs-attribute">let</span> d=[...new Set(nums)]<br><span class="hljs-attribute">console</span>.log(d)  //[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/2023/09/11/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <url>/2023/09/11/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="1、webpack"><a href="#1、webpack" class="headerlink" title="1、webpack"></a>1、webpack</h1><p>在项目中安装webpack</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install webpack@<span class="hljs-number">5</span>.<span class="hljs-number">42</span>.<span class="hljs-number">1</span> webpack-cli@<span class="hljs-number">4</span>.<span class="hljs-number">7</span>.<span class="hljs-number">2</span> -D<br></code></pre></td></tr></table></figure><p>可在项目中packge.json中查看到安装的webpack版本包</p><p>版本信息被详细纪录到了devDependencies中</p><p>在项目中配置webpack</p><p>1.在项目根目录下创建名为<code>webpack.config.js</code>的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span>=&#123;<br><br>mode:<span class="hljs-string">&#x27;development&#x27;</span>          <span class="hljs-comment">//production  两种模式，一个为开发模式一个为发布模式</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.在package。json scripts 节点下，新增dev脚本。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><br><span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;webpack&quot;</span> <br><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uni-app</title>
    <link href="/2023/09/11/uni-app%E5%AE%9E%E4%BE%8B/"/>
    <url>/2023/09/11/uni-app%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Uni-app全局配置"><a href="#1、Uni-app全局配置" class="headerlink" title="1、Uni-app全局配置"></a>1、Uni-app全局配置</h1><p>page.json文件中进行配置。</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>Hexcolor</td><td>#F7F7F7</td><td>导航栏背景颜色（同状态栏颜色）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色以及状态栏的前景颜色仅支持white&#x2F;black</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏的文字</td></tr><tr><td>backgroundColor</td><td>Hexcolor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉loading样式，仅支持dark&#x2F;light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>开启下拉刷新</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件出发时距离页面底部的距离，单位为px</td></tr></tbody></table><h1 id="2、组件"><a href="#2、组件" class="headerlink" title="2、组件"></a>2、组件</h1><h2 id="2-1-scroll-view"><a href="#2-1-scroll-view" class="headerlink" title="2.1 scroll-view"></a>2.1 scroll-view</h2><p>可滚动视图区域。用于区域滚动。</p><p>在进行竖向滚动，也就是<code>scroll-y:true</code> 时候必须设置组件容器的高度。防止内容撑开，无法形成滚动</p><p>需注意在webview渲染的页面中，区域滚动的性能不及页面滚动。</p><p><strong>属性说明</strong></p><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th><th align="left">平台差异说明</th></tr></thead><tbody><tr><td align="left">scroll-x</td><td align="left">Boolean</td><td align="left">false</td><td align="left">允许横向滚动</td><td align="left"></td></tr><tr><td align="left">scroll-y</td><td align="left">Boolean</td><td align="left">false</td><td align="left">允许纵向滚动</td><td align="left"></td></tr><tr><td align="left">upper-threshold</td><td align="left">Number&#x2F;String</td><td align="left">50</td><td align="left">距顶部&#x2F;左边多远时（单位px），触发 scrolltoupper 事件</td><td align="left"></td></tr><tr><td align="left">lower-threshold</td><td align="left">Number&#x2F;String</td><td align="left">50</td><td align="left">距底部&#x2F;右边多远时（单位px），触发 scrolltolower 事件</td><td align="left"></td></tr><tr><td align="left">scroll-top</td><td align="left">Number&#x2F;String</td><td align="left"></td><td align="left">设置竖向滚动条位置</td><td align="left"></td></tr><tr><td align="left">scroll-left</td><td align="left">Number&#x2F;String</td><td align="left"></td><td align="left">设置横向滚动条位置</td><td align="left"></td></tr><tr><td align="left">scroll-into-view</td><td align="left">String</td><td align="left"></td><td align="left">值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素</td><td align="left"></td></tr><tr><td align="left">scroll-with-animation</td><td align="left">Boolean</td><td align="left">false</td><td align="left">在设置滚动条位置时使用动画过渡</td><td align="left"></td></tr><tr><td align="left">enable-back-to-top</td><td align="left">Boolean</td><td align="left">false</td><td align="left">iOS点击顶部状态栏、安卓双击标题栏时，滚动条返回顶部，只支持竖向</td><td align="left">app-nvue，微信小程序</td></tr><tr><td align="left">show-scrollbar</td><td align="left">Boolean</td><td align="left">false</td><td align="left">控制是否出现滚动条</td><td align="left">App-nvue 2.1.5+</td></tr><tr><td align="left">refresher-enabled</td><td align="left">Boolean</td><td align="left">false</td><td align="left">开启自定义下拉刷新</td><td align="left">H5、app-vue 2.5.12+,微信小程序基础库2.10.1+</td></tr><tr><td align="left">refresher-threshold</td><td align="left">Number</td><td align="left">45</td><td align="left">设置自定义下拉刷新阈值</td><td align="left">H5、app-vue 2.5.12+,微信小程序基础库2.10.1+</td></tr><tr><td align="left">refresher-default-style</td><td align="left">String</td><td align="left">“black”</td><td align="left">设置自定义下拉刷新默认样式，支持设置 black，white，none，none 表示不使用默认样式</td><td align="left">H5、app-vue 2.5.12+,微信小程序基础库2.10.1+</td></tr><tr><td align="left">refresher-background</td><td align="left">String</td><td align="left">“#FFF”</td><td align="left">设置自定义下拉刷新区域背景颜色</td><td align="left">H5、app-vue 2.5.12+,微信小程序基础库2.10.1+</td></tr><tr><td align="left">refresher-triggered</td><td align="left">Boolean</td><td align="left">false</td><td align="left">设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发</td><td align="left">H5、app-vue 2.5.12+,微信小程序基础库2.10.1+</td></tr><tr><td align="left">enable-flex</td><td align="left">Boolean</td><td align="left">false</td><td align="left">启用 flexbox 布局。开启后，当前节点声明了 display: flex 就会成为 flex container，并作用于其孩子节点。</td><td align="left">微信小程序 2.7.3</td></tr><tr><td align="left">scroll-anchoring</td><td align="left">Boolean</td><td align="left">false</td><td align="left">开启 scroll anchoring 特性，即控制滚动位置不随内容变化而抖动，仅在 iOS 下生效，安卓下可参考 CSS overflow-anchor 属性。</td><td align="left">微信小程序 2.8.2</td></tr><tr><td align="left">@scrolltoupper</td><td align="left">EventHandle</td><td align="left"></td><td align="left">滚动到顶部&#x2F;左边，会触发 scrolltoupper 事件</td><td align="left"></td></tr><tr><td align="left">@scrolltolower</td><td align="left">EventHandle</td><td align="left"></td><td align="left">滚动到底部&#x2F;右边，会触发 scrolltolower 事件</td><td align="left"></td></tr><tr><td align="left">@scroll</td><td align="left">EventHandle</td><td align="left"></td><td align="left">滚动时触发，event.detail &#x3D; {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY}</td><td align="left"></td></tr><tr><td align="left">@refresherpulling</td><td align="left">EventHandle</td><td align="left"></td><td align="left">自定义下拉刷新控件被下拉</td><td align="left">H5、app-vue 2.5.12+,微信小程序基础库2.10.1+</td></tr><tr><td align="left">@refresherrefresh</td><td align="left">EventHandle</td><td align="left"></td><td align="left">自定义下拉刷新被触发</td><td align="left">H5、app-vue 2.5.12+,微信小程序基础库2.10.1+</td></tr><tr><td align="left">@refresherrestore</td><td align="left">EventHandle</td><td align="left"></td><td align="left">自定义下拉刷新被复位</td><td align="left">H5、app-vue 2.5.12+,微信小程序基础库2.10.1+</td></tr><tr><td align="left">@refresherabort</td><td align="left">EventHandle</td><td align="left"></td><td align="left">自定义下拉刷新被中止</td><td align="left">H5、app-vue 2.5.12+,微信小程序基础库2.10.1+</td></tr></tbody></table><p>使用竖向滚动时，需要给 <code>&lt;scroll-view&gt;</code> 一个固定高度，通过 css 设置 height；使用横向滚动时，需要给<code>&lt;scroll-view&gt;</code>添加<code>white-space: nowrap;</code>样式。</p><p>利用scrool-view 实现双列滚动联动效果，（点击分类后，自动滑动到指定的分类锚点处）</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xquery">数据格式<br>navlist<span class="hljs-built_in">[id</span>:<span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-built_in">,name</span>:<span class="hljs-string">&quot;类别1&quot;</span>,list:[<span class="hljs-built_in">&#123;id</span>:<span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-built_in">,name</span>:<span class="hljs-string">&#x27;类别1商品1&#x27;</span>&#125;],<br><span class="hljs-built_in">id</span>:<span class="hljs-string">&#x27;2&#x27;</span><span class="hljs-built_in">,name</span>:<span class="hljs-string">&quot;类别2&quot;</span>,list[<span class="hljs-built_in">&#123;id</span>:<span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-built_in">,name</span>:<span class="hljs-string">&#x27;类别2商品1&#x27;</span>&#125;，<span class="hljs-built_in">&#123;id</span>:<span class="hljs-string">&#x27;2&#x27;</span><span class="hljs-built_in">,name</span>:<span class="hljs-string">&#x27;类别2商品2&#x27;</span>&#125;]<br>]<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">scroll-view</span> <span class="hljs-attr">scroll-y</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot; border: 1px yellow solid; width: 100px;&quot;</span> <span class="hljs-attr">scroll</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in navList&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;index==currindex?&#x27;active&#x27;:&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;click(index)&quot;</span>&gt;</span></span><span class="language-xquery">&#123;&#123;<span class="hljs-type">item</span>.c_name&#125;</span><span class="language-xml">&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">scroll-view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">scroll-view</span> <span class="hljs-attr">scroll-y</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot; border: 1px red solid; &quot;</span> <span class="hljs-attr">:scroll-into-view</span>=<span class="hljs-string">&quot;scrollId&quot;</span> @<span class="hljs-attr">scroll</span>=<span class="hljs-string">&quot;scroll&quot;</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in navList&quot;</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;&#x27;id&#x27;+index&quot;</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-xquery">&#123;&#123;<span class="hljs-type">item</span>.c_name&#125;</span><span class="language-xml">&#125;</span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item2 in item.list&quot;</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-xquery">&#123;&#123;item2.goodsName&#125;</span><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">scroll-view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>定义好数据列展示，此时点击分类，以及滚动都是没有任何效果的</p><p>首先获取每个分类模块的高度。并将其存放数组，便于后期对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">anchorArray</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">let</span> query = uni.<span class="hljs-title function_">createSelectorQuery</span>().<span class="hljs-title function_">in</span>(<span class="hljs-variable language_">this</span>);  <span class="hljs-comment">//返回对象实例</span><br><span class="hljs-keyword">let</span> heightArr = [];<br><span class="hljs-keyword">let</span> h = <span class="hljs-number">0</span>;<br>query.<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&#x27;.right&#x27;</span>).<span class="hljs-title function_">boundingClientRect</span>(<span class="hljs-function"><span class="hljs-params">react</span> =&gt;</span> &#123; <br><span class="hljs-comment">//选择器选择对应节点返回NodesRef 对象实例通过foreach循环将所得到信息点的距离顶部高度值存放数组中。</span><br>react.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>h += res.<span class="hljs-property">height</span>;<br>heightArr.<span class="hljs-title function_">push</span>(h);<br>&#125;);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollheightArr</span>=heightArr<br>&#125;).<span class="hljs-title function_">exec</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(heightArr)<br>&#125;,<br></code></pre></td></tr></table></figure><p>随后监听页面的滚动，获取滚动值，与分类模块高度值比较，判断滑动范围，变更左侧分类选择。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">scroll(e)&#123;<br><span class="hljs-comment">//判断滚动距离小于高度数组中的第一个值时说明还没有滚动出范围，则此时currindex=0，第一个分类为选中状态</span><br><span class="hljs-keyword">if</span>(e.detail.scrollTop&lt;=<span class="hljs-keyword">this</span>.scrollheightArr[<span class="hljs-number">0</span>])&#123;<br><span class="hljs-keyword">this</span>.currindex=<span class="hljs-number">0</span><br>&#125;<br>利用<span class="hljs-keyword">for</span>循环循环每一个值，对比高度值大于前一个和小于后一个时候则说明在此分类模块范围内，则将索引值修改为当前循环下标<br><span class="hljs-keyword">for</span>(let i = <span class="hljs-number">0</span> ,length = <span class="hljs-keyword">this</span>.scrollheightArr.length ; i &lt; length ; i++)&#123;<br><span class="hljs-comment">// 大于前一个，小于后一个时候变化索引ID值</span><br><span class="hljs-keyword">if</span>(e.detail.scrollTop &gt;= <span class="hljs-keyword">this</span>.scrollheightArr[i-<span class="hljs-number">1</span>] &amp;&amp; e.detail.scrollTop &lt; <span class="hljs-keyword">this</span>.scrollheightArr[i] )&#123;<br><span class="hljs-keyword">this</span>.currindex=i<br><span class="hljs-comment">// _this.setData(&#123;</span><br><span class="hljs-comment">// selectIndex: i</span><br><span class="hljs-comment">// &#125;);</span><br>&#125;<br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>滚动变化的同时我们也要能够点击选择</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta">click(<span class="hljs-keyword">index</span>) &#123;<br><span class="hljs-keyword">this</span>.scrollId = <span class="hljs-string">&quot;id&quot;</span> + <span class="hljs-keyword">index</span><br><span class="hljs-keyword">this</span>.currindex=<span class="hljs-keyword">index</span><br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="2-2-swiper"><a href="#2-2-swiper" class="headerlink" title="2.2 swiper"></a>2.2 swiper</h2><p>滑块容器视图：每一个swiper-item是一个滑动区域，无法再两个滑动区域中间进行停留。</p><p>一般用于左右滑动或上下滑动，比如banner轮播图。</p><p><strong>属性说明</strong></p><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th><th align="left">平台差异说明</th></tr></thead><tbody><tr><td align="left">indicator-dots</td><td align="left">Boolean</td><td align="left">false</td><td align="left">是否显示面板指示点</td><td align="left"></td></tr><tr><td align="left">indicator-color</td><td align="left">Color</td><td align="left">rgba(0, 0, 0, .3)</td><td align="left">指示点颜色</td><td align="left"></td></tr><tr><td align="left">indicator-active-color</td><td align="left">Color</td><td align="left">#000000</td><td align="left">当前选中的指示点颜色</td><td align="left"></td></tr><tr><td align="left">active-class</td><td align="left">String</td><td align="left"></td><td align="left">swiper-item 可见时的 class</td><td align="left">支付宝小程序</td></tr><tr><td align="left">changing-class</td><td align="left">String</td><td align="left"></td><td align="left">acceleration 设置为 true 时且处于滑动过程中，中间若干屏处于可见时的class</td><td align="left">支付宝小程序</td></tr><tr><td align="left">autoplay</td><td align="left">Boolean</td><td align="left">false</td><td align="left">是否自动切换</td><td align="left"></td></tr><tr><td align="left">current</td><td align="left">Number</td><td align="left">0</td><td align="left">当前所在滑块的 index</td><td align="left"></td></tr><tr><td align="left">current-item-id</td><td align="left">String</td><td align="left"></td><td align="left">当前所在滑块的 item-id ，不能与 current 被同时指定</td><td align="left">支付宝小程序不支持</td></tr><tr><td align="left">interval</td><td align="left">Number</td><td align="left">5000</td><td align="left">自动切换时间间隔</td><td align="left"></td></tr><tr><td align="left">duration</td><td align="left">Number</td><td align="left">500</td><td align="left">滑动动画时长</td><td align="left">app-nvue不支持</td></tr><tr><td align="left">circular</td><td align="left">Boolean</td><td align="left">false</td><td align="left">是否采用衔接滑动，即播放到末尾后重新回到开头</td><td align="left"></td></tr><tr><td align="left">vertical</td><td align="left">Boolean</td><td align="left">false</td><td align="left">滑动方向是否为纵向</td><td align="left"></td></tr><tr><td align="left">previous-margin</td><td align="left">String</td><td align="left">0px</td><td align="left">前边距，可用于露出前一项的一小部分，接受 px 和 rpx 值</td><td align="left">app-nvue、字节跳动小程序、飞书小程序不支持</td></tr><tr><td align="left">next-margin</td><td align="left">String</td><td align="left">0px</td><td align="left">后边距，可用于露出后一项的一小部分，接受 px 和 rpx 值</td><td align="left">app-nvue、字节跳动小程序、飞书小程序不支持</td></tr><tr><td align="left">acceleration</td><td align="left">Boolean</td><td align="left">false</td><td align="left">当开启时，会根据滑动速度，连续滑动多屏</td><td align="left">支付宝小程序</td></tr><tr><td align="left">disable-programmatic-animation</td><td align="left">Boolean</td><td align="left">false</td><td align="left">是否禁用代码变动触发 swiper 切换时使用动画。</td><td align="left">支付宝小程序</td></tr><tr><td align="left">display-multiple-items</td><td align="left">Number</td><td align="left">1</td><td align="left">同时显示的滑块数量</td><td align="left">app-nvue、支付宝小程序不支持</td></tr><tr><td align="left">skip-hidden-item-layout</td><td align="left">Boolean</td><td align="left">false</td><td align="left">是否跳过未显示的滑块布局，设为 true 可优化复杂情况下的滑动性能，但会丢失隐藏状态滑块的布局信息</td><td align="left">App、微信小程序、京东小程序</td></tr><tr><td align="left">disable-touch</td><td align="left">Boolean</td><td align="left">false</td><td align="left">是否禁止用户 touch 操作</td><td align="left">App 2.5.5+、H5 2.5.5+、支付宝小程序、字节跳动小程序与飞书小程序（只在初始化时有效，不能动态变更）</td></tr><tr><td align="left">touchable</td><td align="left">Boolean</td><td align="left">true</td><td align="left">是否监听用户的触摸事件，只在初始化时有效，不能动态变更</td><td align="left">字节跳动小程序与飞书小程序（uni-app 2.5.5+ 推荐统一使用 disable-touch）</td></tr><tr><td align="left">easing-function</td><td align="left">String</td><td align="left">default</td><td align="left">指定 swiper 切换缓动动画类型，有效值：default、linear、easeInCubic、easeOutCubic、easeInOutCubic</td><td align="left">微信小程序、快手小程序、京东小程序</td></tr><tr><td align="left">@change</td><td align="left">EventHandle</td><td align="left"></td><td align="left">current 改变时会触发 change 事件，event.detail &#x3D; {current: current, source: source}</td><td align="left"></td></tr><tr><td align="left">@transition</td><td align="left">EventHandle</td><td align="left"></td><td align="left">swiper-item 的位置发生改变时会触发 transition 事件，event.detail &#x3D; {dx: dx, dy: dy}，支付宝小程序暂不支持dx, dy</td><td align="left">App、H5、微信小程序、支付宝小程序、字节跳动小程序、飞书小程序、QQ小程序、快手小程序</td></tr><tr><td align="left">@animationfinish</td><td align="left">EventHandle</td><td align="left"></td><td align="left">动画结束时会触发 animationfinish 事件，event.detail &#x3D; {current: current, source: source}</td><td align="left">字节跳动小程序与飞书小程序不支持</td></tr></tbody></table><p>change 事件返回 detail 中包含一个 source 字段，表示导致变更的原因，可能值如下：</p><ul><li>autoplay 自动播放导致swiper变化。</li><li>touch 用户划动引起swiper变化。</li><li>其他原因将用空字符串表示。</li></ul><h1 id="3、内容居中显示方法"><a href="#3、内容居中显示方法" class="headerlink" title="3、内容居中显示方法"></a>3、内容居中显示方法</h1><h3 id="行内元素水平居中"><a href="#行内元素水平居中" class="headerlink" title="行内元素水平居中"></a>行内元素水平居中</h3><p>利用text-align:center可以实现行内元素水平居中<br>对行内元素(inline)，行内块(inline-block)，行内表(inline-table)，inline-flex也有效果。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;center-text&quot;</span>&gt;<br>    简单是稳定的前提。<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><span class="hljs-keyword">div</span> &#123;<br>    height:<span class="hljs-number">60</span>px;<br>    border: <span class="hljs-number">2</span>px dashed <span class="hljs-comment">#f69c55;</span><br>&#125;<br>.center-<span class="hljs-built_in">text</span> &#123;<br>    <span class="hljs-built_in">text</span>-align: center;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="块级元素水平居中"><a href="#块级元素水平居中" class="headerlink" title="块级元素水平居中"></a>块级元素水平居中</h3><p>通过把固定宽度的块级元素的margin-left和margin-right设成auto,就可以使块级元素水平居中</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;div&gt;<br>    &lt;<span class="hljs-selector-tag">p</span> class=<span class="hljs-string">&quot;center-block&quot;</span>&gt;<br>    &lt;/p&gt;<br>&lt;/div&gt;<br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> dashed <span class="hljs-number">#f69c55</span>;<br>&#125;<br><span class="hljs-selector-class">.center-block</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">8rem</span>;<br>    <span class="hljs-attribute">padding</span>:<span class="hljs-number">1rem</span>;<br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-number">#000</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="4、调用其他页面方法"><a href="#4、调用其他页面方法" class="headerlink" title="4、调用其他页面方法"></a>4、调用其他页面方法</h1><h3 id="调用上一页中的方法"><a href="#调用上一页中的方法" class="headerlink" title="调用上一页中的方法"></a>调用上一页中的方法</h3><p>a.vue</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> pages = get<span class="hljs-constructor">CurrentPages()</span>;<span class="hljs-comment">//当前页面</span><br><span class="hljs-keyword">let</span> beforePage = pages<span class="hljs-literal">[<span class="hljs-identifier">pages</span>.<span class="hljs-identifier">length</span> - <span class="hljs-number">2</span>]</span>;  获取上一页实例<br>在方法中直接调用<br>beforePage.$vm.<span class="hljs-constructor">ToRefresh()</span> <span class="hljs-comment">// b.vue中定义方法</span><br></code></pre></td></tr></table></figure><p>b.vue</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">ToRefresh</span><span class="hljs-params">()</span></span>&#123;<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&quot;方法调用&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="父组件中调用子组件方法"><a href="#父组件中调用子组件方法" class="headerlink" title="父组件中调用子组件方法"></a>父组件中调用子组件方法</h3><p>父组件</p><pre><code class="hljs">&lt;goods-list class=&quot;operation&quot; ref=&quot;goodslist&quot;&gt;&lt;/goods-list&gt; //引入子组件ToRefresh()&#123;            this.$refs.goodslist.getStoreClassify()  //在父组件中调用方法        &#125;,</code></pre><p>子组件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getStoreClassify</span><span class="hljs-params">()</span></span>&#123;<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&quot;子组件中方法被调用&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在子组件中调用父组件方法"><a href="#在子组件中调用父组件方法" class="headerlink" title="在子组件中调用父组件方法"></a>在子组件中调用父组件方法</h3><h1 id="5-在vue-中实现数组查重"><a href="#5-在vue-中实现数组查重" class="headerlink" title="5.在vue 中实现数组查重"></a>5.在vue 中实现数组查重</h1><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const person<span class="hljs-operator">=</span>_this.goodstype.columns[<span class="hljs-number">0</span>].some(person<span class="hljs-operator">=</span>&gt;person.name <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> _this.editType.name)<br>其中_this.goodstype.columns[<span class="hljs-number">0</span>]为数组<br><span class="hljs-attribute">person</span><span class="hljs-operator">=</span>&gt;person.name <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> _this.editType.name为查询的对象<br></code></pre></td></tr></table></figure><h1 id="6-滚动数据"><a href="#6-滚动数据" class="headerlink" title="6.滚动数据"></a>6.滚动数据</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">利用分页，下拉加载更多数据<br>&lt;u-loadmore v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;orderList.length &gt;0 &quot;</span> <span class="hljs-symbol">:status=<span class="hljs-string">&quot;loadmoreStatus&quot;</span></span> <span class="hljs-variable">@loadmore</span>=<span class="hljs-string">&quot;loadmoreData&quot;</span> /&gt;<br>通过<span class="hljs-symbol">:status</span>绑定加载状态<br>加载前值为loadmore，加载中为loading，没有数据为nomore<br><br></code></pre></td></tr></table></figure><h1 id="7-页面上拉生命周期"><a href="#7-页面上拉生命周期" class="headerlink" title="7.页面上拉生命周期"></a>7.页面上拉生命周期</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br><span class="hljs-function"><span class="hljs-title">onReachBottom</span><span class="hljs-params">()</span></span> &#123;<br>页面上拉时候执行。<br>&#125;<br> <br><br></code></pre></td></tr></table></figure><h1 id="8、调用扫码接口"><a href="#8、调用扫码接口" class="headerlink" title="8、调用扫码接口"></a>8、调用扫码接口</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.scanCode(&#123;<br><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;条码类型：&#x27;</span> + res.scanType);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;条码内容：&#x27;</span> + res.result);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th><th align="right"></th></tr></thead><tbody><tr><td align="left">参数名</td><td align="left">类型</td><td align="left">必填</td><td align="left">说明</td><td align="right">平台差异说明</td></tr><tr><td align="left">onlyFromCamera</td><td align="left">Boolean</td><td align="left">否</td><td align="left">是否只能从相机扫码，不允许从相册选择图片</td><td align="right">字节跳动小程序、百度小程序、支付宝小程序不支持此参数</td></tr><tr><td align="left">scanType</td><td align="left">Array</td><td align="left">否</td><td align="left">扫码类型，参考下方<code>scanType的合法值</code></td><td align="right">字节跳动小程序不支持此参数</td></tr><tr><td align="left">autoDecodeCharset</td><td align="left">Boolean</td><td align="left">否</td><td align="left">是否启用自动识别字符编码功能，默认为否</td><td align="right">App</td></tr><tr><td align="left">autoZoom</td><td align="left">Boolean</td><td align="left">否</td><td align="left">是否启用自动放大，默认启用</td><td align="right">仅 App-Android (3.5.4+) 支持</td></tr><tr><td align="left">barCodeInput</td><td align="left">Boolean</td><td align="left">否</td><td align="left">是否支持手动输入条形码</td><td align="right">仅飞书小程序（V3.14.0）支持</td></tr><tr><td align="left">hideAlbum</td><td align="left">Boolean</td><td align="left">否</td><td align="left">是否隐藏相册（不允许从相册选择图片），只能从相机扫码。默认值为 false。</td><td align="right">仅支付宝小程序支持</td></tr><tr><td align="left">success</td><td align="left">Function</td><td align="left">否</td><td align="left">接口调用成功的回调，返回内容详见返回参数说明。</td><td align="right"></td></tr><tr><td align="left">fail</td><td align="left">Function</td><td align="left">否</td><td align="left">接口调用失败的回调函数（识别失败、用户取消等情况下触发）</td><td align="right"></td></tr><tr><td align="left">complete</td><td align="left">Function</td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td><td align="right"></td></tr></tbody></table><p><strong>scanType的合法值</strong></p><table><thead><tr><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">barCode</td><td align="left">一维码</td></tr><tr><td align="left">qrCode</td><td align="left">二维码</td></tr><tr><td align="left">datamatrix</td><td align="left">Data Matrix 码</td></tr><tr><td align="left">pdf417</td><td align="left">PDF417 条码</td></tr></tbody></table><p><strong>success 返回参数说明</strong></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">平台差异说明</th></tr></thead><tbody><tr><td align="left">result</td><td align="left">所扫码的内容</td><td align="left"></td></tr><tr><td align="left">scanType</td><td align="left">所扫码的类型</td><td align="left">App、微信小程序、百度小程序、QQ小程序、京东小程序、支付宝小程序</td></tr><tr><td align="left">charSet</td><td align="left">所扫码的字符集</td><td align="left">App、微信小程序、百度小程序(所扫码的字符集，仅支持 Android 系统)、QQ小程序、京东小程序</td></tr><tr><td align="left">path</td><td align="left">当所扫的码为当前应用的合法二维码时，会返回此字段，内容为二维码携带的 path。</td><td align="left">微信小程序、QQ小程序、京东小程序</td></tr><tr><td align="left">rawData</td><td align="left">原始数据，base64 编码</td><td align="left">微信小程序、QQ小程序、京东小程序、支付宝小程序</td></tr><tr><td align="left">code</td><td align="left">扫码所得数据</td><td align="left">支付宝小程序</td></tr><tr><td align="left">qrCode</td><td align="left">扫描二维码时返回二维码数据</td><td align="left">支付宝小程序</td></tr><tr><td align="left">barCode</td><td align="left">扫描条形码时返回条形码数据</td><td align="left">支付宝小程序</td></tr><tr><td align="left">imageChannel</td><td align="left">来源</td><td align="left">支付宝小程序</td></tr></tbody></table><h1 id="9、组件"><a href="#9、组件" class="headerlink" title="9、组件"></a>9、组件</h1><h2 id="1-switch-开关选择器"><a href="#1-switch-开关选择器" class="headerlink" title="1.switch 开关选择器"></a>1.switch 开关选择器</h2><p>如下图所示开关功能</p><p><img src="C:\Users\余航\AppData\Roaming\Typora\typora-user-images\image-20230621144105042.png" alt="image-20230621144105042"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">&lt;<span class="hljs-keyword">switch</span> <span class="hljs-symbol">@change</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;&lt;/<span class="hljs-keyword">switch</span>&gt;<br>通过监听change按钮变化事件去改变数据<br></code></pre></td></tr></table></figure><p>在uview 组件中有更加方便的方法，无需对按钮进行监听</p><p>代码：</p><p>其中v-model 值为双向绑定。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">&lt;u-<span class="hljs-keyword">switch</span> v-model=<span class="hljs-string">&quot;item.status&quot;</span> &gt;&lt;/u-<span class="hljs-keyword">switch</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="2-checkbox-group"><a href="#2-checkbox-group" class="headerlink" title="2.checkbox-group"></a>2.checkbox-group</h2><p>多项选择器，内部由多个 checkbox 组成。</p><p><img src="C:\Users\余航\AppData\Roaming\Typora\typora-user-images\image-20230621160347310.png" alt="image-20230621160347310"></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">checkbox-group</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">checkbox</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.sex&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">checkbox</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.sex&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.sex</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">checkbox-group</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>checkbox</p><p><img src="C:\Users\余航\AppData\Roaming\Typora\typora-user-images\image-20230621155416373.png" alt="image-20230621155416373"></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">checkbox</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.sex&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.sex</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>多选项目。</p><p><strong>属性说明</strong></p><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">String</td><td align="left"></td><td align="left"><code>&lt;checkbox&gt;</code> 标识，选中时触发 <code>&lt;checkbox-group&gt;</code> 的 change 事件，并携带 <code>&lt;checkbox&gt;</code> 的 value。</td></tr><tr><td align="left">disabled</td><td align="left">Boolean</td><td align="left">false</td><td align="left">是否禁用</td></tr><tr><td align="left">checked</td><td align="left">Boolean</td><td align="left">false</td><td align="left">当前是否选中，可用来设置默认选中</td></tr><tr><td align="left">color</td><td align="left">Color</td><td align="left"></td><td align="left">checkbox的颜色，同css的color</td></tr></tbody></table><p>3.editor</p><p>富文本编辑器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>read-only</td><td>boolean</td><td>false</td><td>否</td><td>设置编辑器为只读</td></tr><tr><td>placeholder</td><td>string</td><td></td><td>否</td><td>提示信息</td></tr><tr><td>show-img-size</td><td>boolean</td><td>false</td><td>否</td><td>点击图片时显示图片大小控件</td></tr><tr><td>show-img-toolbar</td><td>boolean</td><td>false</td><td>否</td><td>点击图片时显示工具栏控件</td></tr><tr><td>show-img-resize</td><td>boolean</td><td>false</td><td>否</td><td>点击图片时显示修改尺寸控件</td></tr><tr><td>@ready</td><td>eventhandle</td><td></td><td>否</td><td>编辑器初始化完成时触发</td></tr><tr><td>@focus</td><td>eventhandle</td><td></td><td>否</td><td>编辑器聚焦时触发，event.detail &#x3D; {html, text, delta}</td></tr><tr><td>@blur</td><td>eventhandle</td><td></td><td>否</td><td>编辑器失去焦点时触发，detail &#x3D; {html, text, delta}</td></tr><tr><td>@input</td><td>eventhandle</td><td></td><td>否</td><td>编辑器内容改变时触发，detail &#x3D; {html, text, delta}</td></tr><tr><td>@statuschange</td><td>eventhandle</td><td></td><td>否</td><td>通过 Context 方法改变编辑器内样式时触发，返回选区已设置的样式</td></tr></tbody></table><h1 id="10、文字溢出box-时候用省略号表示"><a href="#10、文字溢出box-时候用省略号表示" class="headerlink" title="10、文字溢出box 时候用省略号表示"></a>10、文字溢出box 时候用省略号表示</h1><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cos">&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;white-space&quot;</span>&gt;<span class="hljs-number">1.</span>虚无，是我的性格。<br><span class="hljs-number">2.</span>刀鞘？丢失了。<br><span class="hljs-number">3.</span>跟马上会挂掉的人争夺粉丝，真的很没有成就感。（挑衅）<br><span class="hljs-number">4.</span>所谓武技，不过是遇害者数字的累积而已。&lt;/<span class="hljs-keyword">view</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.white-space</span>&#123;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">30</span>upx;<br><span class="hljs-attribute">max-height</span>: <span class="hljs-number">40</span>upx;<br><span class="hljs-attribute">overflow</span>: hidden;<br><span class="hljs-attribute">word-break</span>: break-all;  <span class="hljs-comment">/* break-all(允许在单词内换行。) </span><br><span class="hljs-comment">text-overflow: ellipsis;  /* 超出部分省略号 */</span><br><span class="hljs-attribute">display</span>: -webkit-box; <span class="hljs-comment">/** 对象作为伸缩盒子模型显示 **/</span><br>-webkit-box-orient: vertical; <span class="hljs-comment">/** 设置或检索伸缩盒对象的子元素的排列方式 **/</span><br>-webkit-line-clamp: <span class="hljs-number">2</span>; <span class="hljs-comment">/** 显示的行数 **/</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="11、tabs-标签切换"><a href="#11、tabs-标签切换" class="headerlink" title="11、tabs 标签切换"></a>11、tabs 标签切换</h1><p>实例：</p><p><img src="C:\Users\余航\AppData\Roaming\Typora\typora-user-images\image-20230626145630749.png" alt="image-20230626145630749"></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">利用uview 组件快速创建tabs标签<br>&lt;u-tabs :list=<span class="hljs-string">&quot;list1&quot;</span> @click=<span class="hljs-string">&quot;click&quot;</span>&gt;&lt;/u-tabs&gt;<br>export defualt &#123;<br>data()&#123;<br>return&#123;<br><br><span class="hljs-symbol">list:</span>[&#123;<br><span class="hljs-symbol">name:</span><span class="hljs-string">&quot;全部&quot;</span>，<br><span class="hljs-symbol">comm:</span><span class="hljs-string">&quot;A&quot;</span><br>&#125;,<br><span class="hljs-symbol">name:</span><span class="hljs-string">&quot;发布中&quot;</span>，<br><span class="hljs-symbol">comm:</span><span class="hljs-string">&quot;B&quot;</span><br>&#125;,<br><span class="hljs-symbol">name:</span><span class="hljs-string">&quot;已下架&quot;</span>，<br><span class="hljs-symbol">comm:</span><span class="hljs-string">&quot;C&quot;</span><br>&#125;]<br><br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>利用<code>&lt;component :is=&quot;CurrentPages&quot;&gt;&lt;/component&gt;</code>实现快速的组件切换</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean">&lt;component :is=<span class="hljs-string">&quot;CurrentPages&quot;</span>&gt;&lt;/component&gt;<br><span class="hljs-comment">//首先引入所需要的组件</span><br><span class="hljs-keyword">import</span> A <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./component/A&quot;</span><br><span class="hljs-keyword">import</span> B <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./component/B&quot;</span><br><span class="hljs-keyword">import</span> C <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./component/C&quot;</span><br><span class="hljs-keyword">export</span> defualt &#123;<br><span class="hljs-comment">//其次注册组件</span><br>components:&#123;<br>A,B,C<br>&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>随后绑定tabs 的点击事件，获取当前点击的标签索引，current值，将其值动态赋值给<code>:is=&quot;CurrentPages&quot;</code>，使其达到动态切换组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>: &#123;<br><span class="hljs-title function_">click</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">Comment</span>)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">CurrentPages</span>=e.<span class="hljs-property">Comment</span><br>&#125;,<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="12、网络请求API"><a href="#12、网络请求API" class="headerlink" title="12、网络请求API"></a>12、网络请求API</h1><p>1、query形式传递参数</p><p>形如：<code>www.baidu.com?id=1pageNum=10</code></p><p>请求时</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">industry: (param) =&gt; &#123;<br><span class="hljs-comment">// 构造新的传递参数Object（对象），对象中的params值对应paramList------query参数</span><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">params</span> = &#123;<br><span class="hljs-keyword">params</span>: param<br>&#125;;<br><span class="hljs-keyword">return</span> uni.$u.http.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;/product/industry/list&quot;</span>, <span class="hljs-keyword">params</span>);<br>&#125;,<br></code></pre></td></tr></table></figure><p>2、body形式传递参数（json格式）</p><p>在URL处隐藏所传递的参数信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">changeStatus:(<span class="hljs-built_in">id</span>,status)=&gt;&#123;<br>// 直接传递一个对象------------body形式传参，传递json格式数据<br><span class="hljs-built_in">let</span> params=&#123;<br><span class="hljs-built_in">id</span>:<span class="hljs-built_in">id</span>,<br>status:status<br>&#125;<br><br><span class="hljs-built_in">return</span> uni.<span class="hljs-variable">$u</span>.http.put(<span class="hljs-string">&quot;/needs/info/changeStatus&quot;</span>, params)<br>&#125;,<br></code></pre></td></tr></table></figure><p>在页面中调用接口方法并传递相对应参数即可</p><p>例如：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">this.<span class="hljs-symbol">$api</span>.industry(params).then(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res)<span class="hljs-comment">//此处处理调用接口的回调函数。</span><br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="13、利用-emit（）进行子组件向父组件传值"><a href="#13、利用-emit（）进行子组件向父组件传值" class="headerlink" title="13、利用$emit（）进行子组件向父组件传值"></a>13、利用$emit（）进行子组件向父组件传值</h1><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">uni.<span class="hljs-variable">$emit</span>(<span class="hljs-string">&#x27;needsShow&#x27;</span>, <span class="hljs-literal">show</span>) 在子组件方法中定义传值，传递参数名为needsShow，参数值为<span class="hljs-literal">show</span>（可以为数值，数组，方法等内容）<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade">接受方法一  父组件中接收子组件数据<br>在父组件中进行方法调用<br>&lt;needs @needsShow=<span class="hljs-string">&quot;function&quot;</span>&gt;&lt;/needs&gt;<br><span class="hljs-keyword">function</span> 可以为定义为方法<br><br><span class="hljs-title function_">function</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e)  此时e 为子组件中传递值<br>&#125;<br><br>方法二   可以直接在其他页面中进行接收<br>在mounted中调用<br>uni.<span class="hljs-symbol">$o</span>n(<span class="hljs-string">&#x27;needsShow&#x27;</span>, data =&gt; &#123;   （回调函数方法） &#125;)<br>接收的参数值为data<br></code></pre></td></tr></table></figure><h1 id="14、uniapp-中uview-组件并不支持-click-stop-阻止冒泡"><a href="#14、uniapp-中uview-组件并不支持-click-stop-阻止冒泡" class="headerlink" title="14、uniapp 中uview 组件并不支持@click.stop 阻止冒泡"></a>14、uniapp 中uview 组件并不支持@click.stop 阻止冒泡</h1><p>可以利用@click.native.stop 完成冒泡事件的阻止。</p><h1 id="15、from表单重置"><a href="#15、from表单重置" class="headerlink" title="15、from表单重置"></a>15、from表单重置</h1><p>​@reset 事件</p><p>​在使用uview UI组件中</p><p>使用ref 中的resetFields()方法进行对表单的重置。</p><p> this.$refs.productRuleForm.resetFields()</p><p>16、获取一遍数组，使组件共用数据</p><p>父组件中获取数据</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;home v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;pageFlag === &#x27;index&#x27;&quot;</span> <span class="hljs-symbol">:userinfoList=<span class="hljs-string">&quot;userinfoList&quot;</span>&gt;&lt;/home&gt;</span><br></code></pre></td></tr></table></figure><p>利用父组件传值特性，向子组件传递数据</p><p>子组件中适用props进行接收，并使用数据</p><p>  props: [“userinfoList”],</p><h1 id="16、查找数组中的元素，或对象"><a href="#16、查找数组中的元素，或对象" class="headerlink" title="16、查找数组中的元素，或对象"></a>16、查找数组中的元素，或对象</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>let num = arr1.<span class="hljs-built_in">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num)  <span class="hljs-comment">//輸出的結果是2</span><br></code></pre></td></tr></table></figure><h1 id="17、定时器"><a href="#17、定时器" class="headerlink" title="17、定时器"></a>17、定时器</h1><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">setInterval</span> (<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br><br>&#125;,<span class="hljs-number">1000</span>)<br>按照一定周期调用函数<br><br></code></pre></td></tr></table></figure><h1 id="18、u-popup-滚动穿透问题-微信小程序"><a href="#18、u-popup-滚动穿透问题-微信小程序" class="headerlink" title="18、u-popup 滚动穿透问题 微信小程序"></a>18、u-popup 滚动穿透问题 微信小程序</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">打开popup层后仍可以滚动页面<br>此时 添加catchtouchmove 阻止滚动穿透<br>&lt;u-popup <span class="hljs-symbol">:show=<span class="hljs-string">&quot;tipShow&quot;</span></span> <span class="hljs-variable">@close</span>=<span class="hljs-string">&quot;tipShow=false&quot;</span> <span class="hljs-symbol">:closeable=<span class="hljs-string">&quot;true&quot;</span></span> catchtouchmove&gt;<br></code></pre></td></tr></table></figure><h1 id="18、跳转tabbar页面"><a href="#18、跳转tabbar页面" class="headerlink" title="18、跳转tabbar页面"></a>18、跳转tabbar页面</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><br>      uni.switchTab(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/work/index&#x27;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>        &#125;,<br>      &#125;);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;用户点击确定&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.cancel) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;用户点击取消&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="19、触发跳转后页面的方法"><a href="#19、触发跳转后页面的方法" class="headerlink" title="19、触发跳转后页面的方法"></a>19、触发跳转后页面的方法</h1><p>{非tabbar页面}</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arcade">使用模态框提示用户，点击确定后跳转到tabbar页面，并传递tabBarPageJump事件名<br><br>uni.showModal(&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;提示&#x27;</span>,<br>  <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;即将跳转到扫码页面，确定跳转吗&#x27;</span>,<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-keyword">if</span> (res.confirm) &#123;<br>      uni.switchTab(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/work/index&#x27;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>          <span class="hljs-comment">// 传递tabBarPageJump事件名，使页面触发事件</span><br>          uni.<span class="hljs-symbol">$emit</span>(<span class="hljs-string">&#x27;tabBarPageJump&#x27;</span>,);<br>        &#125;,<br>      &#125;);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;用户点击确定&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.cancel) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;用户点击取消&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>{tabbar 页面}并且在跳转后的页面中监听事件，并触发</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>监听传递的tabBarPageJump事件名，，触发对应的事件<br>  uni.$on(<span class="hljs-string">&#x27;tabBarPageJump&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">method</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 根据传递过来的方法名称执行对应的方法</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handelScanCode</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;触发方法了。。。。。。。&quot;</span>)<br>  &#125;);<br>  &#125;,<br></code></pre></td></tr></table></figure><h1 id="20、返回上一页"><a href="#20、返回上一页" class="headerlink" title="20、返回上一页"></a>20、返回上一页</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">uni.navigateBack(&#123;<br>       delta: <span class="hljs-number">1</span>, <span class="hljs-regexp">//</span> 返回的页面数，<span class="hljs-number">1</span>表示返回上一页，<span class="hljs-number">2</span>表示返回上两页，以此类推<br>     &#125;);<br></code></pre></td></tr></table></figure><h1 id="21、利用map-方法构成一个新的数组"><a href="#21、利用map-方法构成一个新的数组" class="headerlink" title="21、利用map()方法构成一个新的数组"></a>21、利用map()方法构成一个新的数组</h1><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xquery">利用<span class="hljs-keyword">map</span> 取值构建一个新的数组。<br>[&#123;text:’<span class="hljs-number">1</span>’,value:’<span class="hljs-number">111</span>’&#125;,&#123;text:’<span class="hljs-number">2</span>’,value:’<span class="hljs-number">3</span>’&#125;]<br>从res 中循环取值取出<span class="hljs-type">item</span><span class="hljs-built_in">.name</span> 赋值<span class="hljs-type">text</span>  <br>取出<span class="hljs-type">item</span><span class="hljs-built_in">.id</span> 赋值<span class="hljs-keyword">value</span><br>var data = res.<span class="hljs-keyword">map</span>(<span class="hljs-type">item</span> =&gt; &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    text: <span class="hljs-type">item</span><span class="hljs-built_in">.name</span>,<br>    value: <span class="hljs-type">item</span><span class="hljs-built_in">.id</span>,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="22、vuex"><a href="#22、vuex" class="headerlink" title="22、vuex"></a>22、vuex</h1><h1 id="23、获取元素高度，动态计算滚动区域高度"><a href="#23、获取元素高度，动态计算滚动区域高度" class="headerlink" title="23、获取元素高度，动态计算滚动区域高度"></a>23、获取元素高度，动态计算滚动区域高度</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">获取search &lt;view&gt;标签占用高度<br><br>uni.createSelectorQuery().<span class="hljs-keyword">in</span>(<span class="hljs-keyword">this</span>).select(<span class="hljs-string">&#x27;.search&#x27;</span>).boundingClientRect((rect) =&gt; &#123;<br><br> <span class="hljs-keyword">this</span>.searchHeight=rect.height<br><br>获取设备信息，通过设备高度计算出设备可用内容区域<br><br><span class="hljs-keyword">const</span> systemInfo = uni.getSystemInfoSync();<br><br> <span class="hljs-keyword">this</span>.scrollHeight=systemInfo.windowHeight-systemInfo.safeAreaInsets.top-systemInfo.safeAreaInsets.bottom-<span class="hljs-keyword">this</span>.searchHeight+<span class="hljs-string">&quot;px&quot;</span><br><br> &#125;).exec()<br></code></pre></td></tr></table></figure><h1 id="24、语音播报功能实现方案"><a href="#24、语音播报功能实现方案" class="headerlink" title="24、语音播报功能实现方案"></a>24、语音播报功能实现方案</h1><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>利用安卓系统自带TTS语音合成引擎，在uniapp 插件市场找到TTS 语音合成插件即可</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>人工合成语音文件，并编写方法进行调用</p><p>语音合成网址<a href="https://www.luyinzhushou.com/text2voice/">https://www.luyinzhushou.com/text2voice/</a></p><p>需要将语音文件存放到staic&#x2F;music 目录下   </p><p>以_1.p3 , _a.mp3格式保存</p><p>将字符串拆分，并匹配对应语音文件名，创建队列列表，监听队列中一条语音播放完成后再次调用播放语音方法播放第二条语音，知道队列列表为空则停止播放。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript">res 为所需要播放的字符串<br><span class="hljs-attr">playList</span>: <span class="hljs-title function_">throttle</span>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>     <span class="hljs-comment">// 正则表达将大写转小写</span><br>     <span class="hljs-keyword">let</span> newStr = res.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[A-Z]/g</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">match</span>) &#123;<br>       <span class="hljs-keyword">return</span> match.<span class="hljs-title function_">toLowerCase</span>();<br>     &#125;);<br>  <span class="hljs-keyword">let</span> music = uni.<span class="hljs-title function_">createInnerAudioContext</span>();<br>  music.<span class="hljs-title function_">stop</span>()<br>  <span class="hljs-keyword">let</span> moneyArr = []<br>  moneyArr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;_qing&quot;</span>)<br>  <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-title class_">String</span>(newStr)).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>   moneyArr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;_&#x27;</span> + item)<br>  &#125;)<br>  moneyArr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;_hao&quot;</span>)<br>  <span class="hljs-keyword">let</span> arr = moneyArr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-string">`/static/music/<span class="hljs-subst">$&#123;item&#125;</span>.mp3`</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">playVoice</span>(arr)<br>  uni.<span class="hljs-property">$u</span>.<span class="hljs-title function_">toast</span>(res + <span class="hljs-string">&#x27;号叫号成功&#x27;</span>)<br>&#125;, <span class="hljs-number">2000</span>),<br>语音播放方法<br>  <span class="hljs-title function_">playVoice</span>(<span class="hljs-params">arr</span>)&#123;<br>  <span class="hljs-keyword">let</span> music = uni.<span class="hljs-title function_">createInnerAudioContext</span>();<br>  music.<span class="hljs-property">src</span> = arr.<span class="hljs-title function_">shift</span>()<br>  music.<span class="hljs-title function_">play</span>()<br>  music.<span class="hljs-title function_">onError</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>   uni.<span class="hljs-title function_">showToast</span>(&#123;<br>    <span class="hljs-attr">title</span>: res.<span class="hljs-property">errMsg</span>,<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>    <span class="hljs-attr">duration</span>: <span class="hljs-number">3000</span><br>   &#125;)<br>  &#125;)<br>  <span class="hljs-comment">// 解决实例化太多出现错误不播放问题</span><br>  music.<span class="hljs-title function_">onEnded</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>   <span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span><br>   <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;<br>    that.<span class="hljs-property">num</span> = <span class="hljs-number">0</span><br>    that.<span class="hljs-property">moneyArr</span> = []<br>    music.<span class="hljs-title function_">destroy</span>(); <span class="hljs-comment">// 销毁音频实例</span><br>         uni.<span class="hljs-property">$u</span>.<span class="hljs-title function_">toast</span>(<span class="hljs-string">&#x27;叫号完成&#x27;</span>)<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>    music.<span class="hljs-title function_">destroy</span>(); <span class="hljs-comment">// 销毁音频实例</span><br>    that.<span class="hljs-title function_">playVoice</span>(arr)<br>   &#125;<br>  &#125;)<br>&#125;, <br></code></pre></td></tr></table></figure><p>封装成为工具   toPlay   进行预先对音频数组处理，后调用设备音频实例进行数组顺序播放</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs arcade">export <span class="hljs-keyword">function</span> <span class="hljs-title function_">toPlay</span>(<span class="hljs-params">list,type</span>) &#123;<br><span class="hljs-keyword">if</span> (status)&#123;<br>  <span class="hljs-comment">//   普通叫号方法</span><br>  <span class="hljs-keyword">if</span>(type==<span class="hljs-string">&#x27;call&#x27;</span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;播放地址type&quot;</span>,list)<br>    let newStr = list.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/[A-Z]/g</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">match</span>) &#123;<br>      <span class="hljs-keyword">return</span> match.toLowerCase();<br>    &#125;);<br>    let moneyArr = []<br>    moneyArr.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;_qing&quot;</span>)<br>    <span class="hljs-built_in">Array</span>.from(String(newStr)).forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>      moneyArr.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;_&#x27;</span> + item)<br>    &#125;)<br>    moneyArr.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;_hao&quot;</span>)<br>    let arr = moneyArr.<span class="hljs-built_in">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-string">`/static/music/<span class="hljs-subst">$&#123;item&#125;</span>.mp3`</span>);<br>    uni.<span class="hljs-symbol">$u</span>.toast(newStr+<span class="hljs-string">&#x27;号正在叫号&#x27;</span>)<br>    playVoice(arr)<br>  &#125;<br><span class="hljs-comment">// 订单</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type ==<span class="hljs-string">&#x27;order&#x27;</span>)&#123;<br>    <span class="hljs-comment">// let newStr = list.replace(/[A-Z]/g, function(match) &#123;</span><br>    <span class="hljs-comment">//   return match.toLowerCase();</span><br>    <span class="hljs-comment">// &#125;);</span><br>    let newStr =<span class="hljs-string">&#x27;order&#x27;</span><br>    let moneyArr = []<br>    moneyArr.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;_&#x27;</span> + newStr)<br>    <span class="hljs-comment">// Array.from(String(newStr)).forEach(item =&gt; &#123;</span><br>    <span class="hljs-comment">//   moneyArr.push(&#x27;_&#x27; + item)</span><br>    <span class="hljs-comment">// &#125;)</span><br>    let arr = moneyArr.<span class="hljs-built_in">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-string">`/static/music/<span class="hljs-subst">$&#123;item&#125;</span>.mp3`</span>);<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr)<br>    playVoice(arr)<br>  &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  uni.<span class="hljs-symbol">$u</span>.toast(<span class="hljs-string">&#x27;您有未完成的叫号请稍等&#x27;</span>)<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>此处为音频播放</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arcade">export  <span class="hljs-keyword">function</span> <span class="hljs-title function_">playVoice</span>(<span class="hljs-params">arr</span>)&#123;<br>  let music = uni.createInnerAudioContext();<br>  music.src = arr.shift()<br>  status=<span class="hljs-literal">false</span><br>  music.play()<br>  music.onError(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    uni.showToast(&#123;<br>      <span class="hljs-attr">title</span>: res.errMsg,<br>      <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>      <span class="hljs-attr">duration</span>: <span class="hljs-number">3000</span><br>    &#125;)<br>  &#125;)<br>  <span class="hljs-comment">// 解决实例化太多出现错误不播放问题</span><br>  music.onEnded(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    let that = toPlay<br>    <span class="hljs-keyword">if</span> (arr.<span class="hljs-built_in">length</span> == <span class="hljs-number">0</span>) &#123;<br>      that.moneyArr = []<br>      music.destroy(); <span class="hljs-comment">// 销毁音频实例</span><br>      uni.<span class="hljs-symbol">$u</span>.toast(<span class="hljs-string">&#x27;叫号完成&#x27;</span>)<br>      status=<span class="hljs-literal">true</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>      music.destroy(); <span class="hljs-comment">// 销毁音频实例</span><br>      playVoice(arr)<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>使用工具方式</p><p>区分不同的需求，call为叫号模式， 请    XXX   号顾客取餐     </p><p>音频文件分别为  _qing.mp3      —-     _hao.mp3</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe">let <span class="hljs-keyword">new</span><span class="hljs-type">Str</span> = <span class="hljs-keyword">String</span>(item).replace(/[^a-zA-Z0<span class="hljs-number">-9</span>]/g, <span class="hljs-string">&#x27;&#x27;</span>);   利用正则表达式去除中文或者其他字符 <br><span class="hljs-built_in">this</span>.$util.toPlay(<span class="hljs-keyword">new</span><span class="hljs-type">Str</span>,<span class="hljs-string">&#x27;call&#x27;</span>)    <br>OR<br><span class="hljs-built_in">this</span>.$util.toPlay(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;order&#x27;</span>)  <br></code></pre></td></tr></table></figure><h1 id="25、防抖和节流函数的使用"><a href="#25、防抖和节流函数的使用" class="headerlink" title="25、防抖和节流函数的使用"></a>25、防抖和节流函数的使用</h1><h3 id="函数防抖执行所有点击的最后一次。（debounce）"><a href="#函数防抖执行所有点击的最后一次。（debounce）" class="headerlink" title="函数防抖执行所有点击的最后一次。（debounce）"></a>函数防抖执行所有点击的最后一次。（debounce）</h3><h3 id="函数节流执行所有点击的第一次。-throttle"><a href="#函数节流执行所有点击的第一次。-throttle" class="headerlink" title="函数节流执行所有点击的第一次。(throttle)"></a>函数节流执行所有点击的第一次。(throttle)</h3><p>可以放置于工具JS类 中</p><p>在需要使用的方法中引入工具</p><p>并且使用方法，定义防抖或者节流时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//playList 这个是函数方法名。res为函数接受的值</span><br><span class="hljs-attr">playList</span>: <span class="hljs-title function_">throttle</span>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>此处放置函数方法<br>&#125;,<span class="hljs-number">1000</span>)<br><span class="hljs-attr">test</span>:<span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;放置函数位置&quot;</span>)<br>&#125;,<span class="hljs-number">800</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*防止多次点击函数防抖只执行最后一次*/</span><br>防抖函数<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, time</span>) &#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (timer) &#123;<br>      <span class="hljs-built_in">clearTimeout</span>(timer)<br>    &#125;<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>    &#125;, time)<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 防止多次点击跳转（函数节流）</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn, gapTime</span>) &#123;<br>  <span class="hljs-keyword">if</span> (gapTime == <span class="hljs-literal">null</span> || gapTime == <span class="hljs-literal">undefined</span>) &#123;<br>    gapTime = <span class="hljs-number">1500</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> _lastTime = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-comment">// 返回新的函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> _nowTime = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-keyword">if</span> (_nowTime - _lastTime &gt; gapTime || !_lastTime) &#123;<br>      fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">//将this和参数传给原函数</span><br>      _lastTime = _nowTime;<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="26、时间差计算"><a href="#26、时间差计算" class="headerlink" title="26、时间差计算"></a>26、时间差计算</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> currentTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>r.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> orderTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(item.<span class="hljs-property">orderDate</span>);<br>  <span class="hljs-keyword">let</span> timeDifference = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((orderTime - currentTime) / <span class="hljs-number">60000</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;时间差：&quot;</span> + timeDifference + <span class="hljs-string">&quot;分钟&quot;</span>);<br>  <span class="hljs-keyword">if</span> (item.<span class="hljs-property">orderStatus</span> === <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>    item.<span class="hljs-property">waitingTime</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(timeDifference)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="27、获取当月天数"><a href="#27、获取当月天数" class="headerlink" title="27、获取当月天数"></a>27、获取当月天数</h1><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">// 获取当月天数</span><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-keyword">const</span> length = <span class="hljs-keyword">new</span>  <span class="hljs-built_in">Date</span>(<span class="hljs-built_in">date</span>.getFullYear(), <span class="hljs-built_in">date</span>.getMonth(), <span class="hljs-number">0</span>).getDate();<br></code></pre></td></tr></table></figure><h1 id="28、打包参数（分包整合）"><a href="#28、打包参数（分包整合）" class="headerlink" title="28、打包参数（分包整合）"></a>28、打包参数（分包整合）</h1><p>业务场景为同一个uniapp小程序，需要打包为现有小程序的分包，需要在现有小程序中配置分包小程序的page.json 页面。后可在需要打包的uniapp小程序中配置package.json文件，像如下所示配置启动参数subPackages</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&quot;<span class="hljs-keyword">build</span>:mp-weixinsub<span class="hljs-string">&quot;: &quot;</span>cross-env NODE_ENV=subPackages UNI_PLATFORM=mp-weixin vue-cli-service uni-<span class="hljs-keyword">build</span> --watch --minimize<span class="hljs-string">&quot;,</span><br></code></pre></td></tr></table></figure><p>随后在uniapp小程序的config.js文件中配置分包参数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">switch (process.env.NODE_ENV) &#123;<br>    <span class="hljs-regexp">//</span>     打分包时候参数 分包命令build:mp-weixinsub<br>    case <span class="hljs-string">&quot;subPackages&quot;</span>:<br>       subPackages=<span class="hljs-string">&quot;drive&quot;</span><br>       <span class="hljs-regexp">//</span> baseUrl = <span class="hljs-string">&quot;https://print.yncloudsaas.com/prod-api&quot;</span> <span class="hljs-regexp">//</span>这里是本地的请求<br>          baseUrl = <span class="hljs-string">&quot;http://10.14.22.6:8081&quot;</span> <span class="hljs-regexp">//</span>这里是本地的请求<br>       <span class="hljs-keyword">break</span>;<br>       <span class="hljs-regexp">//</span>普通打包形式时候<br>    case <span class="hljs-string">&quot;production&quot;</span>:<br>       <span class="hljs-regexp">//</span> baseUrl = <span class="hljs-string">&quot;http://192.168.0.110:9999&quot;</span> <span class="hljs-regexp">//</span>这里是本地的请求<br>       <span class="hljs-regexp">//</span> baseUrl = <span class="hljs-string">&quot;https://print.world-cloud.cn/prod-api&quot;</span> <span class="hljs-regexp">//</span>这里是本地的请求<br>       baseUrl = <span class="hljs-string">&quot;https://print.yncloudsaas.com/prod-api&quot;</span> <span class="hljs-regexp">//</span>这里是本地的请求<br>       <span class="hljs-regexp">//</span> baseUrl = <span class="hljs-string">&quot;http://8.130.13.206&quot;</span> <span class="hljs-regexp">//</span>这里是本地的请求<br>       <span class="hljs-regexp">//</span>   baseWsUrl = <span class="hljs-string">&quot;WS://192.168.1.108:8080&quot;</span>; <span class="hljs-regexp">//</span>这里是本地的请求<br>       <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>随后即可在页面中引入subPackages</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123;subPackages&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/common/config&quot;</span>;<br></code></pre></td></tr></table></figure><p>利用其值进行页面跳转路径的修改配置及其他配置</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">subPackages: </span><span class="hljs-keyword">subPackages </span>=== undefined ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;drive/&quot;</span>,<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">icon: subPackages === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27; &#x27;</span> : <span class="hljs-string">&#x27;arrow-left&#x27;</span>,<br></code></pre></td></tr></table></figure><h1 id="29、uni-navTo-页面跳转方法（封装跳转方法）"><a href="#29、uni-navTo-页面跳转方法（封装跳转方法）" class="headerlink" title="29、uni.navTo 页面跳转方法（封装跳转方法）"></a>29、uni.navTo 页面跳转方法（封装跳转方法）</h1><p>方法可以结合打包方式的不同进行按需跳转，具有打包参数时候则跳转前加入打包参数地址连接进行正常跳转。</p><p>将其方法定义到util.js工具类中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">navTo</span>(<span class="hljs-params">url, query = &#123;&#125;, <span class="hljs-keyword">type</span> = <span class="hljs-string">&#x27;nav&#x27;</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!url || url.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-comment">//返回上页面</span><br>    <span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;back&#x27;</span>) &#123;<br>       uni.<span class="hljs-title function_">navigateBack</span>(&#123;<br>          <span class="hljs-attr">delta</span>: <span class="hljs-number">1</span><br>       &#125;)<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-comment">// tabBar页面, 使用switchTab判断跳转页面是不是tabbar页面</span><br>    <span class="hljs-keyword">if</span> (tabBarLinks.<span class="hljs-title function_">includes</span>(url)) &#123;<br>       uni.<span class="hljs-title function_">switchTab</span>(&#123;<br>          <span class="hljs-attr">url</span>: <span class="hljs-string">`/<span class="hljs-subst">$&#123;url&#125;</span>`</span><br>       &#125;)<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-comment">// 生成query参数</span><br>    <span class="hljs-keyword">const</span> queryStr = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(query).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;?&#x27;</span> + <span class="hljs-title function_">urlEncode</span>(query) : <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(queryStr)<br>    <span class="hljs-comment">// 判断打包方式，为打分包则跳转链接加入分包名称</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> == <span class="hljs-string">&#x27;reL&#x27;</span>) &#123; <br>       <span class="hljs-keyword">if</span> (subPackages===<span class="hljs-literal">undefined</span>)&#123;<br>          <span class="hljs-comment">// 普通页面, 使用navigateTo</span><br>          uni.<span class="hljs-title function_">reLaunch</span>(&#123;<br>             <span class="hljs-attr">url</span>: <span class="hljs-string">`/<span class="hljs-subst">$&#123;url&#125;</span><span class="hljs-subst">$&#123;queryStr&#125;</span>`</span>,<br>             <span class="hljs-attr">fail</span>: <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e)<br>             &#125;<br>          &#125;)<br>       &#125;<span class="hljs-keyword">else</span>&#123;<br>          <span class="hljs-comment">// 普通页面, 使用navigateTo</span><br>          uni.<span class="hljs-title function_">reLaunch</span>(&#123;<br>             <span class="hljs-attr">url</span>: <span class="hljs-string">`/<span class="hljs-subst">$&#123;subPackages&#125;</span>/<span class="hljs-subst">$&#123;url&#125;</span><span class="hljs-subst">$&#123;queryStr&#125;</span>`</span>,<br>             <span class="hljs-attr">fail</span>: <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e)<br>             &#125;<br>          &#125;)<br>       &#125;<br><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> == <span class="hljs-string">&#x27;nav&#x27;</span>) &#123;<br>       <span class="hljs-comment">// 判断打包方式，undefined 为普通打包，drive 时为打分包</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(subPackages)<br>       <span class="hljs-keyword">if</span> (subPackages===<span class="hljs-literal">undefined</span>)&#123;<br>          <span class="hljs-comment">// 普通页面, 使用navigateTo</span><br>          uni.<span class="hljs-title function_">navigateTo</span>(&#123;<br>             <span class="hljs-attr">url</span>: <span class="hljs-string">`/<span class="hljs-subst">$&#123;url&#125;</span><span class="hljs-subst">$&#123;queryStr&#125;</span>`</span>,<br>             <span class="hljs-attr">fail</span>: <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e)<br>             &#125;<br>          &#125;)<br>       &#125;<span class="hljs-keyword">else</span>&#123;<br>          <span class="hljs-comment">// 普通页面, 使用navigateTo</span><br>          uni.<span class="hljs-title function_">navigateTo</span>(&#123;<br>             <span class="hljs-attr">url</span>: <span class="hljs-string">`/<span class="hljs-subst">$&#123;subPackages&#125;</span>/<span class="hljs-subst">$&#123;url&#125;</span><span class="hljs-subst">$&#123;queryStr&#125;</span>`</span>,<br>             <span class="hljs-attr">fail</span>: <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e)<br>             &#125;<br>          &#125;)<br>       &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> == <span class="hljs-string">&#x27;reD&#x27;</span>) &#123;<br>       <span class="hljs-keyword">if</span> (subPackages===<span class="hljs-literal">undefined</span>)&#123;<br>          uni.<span class="hljs-title function_">redirectTo</span>(&#123;<br>             <span class="hljs-attr">url</span>: <span class="hljs-string">`/<span class="hljs-subst">$&#123;url&#125;</span><span class="hljs-subst">$&#123;queryStr&#125;</span>`</span>,<br>             <span class="hljs-attr">fail</span>: <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e)<br>             &#125;<br>          &#125;)<br>       &#125;<span class="hljs-keyword">else</span>&#123;<br>          uni.<span class="hljs-title function_">redirectTo</span>(&#123;<br>             <span class="hljs-attr">url</span>: <span class="hljs-string">`/<span class="hljs-subst">$&#123;subPackages&#125;</span>/<span class="hljs-subst">$&#123;url&#125;</span><span class="hljs-subst">$&#123;queryStr&#125;</span>`</span>,<br>             <span class="hljs-attr">fail</span>: <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e)<br>             &#125;<br>          &#125;)<br>       &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用方法进行请求</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">this.$util.nav<span class="hljs-constructor">To(&#x27;<span class="hljs-params">pages</span><span class="hljs-operator">/</span><span class="hljs-params">guidance</span><span class="hljs-operator">/</span><span class="hljs-params">guidance</span>&#x27;)</span><br></code></pre></td></tr></table></figure><h1 id="30、时间戳转换"><a href="#30、时间戳转换" class="headerlink" title="30、时间戳转换"></a>30、时间戳转换</h1><p>1、获取当前时间戳</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br></code></pre></td></tr></table></figure><p>2、时间戳精确到毫秒</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().<span class="hljs-keyword">get</span><span class="hljs-built_in">Time</span>()<br></code></pre></td></tr></table></figure><p>3、时间戳精确到秒</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">Date</span>.parse(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()) / <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>4、时间字符串转换为时间戳（精确值同理）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">new</span> <span class="hljs-constructor">Date(<span class="hljs-params">deliveryTime</span>)</span><br></code></pre></td></tr></table></figure><h1 id="31、跨页面方法调用及数据传输"><a href="#31、跨页面方法调用及数据传输" class="headerlink" title="31、跨页面方法调用及数据传输"></a>31、跨页面方法调用及数据传输</h1><p>A.page页面</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lasso">uni.$emit(<span class="hljs-string">&#x27;eventName&#x27;</span>,<span class="hljs-built_in">data</span>) <br>事件名，以及对应传递的数据<br></code></pre></td></tr></table></figure><p>B.page页面</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">create()&#123;<br>uni.$<span class="hljs-literal">on</span>(<span class="hljs-string">&#x27;eventName&#x27;</span>,<span class="hljs-function"><span class="hljs-params">(option)</span>=&gt;</span>&#123;<br>执行的方法，option 为接收到的数据<br>&#125;)<br>&#125;<br>onload()&#123;<br>uni.$<span class="hljs-literal">on</span>(<span class="hljs-string">&#x27;eventName&#x27;</span>,<span class="hljs-function"><span class="hljs-params">(option)</span>=&gt;</span>&#123;<br>执行的方法，option 为接收到的数据<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="32、实现tabbar-切换，内容区域滚动-并且适配底部安全区域"><a href="#32、实现tabbar-切换，内容区域滚动-并且适配底部安全区域" class="headerlink" title="32、实现tabbar 切换，内容区域滚动,并且适配底部安全区域"></a>32、实现tabbar 切换，内容区域滚动,并且适配底部安全区域</h1><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const res <span class="hljs-operator">=</span> uni.getSystemInfoSync()<span class="hljs-comment">;</span><br>res.safeAreaInsets.bottom    底部栏<br></code></pre></td></tr></table></figure><p>通过计算属性，计算出tabbar以及状态栏高度等信息，并计算出滚动内容区域高度。达到适配效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">//页面高度计算</span><br>  <span class="hljs-title function_">contentHeight</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 获取某个元素高度</span><br>    uni.<span class="hljs-title function_">createSelectorQuery</span>().<span class="hljs-title function_">in</span>(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;.tabbar&#x27;</span>).<span class="hljs-title function_">boundingClientRect</span>(<span class="hljs-function">(<span class="hljs-params">rect</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">tabbarHeight</span> = rect.<span class="hljs-property">height</span>   <span class="hljs-comment">//获取tabbar高度</span><br>    &#125;).<span class="hljs-title function_">exec</span>()<br>    <br>    <span class="hljs-keyword">const</span> res = uni.<span class="hljs-title function_">getSystemInfoSync</span>();  <span class="hljs-comment">//获取系统信息</span><br>    <span class="hljs-keyword">let</span> nav = <span class="hljs-number">44</span> + res.<span class="hljs-property">statusBarHeight</span>   <span class="hljs-comment">//微信nav拦高度44px</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">paddingBottom</span>=res.<span class="hljs-property">safeAreaInsets</span>.<span class="hljs-property">bottom</span> +<span class="hljs-string">&#x27;px&#x27;</span>   <br>    <span class="hljs-keyword">return</span> res.<span class="hljs-property">windowHeight</span> -res.<span class="hljs-property">safeAreaInsets</span>.<span class="hljs-property">bottom</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">tabbarHeight</span> - <span class="hljs-number">10</span> - nav + <span class="hljs-string">&#x27;px&#x27;</span><br>  <span class="hljs-comment">//屏幕高度-底部拦高度-tabbar高度-头部高度-10（滚动区域的边距值）+‘px’ 单位，，得到最终的滚动内容区域高度。</span><br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;scroll-view scroll-y=<span class="hljs-string">&quot;true&quot;</span> :style=<span class="hljs-string">&quot;&#123;height: contentHeight,paddingBottom: paddingBottom&#125;&quot;</span>  <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;content-info&quot;</span> scroll-<span class="hljs-keyword">with</span>-animation=<span class="hljs-string">&quot;true&quot;</span><br>    ···<br>&lt;/scroll-view&gt;<br>contentHeight为计算函数所计算出的高度值。<br>paddingBottom 为了适配底部预留的高度，防止出现背景颜色不同。<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">paddingBottom</span>=res.<span class="hljs-property">safeAreaInsets</span>.<span class="hljs-property">bottom</span> +<span class="hljs-string">&#x27;px&#x27;</span>   <br></code></pre></td></tr></table></figure><h1 id="33、滚动到某个位置scroll-view"><a href="#33、滚动到某个位置scroll-view" class="headerlink" title="33、滚动到某个位置scroll-view"></a>33、滚动到某个位置scroll-view</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;scroll-view scroll-y=<span class="hljs-string">&quot;true&quot;</span> :style=<span class="hljs-string">&quot;&#123;height: contentHeight,paddingBottom: paddingBottom&#125;&quot;</span>  <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;content-info&quot;</span> scroll-<span class="hljs-keyword">with</span>-animation=<span class="hljs-string">&quot;true&quot;</span><br>  &lt;view :id=<span class="hljs-string">&#x27;item.id&#x27;</span>&gt;<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex;margin-bottom: 10px&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item.name &#125;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>          &lt;!--富文本--&gt;<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">rich-text</span> <span class="hljs-attr">:nodes</span>=<span class="hljs-string">&quot;item.info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rich-text</span>&gt;</span></span><br>        &lt;/view&gt;<br>&lt;/scroll-view&gt;<br>此时的item.<span class="hljs-property">id</span> 为 <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;JS&quot;</span>,不以数字开头。<br></code></pre></td></tr></table></figure><p>其中关键语句：:scroll-into-view&#x3D;”top”  top为string值也就是需要跳转记录的id值</p><p>！id不能以数字开头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">top</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">selectIndex</span> = item.<span class="hljs-property">id</span><br></code></pre></td></tr></table></figure><p>scroll-with-animation&#x3D;”true”过渡动画效果。</p><h1 id="34、商品分类滚动联动效果"><a href="#34、商品分类滚动联动效果" class="headerlink" title="34、商品分类滚动联动效果"></a>34、商品分类滚动联动效果</h1><p>滚动条</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;scroll-view scroll-y=<span class="hljs-string">&quot;true&quot;</span> :scroll-top=<span class="hljs-string">&quot;top&quot;</span> :style=<span class="hljs-string">&quot;&#123;height: contentHeight,paddingBottom: paddingBottom&#125;&quot;</span>  <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;content-info&quot;</span> scroll-<span class="hljs-keyword">with</span>-animation=<span class="hljs-string">&quot;true&quot;</span><br>              @scroll=<span class="hljs-string">&quot;switchaaa&quot;</span>  &gt;  switchaaa方法监听滚动<br>&lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;test&quot;</span> style=<span class="hljs-string">&quot;margin:0 10px&quot;</span> v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in tabbarList&quot;</span> :key=<span class="hljs-string">&quot;item&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&#x27;item.id&#x27;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex;margin-bottom: 10px ;&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item.name &#125;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-comment">&lt;!--          富文本--&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">rich-text</span> <span class="hljs-attr">:nodes</span>=<span class="hljs-string">&quot;item.info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rich-text</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>      &lt;/view&gt;<br></code></pre></td></tr></table></figure><p>tab栏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;view style=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;tabbar&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-back&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;select:selectIndex===index&#125;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;tabbarSelect(item,index)&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;item.id&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in tabbarList&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>&lt;/view&gt;<br></code></pre></td></tr></table></figure><p>核心代码，，通过下面代码获取上边tab栏的left 值存数组</p><p>获取滚动列表的top 值存数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> query = uni.<span class="hljs-title function_">createSelectorQuery</span>().<span class="hljs-title function_">in</span>(<span class="hljs-variable language_">this</span>);<br>query.<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&#x27;.text-back&#x27;</span>).<span class="hljs-title function_">boundingClientRect</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">leftDomsTop</span> = data.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v.<span class="hljs-property">left</span>)<br>&#125;).<span class="hljs-title function_">exec</span>();<br>query.<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&#x27;.test&#x27;</span>).<span class="hljs-title function_">boundingClientRect</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">rightDomsTop</span> = data.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v.<span class="hljs-property">top</span>-<span class="hljs-number">132</span>)  <span class="hljs-comment">//根据实际情况调整</span><br>&#125;).<span class="hljs-title function_">exec</span>();<br></code></pre></td></tr></table></figure><p>tab拦切换时候方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">tabbarSelect</span>(<span class="hljs-params">item,index</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">selectIndex</span> = index    <br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = index<br>   <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">利用监听实现对快速tab切换的节流操作<br><span class="hljs-attr">watch</span>: &#123;<br>  <span class="hljs-title function_">status</span>(<span class="hljs-params">old</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">top</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">rightDomsTop</span>[old]<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>监听滚动位置，与滚动top判断，如果小于则切换tab为当前的 top索引值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-title function_">switchaaa</span>(<span class="hljs-params">e</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">rightDomsTop</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">v, k</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (v &lt; e.<span class="hljs-property">detail</span>.<span class="hljs-property">scrollTop</span> +<span class="hljs-number">11</span>) &#123; <span class="hljs-comment">//参数根据实际情况调整</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">selectIndex</span> = k<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>  &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">可利用伪类将最后一个（第三个）类别高度铺满，避免出现滚动到最后一列，tab显示为第二的bug<br>.content-info <span class="hljs-symbol">:nth-of-type</span>(<span class="hljs-number">3</span>)&#123;  <span class="hljs-regexp">//content</span>-info 的第三个子元素<br>  <span class="hljs-symbol">height:</span> <span class="hljs-number">100</span>%;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="35、获取当前日期的前一周"><a href="#35、获取当前日期的前一周" class="headerlink" title="35、获取当前日期的前一周"></a>35、获取当前日期的前一周</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getTime</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">let</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>      <span class="hljs-keyword">let</span> month = today.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span><br>      <span class="hljs-comment">// 获取一周前的日期</span><br>      <span class="hljs-keyword">let</span> startOfWeek = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(today.<span class="hljs-title function_">setDate</span>(today.<span class="hljs-title function_">getDate</span>() - <span class="hljs-number">6</span>));<br>      <span class="hljs-comment">// 一周时间</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) &#123;<br>        <span class="hljs-keyword">let</span> day = <span class="hljs-title class_">String</span>(month) + <span class="hljs-string">&#x27;-&#x27;</span> + (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(startOfWeek).<span class="hljs-title function_">getDate</span>() + j)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dayList</span>.<span class="hljs-title function_">push</span>(day)<br>      &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure><h1 id="36、手搓日历组件"><a href="#36、手搓日历组件" class="headerlink" title="36、手搓日历组件"></a>36、手搓日历组件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;calendar&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;calendar-weekdays&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;weekday&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;day in weekdays&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;day&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;weekdayName&quot;</span>&gt;</span>&#123;&#123; day &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>  &lt;!--      日期--&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;calendar-days&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;day-row&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(week, index) in currentMonthDates&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;selectIndex===index&amp;&amp;selectdayIndex===dayIndex&amp;&amp;day?&#x27;day1&#x27;:&#x27;day&#x27;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(day, dayIndex) in week&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;dayIndex&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;info(index,dayIndex)&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;day &gt; 0&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dayName&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                   <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;color:selectIndex===index&amp;&amp;selectdayIndex===dayIndex?&#x27;#2C7EFC&#x27;:&#x27;&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;&#123; day &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>&#123;&#123; info[index][dayIndex]&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--            &lt;view :class=&quot;[&#x27;work&#x27;,dayIndex&lt;2?&#x27;active&#x27;:&#x27;active1&#x27;]&quot;&gt;&#123;&#123; index &#125;&#125;&lt;/view&gt;--&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="hljs-comment">//获取日历列表的日期信息，与真实日期信息统一</span><br> <span class="hljs-title function_">getCurrentMonthDates</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentYear</span> = now.<span class="hljs-title function_">getFullYear</span>();<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonth</span> = now.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">let</span> firstDayOfMonth = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentYear</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonth</span> - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">let</span> lastDayOfMonth = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentYear</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonth</span>, <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">let</span> dayOfWeek = firstDayOfMonth.<span class="hljs-title function_">getDay</span>();<br>      <span class="hljs-keyword">let</span> daysInMonth = lastDayOfMonth.<span class="hljs-title function_">getDate</span>();<br>      <span class="hljs-keyword">let</span> date = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonthDates</span>[i] = [];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) &#123;<br>          <span class="hljs-keyword">if</span> (i === <span class="hljs-number">0</span> &amp;&amp; j &lt; dayOfWeek) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonthDates</span>[i][j] = <span class="hljs-string">&#x27;&#x27;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (date &lt;= daysInMonth) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonthDates</span>[i][j] = date++;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonthDates</span>[i][j] = <span class="hljs-string">&#x27;&#x27;</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;,<br>  <span class="hljs-title function_">getDateF</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 创建一个映射来快速查找 time -&gt; type</span><br>      <span class="hljs-keyword">const</span> timeTypeMap = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lateAndEarlyList</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">map, item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> time = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">timeSelect</span>(item.<span class="hljs-property">time</span>)[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (time) &#123;<br>          map[time] = item.<span class="hljs-property">type</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> map;<br>      &#125;, &#123;&#125;);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(timeTypeMap)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonthDates</span>.<span class="hljs-property">length</span>; j++) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>[j]) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>[j] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonthDates</span>[j].<span class="hljs-property">length</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 确保 info[j] 是一个与 currentMonthDates[j] 长度相同的空字符串数组</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonthDates</span>[j].<span class="hljs-property">length</span>; i++) &#123;<br>          <span class="hljs-keyword">const</span> time = <span class="hljs-title class_">String</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonthDates</span>[j][i]);<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>[j][i] = timeTypeMap[time] || <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// 使用映射来查找 type，如果找不到则设置为空字符串</span><br>        &#125;<br>      &#125;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">show</span>=<span class="hljs-literal">true</span><br>      <span class="hljs-comment">// j为纵向</span><br>      <span class="hljs-comment">// i为横向</span><br>      <span class="hljs-comment">// for (let j = 0; j &lt; this.currentMonthDates.length; j++) &#123;</span><br>      <span class="hljs-comment">//   for (let i = 0; i &lt; this.currentMonthDates[j].length; i++) &#123;</span><br>      <span class="hljs-comment">//     for (let k = 0; k &lt; this.lateAndEarlyList.length; k++) &#123;</span><br>      <span class="hljs-comment">//        this.lateAndEarlyList.filter(() =&gt; &#123;</span><br>      <span class="hljs-comment">//         if (this.timeSelect(this.lateAndEarlyList[k].time)[0] === String(this.currentMonthDates[j][i])) &#123;</span><br>      <span class="hljs-comment">//           this.info[j][i] = this.lateAndEarlyList[k].type</span><br>      <span class="hljs-comment">//         &#125;</span><br>      <span class="hljs-comment">//         if (this.info[j][i])&#123;</span><br>      <span class="hljs-comment">//         &#125;else &#123;</span><br>      <span class="hljs-comment">//           this.info[j][i]=&quot;&quot;</span><br>      <span class="hljs-comment">//         &#125;</span><br>      <span class="hljs-comment">//       &#125;);</span><br>      <span class="hljs-comment">//</span><br>      <span class="hljs-comment">//       // return this.timeSelect(this.lateAndEarlyList[k].time)[0] ===String(this.currentMonthDates[j][i]);</span><br>      <span class="hljs-comment">//       // if (this.timeSelect(this.lateAndEarlyList[k].time)[0] === String(this.currentMonthDates[j][i])) &#123;</span><br>      <span class="hljs-comment">//       //   console.log(&quot;this.lateAndEarlyList[k].time&quot;,this.lateAndEarlyList[k].type)</span><br>      <span class="hljs-comment">//       //   this.info[j][i] =this.lateAndEarlyList[k].type</span><br>      <span class="hljs-comment">//       // &#125;else</span><br>      <span class="hljs-comment">//       // if (this.info[j][i])&#123;</span><br>      <span class="hljs-comment">//       //   this.info[j][i] = &quot;this.lateAndEarlyList[k].type&quot;</span><br>      <span class="hljs-comment">//       // &#125;</span><br>      <span class="hljs-comment">//       // console.log(&quot;this.lateAndEarlyList&quot;,this.timeSelect(this.lateAndEarlyList[k].time)[0])</span><br>      <span class="hljs-comment">//       // console.log(&quot;this.currentMonthDates[j][i]&quot;,String(this.currentMonthDates[j][i]))</span><br>      <span class="hljs-comment">//       // let lastItem = Array(filteredItems[filteredItems.length - 1]);</span><br>      <span class="hljs-comment">//       // if (lastItem[0]) &#123;</span><br>      <span class="hljs-comment">//       //   this.info[i] = lastItem[0].type</span><br>      <span class="hljs-comment">//       // &#125;</span><br>      <span class="hljs-comment">//     &#125;</span><br>      <span class="hljs-comment">//   &#125;</span><br>      <span class="hljs-comment">// &#125;</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>)<br>    &#125;,<br></code></pre></td></tr></table></figure><h1 id="数据匹配"><a href="#数据匹配" class="headerlink" title="数据匹配"></a>数据匹配</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个映射来快速查找 time -&gt; type</span><br><span class="hljs-keyword">const</span> timeTypeMap = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lateAndEarlyList</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">map, item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> time = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">timeSelect</span>(item.<span class="hljs-property">time</span>)[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">if</span> (time) &#123;<br>    map[time] = item.<span class="hljs-property">type</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> map;<br>&#125;, &#123;&#125;);<br><span class="hljs-keyword">const</span> timeTypeMap2 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lateAndEarlyList</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">map, item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> time = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">timeSelect</span>(item.<span class="hljs-property">time</span>)[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">if</span> (time) &#123;<br>    map[time] = item.<span class="hljs-property">time</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> map;<br><br>&#125;, &#123;&#125;);<br><span class="hljs-comment">// console.log(timeTypeMap2)</span><br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonthDates</span>.<span class="hljs-property">length</span>; j++) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>[j]) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>[j] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonthDates</span>[j].<span class="hljs-property">length</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 确保 info[j] 是一个与 currentMonthDates[j] 长度相同的空字符串数组</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonthDates</span>[j].<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> time = <span class="hljs-title class_">String</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentMonthDates</span>[j][i]);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>[j][i] = &#123;<span class="hljs-attr">time</span>: timeTypeMap2[time] || <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">type</span>: timeTypeMap[time] || <span class="hljs-string">&#x27;&#x27;</span>&#125;; <span class="hljs-comment">// 使用映射来查找 type，如果找不到则设置为空字符串</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>[<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-09 06:25:22&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>    <span class="hljs-string">&quot;leDate&quot;</span>: <span class="hljs-string">&quot;2024-05-09 06:25:22 ~ 2024-05-09 20:49:55&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-10 17:07:38&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-11 08:25:22&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>    <span class="hljs-string">&quot;leDate&quot;</span>: <span class="hljs-string">&quot;2024-05-11 08:25:22 ~ 2024-05-11 18:10:22&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-12 07:10:22&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>    <span class="hljs-string">&quot;leDate&quot;</span>: <span class="hljs-string">&quot;2024-05-12 07:10:22 ~ 2024-05-12 19:26:22&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-11 16:37:57&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-13 10:08:09&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,<br>    <span class="hljs-string">&quot;leDate&quot;</span>: <span class="hljs-string">&quot;2024-05-13 10:08:09 ~ 2024-05-13 14:35:41&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-15 08:30:22&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>    <span class="hljs-string">&quot;leDate&quot;</span>: <span class="hljs-string">&quot;2024-05-15 08:30:22 ~ 2024-05-15 18:00:22&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-16 09:31:37&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,<br>    <span class="hljs-string">&quot;leDate&quot;</span>: <span class="hljs-string">&quot;2024-05-16 09:31:37 ~ 2024-05-16 16:32:49&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-17 18:00&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;-1&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-20 18:00&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;-1&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-21 11:48:49&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,<br>    <span class="hljs-string">&quot;leDate&quot;</span>: <span class="hljs-string">&quot;2024-05-21 11:48:49 ~ 2024-05-21 14:06:05&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-22 09:51:03&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-23 05:49:21&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-24 18:00&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;-1&quot;</span><br>  &#125;,<br>]<br><br>和这个数组进行匹配，（生成的当月日历数据）<br>[<br>    [<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-number">1</span>,<br>        <span class="hljs-number">2</span>,<br>        <span class="hljs-number">3</span>,<br>        <span class="hljs-number">4</span><br>    ],<br>    [<br>        <span class="hljs-number">5</span>,<br>        <span class="hljs-number">6</span>,<br>        <span class="hljs-number">7</span>,<br>        <span class="hljs-number">8</span>,<br>        <span class="hljs-number">9</span>,<br>        <span class="hljs-number">10</span>,<br>        <span class="hljs-number">11</span><br>    ],<br>    [<br>        <span class="hljs-number">12</span>,<br>        <span class="hljs-number">13</span>,<br>        <span class="hljs-number">14</span>,<br>        <span class="hljs-number">15</span>,<br>        <span class="hljs-number">16</span>,<br>        <span class="hljs-number">17</span>,<br>        <span class="hljs-number">18</span><br>    ],<br>    [<br>        <span class="hljs-number">19</span>,<br>        <span class="hljs-number">20</span>,<br>        <span class="hljs-number">21</span>,<br>        <span class="hljs-number">22</span>,<br>        <span class="hljs-number">23</span>,<br>        <span class="hljs-number">24</span>,<br>        <span class="hljs-number">25</span><br>    ],<br>    [<br>        <span class="hljs-number">26</span>,<br>        <span class="hljs-number">27</span>,<br>        <span class="hljs-number">28</span>,<br>        <span class="hljs-number">29</span>,<br>        <span class="hljs-number">30</span>,<br>        <span class="hljs-number">31</span>,<br>        <span class="hljs-string">&quot;&quot;</span><br>    ],<br>    [<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span><br>    ]<br>]<br>最终得到的数组为<br>[<br>    [<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    ],<br>    [<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-10 17:07:38&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-11 16:37:57&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>        &#125;<br>    ],<br>    [<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-12 07:10:22&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;3&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-13 10:08:09&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;2&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-15 08:30:22&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;3&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-16 09:31:37&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;2&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-17 18:00&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;-1&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    ],<br>    [<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-20 18:00&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;-1&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-21 11:48:49&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;2&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-22 09:51:03&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-23 05:49:21&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-24 18:00&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;-1&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    ],<br>    [<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-27 15:57:53&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;2&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;2024-05-28 18:00&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;-1&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    ],<br>    [<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    ],<br>    []<br>]<br><br></code></pre></td></tr></table></figure><p>实现了将两个数组进行匹配，展示。</p><h1 id="37、H5页面u-popup-组件弹出后滚动穿透"><a href="#37、H5页面u-popup-组件弹出后滚动穿透" class="headerlink" title="37、H5页面u-popup 组件弹出后滚动穿透"></a>37、H5页面u-popup 组件弹出后滚动穿透</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//加个这个控制就好了</span><br><span class="hljs-title function_">guidShow</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;<br>  <span class="hljs-comment">//在这里添加一句样式    ㄟ(≧◇≦)ㄏ</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span> = !newValue ? <span class="hljs-string">&quot;auto&quot;</span> : <span class="hljs-string">&quot;hidden&quot;</span>;<br>&#125;,<br></code></pre></td></tr></table></figure><h1 id="38、手机号隐藏中间四位"><a href="#38、手机号隐藏中间四位" class="headerlink" title="38、手机号隐藏中间四位"></a>38、手机号隐藏中间四位</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">电话号码隐藏中间<span class="hljs-number">4</span>位<br><span class="hljs-keyword">var</span> phonenumber=<span class="hljs-number">15054054532</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)$/</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">phonenum</span>=phonenumber.<span class="hljs-title function_">replace</span>(reg, <span class="hljs-string">&quot;$1****$2&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="39、最简单的-瀑布流css样式"><a href="#39、最简单的-瀑布流css样式" class="headerlink" title="39、最简单的 瀑布流css样式"></a>39、最简单的 瀑布流css样式</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;waterfall&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;waterfall-item&quot;</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">feed</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 这里放置图片和内容 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.image</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 其他内容 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.waterfall</span> &#123;<br>  <span class="hljs-attribute">column-count</span>: <span class="hljs-number">2</span>;<br>  <span class="hljs-attribute">column-gap</span>: <span class="hljs-number">10px</span>;<br>&#125;<br> <br><span class="hljs-selector-class">.waterfall-item</span> &#123;<br>  <span class="hljs-attribute">break-inside</span>: avoid;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>&#125;<br> <br><span class="hljs-selector-class">.waterfall-item</span> image &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: auto;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br></code></pre></td></tr></table></figure><p>40、canvas 与popup 同时使用时 遇到层级问题</p><p>可考虑将canvas 设置为2d模式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;canvas <span class="hljs-attribute">canvas-id</span>=<span class="hljs-string">&quot;myid3&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;myid3&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;arcbar&quot;</span>  <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;2d&quot;</span> @<span class="hljs-attribute">tap</span>=<span class="hljs-string">&quot;tap&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">arcbar(id, <span class="hljs-keyword">data</span>, color) &#123;<br>  <span class="hljs-keyword">const</span> query = uni.createSelectorQuery().<span class="hljs-keyword">in</span>(<span class="hljs-keyword">this</span>);<br>  query.select(<span class="hljs-string">&#x27;#&#x27;</span> + id).fields(&#123;node: <span class="hljs-literal">true</span>, size: <span class="hljs-literal">true</span>&#125;).exec(res =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (res[<span class="hljs-number">0</span>]) &#123;<br>      <span class="hljs-keyword">const</span> canvas = res[<span class="hljs-number">0</span>].node;<br>      <span class="hljs-keyword">const</span> ctx = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>      canvas.width = res[<span class="hljs-number">0</span>].width * <span class="hljs-keyword">this</span>.pixelRatio;<br>      canvas.height = res[<span class="hljs-number">0</span>].height * <span class="hljs-keyword">this</span>.pixelRatio;<br>      uChartsInstance[id] = new uCharts(&#123;<br>        type: <span class="hljs-string">&quot;arcbar&quot;</span>,<br>        context: ctx,<br>        width: <span class="hljs-keyword">this</span>.arcbarWidth * <span class="hljs-keyword">this</span>.pixelRatio,<br>        height: <span class="hljs-keyword">this</span>.arcbarHeight * <span class="hljs-keyword">this</span>.pixelRatio,<br>        series: <span class="hljs-keyword">data</span>.series,<br>        pixelRatio: <span class="hljs-keyword">this</span>.pixelRatio,<br>        animation: <span class="hljs-literal">true</span>,<br>        background: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        color: color,<br>        padding: undefined,<br>        title: &#123;<br>          name: parseFloat((Number(<span class="hljs-keyword">data</span>.series[<span class="hljs-number">0</span>].<span class="hljs-keyword">data</span> * <span class="hljs-number">100</span>).toFixed(<span class="hljs-number">2</span>))) + <span class="hljs-string">&#x27;%&#x27;</span>,<br>          fontSize: uni.upx2px(<span class="hljs-number">32</span>),<br>          color: <span class="hljs-string">&quot;#9C9C9C&quot;</span><br>        &#125;,<br>        extra: &#123;<br>          arcbar: &#123;<br>            type: <span class="hljs-string">&quot;circle&quot;</span>,<br>            width: <span class="hljs-number">10</span>,<br>            backgroundColor: <span class="hljs-string">&quot;#E9E9E9&quot;</span>,<br>            linearType: <span class="hljs-string">&quot;custom&quot;</span>,<br>            customColor: [color[<span class="hljs-number">1</span>], color[<span class="hljs-number">0</span>]],<br>            startAngle: <span class="hljs-number">1.5</span>,<br>            endAngle: <span class="hljs-number">0.25</span>,<br>            gap: <span class="hljs-number">2</span>,<br>          &#125;<br>        &#125;<br>      &#125;);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      console.error(<span class="hljs-string">&quot;[uCharts]: 未获取到 context&quot;</span>);<br>    &#125;<br>  &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><h1 id="40、字符串补齐"><a href="#40、字符串补齐" class="headerlink" title="40、字符串补齐"></a>40、字符串补齐</h1><p>我们想实现例如订单号等字符串补齐 0，我们可以使用 String.padStart(3,’0’)的方式</p><p>​例</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> e=<span class="hljs-number">2</span><br><span class="hljs-keyword">let</span> String=<span class="hljs-constructor">String(<span class="hljs-params">e</span>)</span>.pad<span class="hljs-constructor">Start(3, &#x27;0&#x27;)</span>; <span class="hljs-comment">//此时 String输出为 002</span><br><span class="hljs-keyword">let</span> String=<span class="hljs-constructor">String(<span class="hljs-params">e</span>)</span>.pad<span class="hljs-constructor">Start(2, &#x27;0&#x27;)</span>; <span class="hljs-comment">//此时 String输出为 02</span><br><span class="hljs-keyword">let</span> e=<span class="hljs-number">12</span><br><span class="hljs-keyword">let</span> String=<span class="hljs-constructor">String(<span class="hljs-params">e</span>)</span>.pad<span class="hljs-constructor">Start(3, &#x27;0&#x27;)</span>; <span class="hljs-comment">//此时 String输出为 012</span><br><span class="hljs-keyword">let</span> String=<span class="hljs-constructor">String(<span class="hljs-params">e</span>)</span>.pad<span class="hljs-constructor">Start(2, &#x27;0&#x27;)</span>; <span class="hljs-comment">//此时 String输出为 12</span><br>解释<br>pad<span class="hljs-constructor">Start(<span class="hljs-params">maxLength</span>,<span class="hljs-params">fillString</span>)</span><br>maxLength 为补齐的最大长度<br>fillString 为补齐的字符串<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>uni-app</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uni-app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信支付</title>
    <link href="/2023/09/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <url>/2023/09/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="微信支付下单流程"><a href="#微信支付下单流程" class="headerlink" title="微信支付下单流程"></a>微信支付下单流程</h1><p>前端提交订单至后端—-&gt;&gt;&gt;&gt;后端处理及调用微信支付的统一支付API生成预付单，并返回预付单的信息—-&gt;&gt;&gt;&gt;再次由后端处理预付单信息，生成JSAPI调用的参数并为其签名—-&gt;&gt;&gt;&gt;用户发起支付—-&gt;&gt;&gt;&gt;由微信支付系统检查参数—-&gt;&gt;&gt;&gt;成功支付后由微信支付系统告知商户（后端）支付结果—-&gt;&gt;&gt;&gt;后端再修改相关订单状态信息—-&gt;&gt;&gt;&gt;前端读取信息更新</p><p><img src="/img/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98.jpg"></p><h1 id="微信扫码接口"><a href="#微信扫码接口" class="headerlink" title="微信扫码接口"></a>微信扫码接口</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">scanCode</span><span class="hljs-params">()</span></span>&#123;<br>uni<span class="hljs-selector-class">.scanCode</span>(&#123;<br><span class="hljs-function"><span class="hljs-title">success</span><span class="hljs-params">(res)</span></span>&#123;<br>console<span class="hljs-selector-class">.log</span>(res) <span class="hljs-comment">//接口获取的所有信息</span><br>&#125;<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th><th align="right"></th></tr></thead><tbody><tr><td align="left">参数名</td><td align="left">类型</td><td align="left">必填</td><td align="left">说明</td><td align="right">平台差异说明</td></tr><tr><td align="left">onlyFromCamera</td><td align="left">Boolean</td><td align="left">否</td><td align="left">是否只能从相机扫码，不允许从相册选择图片</td><td align="right">字节跳动小程序、百度小程序、支付宝小程序不支持此参数</td></tr><tr><td align="left">scanType</td><td align="left">Array</td><td align="left">否</td><td align="left">扫码类型，参考下方<code>scanType的合法值</code></td><td align="right">字节跳动小程序不支持此参数</td></tr><tr><td align="left">autoDecodeCharset</td><td align="left">Boolean</td><td align="left">否</td><td align="left">是否启用自动识别字符编码功能，默认为否</td><td align="right">App</td></tr><tr><td align="left">autoZoom</td><td align="left">Boolean</td><td align="left">否</td><td align="left">是否启用自动放大，默认启用</td><td align="right">仅 App-Android (3.5.4+) 支持</td></tr><tr><td align="left">barCodeInput</td><td align="left">Boolean</td><td align="left">否</td><td align="left">是否支持手动输入条形码</td><td align="right">仅飞书小程序（V3.14.0）支持</td></tr><tr><td align="left">hideAlbum</td><td align="left">Boolean</td><td align="left">否</td><td align="left">是否隐藏相册（不允许从相册选择图片），只能从相机扫码。默认值为 false。</td><td align="right">仅支付宝小程序支持</td></tr><tr><td align="left">success</td><td align="left">Function</td><td align="left">否</td><td align="left">接口调用成功的回调，返回内容详见返回参数说明。</td><td align="right"></td></tr><tr><td align="left">fail</td><td align="left">Function</td><td align="left">否</td><td align="left">接口调用失败的回调函数（识别失败、用户取消等情况下触发）</td><td align="right"></td></tr><tr><td align="left">complete</td><td align="left">Function</td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td><td align="right"></td></tr></tbody></table><p><strong>scanType的合法值</strong></p><table><thead><tr><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">barCode</td><td align="left">一维码</td></tr><tr><td align="left">qrCode</td><td align="left">二维码</td></tr><tr><td align="left">datamatrix</td><td align="left">Data Matrix 码</td></tr><tr><td align="left">pdf417</td><td align="left">PDF417 条码</td></tr></tbody></table><p><strong>success 返回参数说明</strong></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">平台差异说明</th></tr></thead><tbody><tr><td align="left">result</td><td align="left">所扫码的内容</td><td align="left"></td></tr><tr><td align="left">scanType</td><td align="left">所扫码的类型</td><td align="left">App、微信小程序、百度小程序、QQ小程序、京东小程序、支付宝小程序</td></tr><tr><td align="left">charSet</td><td align="left">所扫码的字符集</td><td align="left">App、微信小程序、百度小程序(所扫码的字符集，仅支持 Android 系统)、QQ小程序、京东小程序</td></tr><tr><td align="left">path</td><td align="left">当所扫的码为当前应用的合法二维码时，会返回此字段，内容为二维码携带的 path。</td><td align="left">微信小程序、QQ小程序、京东小程序</td></tr><tr><td align="left">rawData</td><td align="left">原始数据，base64 编码</td><td align="left">微信小程序、QQ小程序、京东小程序、支付宝小程序</td></tr><tr><td align="left">code</td><td align="left">扫码所得数据</td><td align="left">支付宝小程序</td></tr><tr><td align="left">qrCode</td><td align="left">扫描二维码时返回二维码数据</td><td align="left">支付宝小程序</td></tr><tr><td align="left">barCode</td><td align="left">扫描条形码时返回条形码数据</td><td align="left">支付宝小程序</td></tr><tr><td align="left">imageChannel</td><td align="left">来源</td><td align="left">支付宝小程序</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>微信支付</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何利用Vue监听页面滚动实现导航栏吸附</title>
    <link href="/2023/05/26/Vue%E5%9B%BA%E5%AE%9A%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
    <url>/2023/05/26/Vue%E5%9B%BA%E5%AE%9A%E5%AF%BC%E8%88%AA%E6%A0%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;index-layout-bodyer&quot;</span> style=<span class="hljs-string">&quot;height: 1100px;overflow-y: auto&quot;</span> <span class="hljs-keyword">ref</span>=<span class="hljs-string">&quot;scrollview&quot;</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>定义<span class="hljs-keyword">ref</span>到能够出现滚动条的<span class="hljs-keyword">div</span>中<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">const</span> scrollview = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>[<span class="hljs-string">&#x27;scrollview&#x27;</span>]<br>   <span class="hljs-comment">// 添加滚动监听，该滚动监听了拖拽滚动条</span><br>   <span class="hljs-comment">// 尾部的 true 最好加上，我这边测试没加 true ，拖拽滚动条无法监听到滚动，加上则可以监听到拖拽滚动条滚动回调</span><br>   scrollview.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollChange</span>, <span class="hljs-literal">true</span>)<br>   &#125; <br> 在mounted函数中添加对滚动的监听，监听事件为scrollChange<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">scrollChange</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">//获取滚动</span><br>      <span class="hljs-keyword">const</span> scrollview = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>[<span class="hljs-string">&#x27;scrollview&#x27;</span>]<br>      <span class="hljs-comment">//获取当前滚动的值</span><br>      <span class="hljs-keyword">let</span> scrollTop = scrollview.<span class="hljs-property">scrollTop</span>;<br>      <span class="hljs-keyword">if</span> (scrollTop &gt; <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">classactive</span> = <span class="hljs-literal">true</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">classactive</span> = <span class="hljs-literal">false</span><br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">//在事件中定义对页面元素css样式的更改。</span><br></code></pre></td></tr></table></figure><p>对相关页面样式进行更改，可以使用:class 绑定样式通过事件中改变布尔值判断标签是否启用该样式。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue页面监听</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2023/02/25/%E4%BB%80%E4%B9%88%E6%98%AFVue/"/>
    <url>/2023/02/25/%E4%BB%80%E4%B9%88%E6%98%AFVue/</url>
    
    <content type="html"><![CDATA[<p>Vue是一款用于构建用户界面的JavaScript框架，提供一套声明式，组件化的编程模型。简化了Dom的操作，是一个响应式数据驱动，帮助高效的开发用户界面。</p><h1 id="1、模板语法"><a href="#1、模板语法" class="headerlink" title="1、模板语法"></a>1、模板语法</h1><p>基于HTML模板语法，能够声明式的将组件实例的数据绑定呈现到DOM上。</p><h2 id="1-1文本插值"><a href="#1-1文本插值" class="headerlink" title="1.1文本插值"></a>1.1文本插值</h2><p>最基本的数据绑定语法，利用双大括号进行数据的绑定，标签会被 替换成组件实例中msg属性值，同时每次属性更改，也会进行同步更新。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-once</span>&gt;</span>Message：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  //一次性插值</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>&gt;</span>Message：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> //插入原始的html代码。</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>===<span class="hljs-string">&quot;0&quot;</span>?<span class="hljs-string">&#x27;ture&#x27;</span>,<span class="hljs-string">&quot;false&quot;</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> //插入JavaScript表达式。 </span><br></code></pre></td></tr></table></figure><h2 id="1-2条件渲染"><a href="#1-2条件渲染" class="headerlink" title="1.2条件渲染"></a>1.2条件渲染</h2><h3 id="1-2-1-v-if"><a href="#1-2-1-v-if" class="headerlink" title="1.2.1 v-if"></a>1.2.1 v-if</h3><p>在相邻兄弟节点之间进行if-else 判断</p><p>eg：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;男人&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">else</span>-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;女人&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">else</span>&gt;都不是&lt;/<span class="hljs-keyword">div</span>&gt;<br><br></code></pre></td></tr></table></figure><p>真正的条件渲染，在条件数值发生改变时候，模板会随之改变，DOM也将会被销毁重建。</p><p>是惰性的，直到条件第一次变为真的时候，才会开始进行条件块的渲染。</p><h3 id="1-2-2-v-show"><a href="#1-2-2-v-show" class="headerlink" title="1.2.2 v-show"></a>1.2.2 v-show</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> v-show=<span class="hljs-string">&quot;handle&quot;</span>&gt;v-show&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>带有v-show 的元素始终会被渲染出来，并且将其保留在DOM中。</p><p>v-show 工作原理，只是简单的切换了元素CSS属性Display 使其隐藏。</p><h3 id="1-2-3-v-from-列表渲染"><a href="#1-2-3-v-from-列表渲染" class="headerlink" title="1.2.3 v-from (列表渲染)"></a>1.2.3 v-from (列表渲染)</h3><p>​<!--item为classmates中的数组，index为索引值，，，：key为关键字。（提高渲染速度）--></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item , index) in classmates&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span> </span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-xquery">&#123;&#123;index&#125;</span><span class="language-xml">&#125;,</span><span class="language-xquery">&#123;&#123;<span class="hljs-type">item</span><span class="hljs-built_in">.name</span>&#125;</span><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>data() &#123;<br><span class="hljs-keyword">return</span> &#123;<br>handle:<span class="hljs-built_in"> true</span>,<br>classmates: [&#123;<br><span class="hljs-built_in">id</span>: <span class="hljs-number">1</span>,<br><span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;yuhang&quot;</span><br>&#125;, &#123;<br><span class="hljs-built_in">id</span>: <span class="hljs-number">2</span>,<br><span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;yuhang2&quot;</span><br>&#125;,<br>&#123;<br><span class="hljs-built_in">id</span>: <span class="hljs-number">3</span>,<br><span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;yuhang3&quot;</span><br>&#125;<br>]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、数据"><a href="#2、数据" class="headerlink" title="2、数据"></a>2、数据</h1><h2 id="2-1-Props"><a href="#2-1-Props" class="headerlink" title="2.1 Props"></a>2.1 Props</h2><h4 id="（父组件传值给子组件）"><a href="#（父组件传值给子组件）" class="headerlink" title="（父组件传值给子组件）"></a>（父组件传值给子组件）</h4><p>从父组件向子组件传参的接口（从父–&gt;子）</p><pre><code class="hljs">父组件&lt;template&gt;&lt;div&gt;    &lt;prop-child parent-name=&quot;向子组件传递值&quot;&gt;&lt;/prop-child&gt; //引用子组件到模板&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import propChild from &#39;./propChild&#39;   //引入子组件    export default&#123;        components: &#123;   //注册子组件            propChild        &#125;,    &#125;&lt;/script&gt;子组件&lt;template&gt;    &lt;div&gt;这是从父足组件传递的值：&#123;&#123;parentName&#125;&#125; 由子组件显示&lt;/div&gt;&lt;/template&gt;&lt;script&gt;    export default&#123;            第一种：props:[&quot;parentName&quot;]  //父组件传递值            第二种：props：&#123;&quot;age&quot;:&#123;                type:number,                required:ture //定义为必传属性                default:18 //定义一个默认值        &#125;        &#125; //定义为对象，限制age的属性为number类型。    &#125;&lt;/script&gt;</code></pre><p>props 传值无法进行修改，可以通过this 读取<br>可以通过data去间接性的修改。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">Name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">props</span>:[<span class="hljs-string">&quot;parentName&quot;</span>]  <span class="hljs-comment">//父组件传递值  使用[]代表仅接受数值</span></span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title class_">Name</span>=<span class="hljs-variable language_">this</span>.<span class="hljs-property">parentName</span>   <span class="hljs-comment">//随后可通过方法进行Name的修改，达到一个间接性修改</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125; <span class="hljs-comment">//定义为对象，限制age的属性为number类型。</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>传递数据为单向数据流 （父组件—子组件）</p><p>或者通过watch监听函数监听props数值变化动态赋值给自定义的新变量</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe">props：[<span class="hljs-string">&quot;message&quot;</span>]  <span class="hljs-comment">//由父组件传递过来</span><br>watch: <span class="hljs-type"></span>&#123;<br>message: <span class="hljs-type">function</span>(<span class="hljs-keyword">new</span><span class="hljs-type">Val</span>) &#123;<br><span class="hljs-built_in">this</span>.value = <span class="hljs-keyword">new</span><span class="hljs-type">Val</span>; <span class="hljs-comment">//newVal即是从父组件传递过来的值</span><br>console.log(<span class="hljs-built_in">this</span>.value)<br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="2-1-1-属性检验"><a href="#2-1-1-属性检验" class="headerlink" title="2.1.1 属性检验"></a>2.1.1 属性检验</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart">parentName: &#123;<br>type:<span class="hljs-built_in">String</span>,  <span class="hljs-comment">//类型检查  null和undefined 会通过任何类型验证</span><br><span class="hljs-keyword">required</span>:<span class="hljs-keyword">true</span>,<span class="hljs-comment">//是否必填</span><br><span class="hljs-keyword">default</span>:<span class="hljs-string">&quot;默认值&quot;</span>, <span class="hljs-comment">//默认值</span><br>validator(value)&#123; <span class="hljs-comment">//自定义校验函数</span><br><span class="hljs-keyword">const</span> names=[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>];<br><span class="hljs-keyword">return</span> names.indexOf(value) !==<span class="hljs-number">-1</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-Data"><a href="#2-2-Data" class="headerlink" title="2.2 Data"></a>2.2 Data</h2><pre><code class="hljs">data() &#123;        return &#123;            handle: true,            classmates: [&#123;                    id: 1,                    name: &quot;yuhang&quot;                &#125;, &#123;                    id: 2,                    name: &quot;yuhang2&quot;                &#125;,                &#123;                    id: 3,                    name: &quot;yuhang3&quot;                &#125;            ]        &#125;    &#125;,</code></pre><p>这便是一个Data 函数，必须由return</p><h2 id="2-3-计算属性"><a href="#2-3-计算属性" class="headerlink" title="2.3 计算属性"></a>2.3 计算属性</h2><p>通过计算属性计算多个加值按钮的值的总和</p><pre><code class="hljs">&lt;button @click=&quot;add(1)&quot;&gt;+++&lt;/button&gt;&lt;div&gt;计算属性：&#123;&#123;count&#125;&#125;&lt;/div&gt;methods: &#123;            add(i) &#123;                this.classmates[i].count += 1;                    &#125;        &#125;,computed: &#123;        count() &#123;            return this.classmates.reduce((chushizhi, danqianzhi) =&gt; &#123; //利用reduce进行总计            //其中定义初始值以及当前值，初始值为classmates（第一次进行回调函数的值）            当前值为add方法后的值            //最终值等于当前值中得到count加上初始值            chushizhi=dangqianzhi.count+chushizhi                return chushizhi;            &#125;, 0)        &#125;    &#125;</code></pre><p>利用计算属性计算总的classmates中count 的总和</p><h2 id="2-4-侦听器"><a href="#2-4-侦听器" class="headerlink" title="2.4 侦听器"></a>2.4 侦听器</h2><p>在数据变化后执行异步操作，或者开销较大的操作。</p><p>使用watch 函数监听（侦听data 中定义属性）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade">computed: &#123;<br><span class="hljs-built_in">count</span>() &#123;<br><span class="hljs-keyword">return</span> this.classmates.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">chushizhi, xinzengzhi</span>) =&gt;</span> &#123;<br>chushizhi=xinzengzhi.<span class="hljs-built_in">count</span>+chushizhi<br><span class="hljs-keyword">return</span> chushizhi;<br>&#125;, <span class="hljs-number">0</span>)<br>&#125;<br>&#125;,<br>利用watch 侦听器监听<span class="hljs-built_in">count</span>函数，函数发生变化时执行<br>watch: &#123;<br><span class="hljs-built_in">count</span>()&#123;   <span class="hljs-comment">//监听data中定义的count 数值变化</span><br>alert(<span class="hljs-string">&quot;666&quot;</span>)<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5数组操作"><a href="#2-5数组操作" class="headerlink" title="2.5数组操作"></a>2.5数组操作</h2><p>数组中添加数据</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-keyword">this</span>.$<span class="hljs-keyword">set</span>(<span class="hljs-keyword">this</span>.name,<span class="hljs-string">&#x27;索引&#x27;</span>，&#123;id:<span class="hljs-number">4</span>,name:<span class="hljs-string">&quot;wang&quot;</span>&#125;) <br><br></code></pre></td></tr></table></figure><p>数组中删除数据</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.$delete(<span class="hljs-keyword">this</span>.name,<span class="hljs-string">&#x27;索引&#x27;</span>) <br></code></pre></td></tr></table></figure><p>push()</p><p>pop()</p><p>shift()</p><p>unshift()</p><h1 id="3、事件"><a href="#3、事件" class="headerlink" title="3、事件"></a>3、事件</h1><h2 id="3-1click-点击事件"><a href="#3-1click-点击事件" class="headerlink" title="3.1click(点击事件)"></a>3.1click(点击事件)</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v</span>-<span class="hljs-literal">on</span>:click=<span class="hljs-string">&quot;add($event,2)&quot;</span>   通过v-<span class="hljs-literal">on</span>监听点击事件并传递event 事件，传递参数值<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">add</span>(<span class="hljs-keyword">event</span>,num)&#123; 通过<span class="hljs-keyword">event</span> 接收<span class="hljs-keyword">event</span> 事件（鼠标点击事件） 通过num接收参数值<span class="hljs-number">2</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-1冒泡阻止"><a href="#3-1-1冒泡阻止" class="headerlink" title="3.1.1冒泡阻止"></a>3.1.1冒泡阻止</h3><p>阻止冒泡可通过默认的事件修饰符完成</p><p>修饰符可串联使用。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">@click.stop=<span class="hljs-string">&quot;add()&quot;</span>   即可完成阻止事件冒泡<br></code></pre></td></tr></table></figure><h2 id="3-2-emit"><a href="#3-2-emit" class="headerlink" title="3.2$emit()"></a>3.2$emit()</h2><h3 id="子组件向父组件传递消息"><a href="#子组件向父组件传递消息" class="headerlink" title="子组件向父组件传递消息"></a>子组件向父组件传递消息</h3><p>$emit()  用于子组件想父组件传递消息 </p><p>子组件中定义$emit()事件–第一个参数为事件名，第二个参数为数据</p><p>父组件中使用v-on监听事件</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;prop-child parent-name=<span class="hljs-string">&quot;父组件传递&quot;</span> <span class="hljs-variable">@update</span><span class="hljs-symbol">:msg=<span class="hljs-string">&quot;this.a=$event&quot;</span>&gt;&lt;/prop-child&gt;</span><br></code></pre></td></tr></table></figure><p>子组件中定义$emit事件并传递参数 update：msg 为参数名，666为参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;button @<span class="hljs-attribute">click</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$emit</span>(&#x27;update:msg&#x27;,&#x27;666&#x27;)&quot;</span>&gt;&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>实现父组件到子组件的双向绑定（原理还是单向数据流方式进行传输）</p><p>父组件中使用v-on监听事件</p><p>父组件到子组件传值使用props</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;prop-child parent-name=<span class="hljs-string">&quot;父组件传递&quot;</span> <span class="hljs-variable">@update</span><span class="hljs-symbol">:msg=<span class="hljs-string">&quot;this.a=$event&quot;</span></span> <span class="hljs-symbol">:msg=<span class="hljs-string">&quot;this.a&quot;</span>&gt;&lt;/prop-child&gt;</span><br></code></pre></td></tr></table></figure><p>​子组件中定义$emit事件并传递参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;button @<span class="hljs-attribute">click</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$emit</span>(&#x27;update:msg&#x27;,&#x27;666&#x27;)&quot;</span>&gt;&lt;/button&gt;<br><span class="hljs-built_in">export</span><span class="hljs-built_in"> default </span>&#123;<br>props:[<span class="hljs-string">&quot;msg&quot;</span>],<br>methods: &#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、生命周期"><a href="#4、生命周期" class="headerlink" title="4、生命周期"></a>4、生命周期</h1><p>生命周期函  数从Vue创建到销毁的过程。</p><p><img src="C:\Users\Administrator\Desktop\lifecycle.16e4c08e.png" alt="lifecycle.16e4c08e"></p><p>before Create： 实例创建前</p><p>Create：实例创建后</p><p>before Mount：组件被挂载前调用。还没有创建DOM</p><p>mounted：在组件被挂在后调用，DOM已经被创建并且插入到父容器中。</p><p>before Update：组件即将因为一个响应是的状态变更而更新DOM之前调用。</p><p>Update：组件因为一个响应式的状态变更而更新DOM之后调用。</p><p>before Unmount：组件实例被卸载之前进行调用。</p><p>unmounted：在一个组件实例被卸载之后调用。</p><p>error Captured:在捕获后代组件的错误时候调用。</p><h2 id="4-1-指令的生命周期"><a href="#4-1-指令的生命周期" class="headerlink" title="4.1 指令的生命周期"></a>4.1 指令的生命周期</h2><p>inserted ：指令创建</p><p>update ：指令的更新</p><h1 id="5、指令"><a href="#5、指令" class="headerlink" title="5、指令"></a>5、指令</h1><p>通过带有V-前缀的指令，绑定相应属性。</p><h2 id="5-1-v-text"><a href="#5-1-v-text" class="headerlink" title="5.1 v-text"></a>5.1 v-text</h2><p>采用之v-text指令绑定span进行更新元素的文本内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="5-2-v-HTML"><a href="#5-2-v-HTML" class="headerlink" title="5.2 v-HTML"></a>5.2 v-HTML</h2><p>采用v-HTML绑定HTML语句，更新元素的inner HTML</p><p>可用于动态渲染HTML内容</p><p>✨安全说明</p><p>在你的站点上动态渲染任意的 HTML 是非常危险的，因为它很容易导致 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS 攻击</a>。请只对可信内容使用 HTML 插值，<strong>绝不要</strong>将用户提供的内容作为插值</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> v-html=<span class="hljs-string">&quot;html&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="5-3-v-show"><a href="#5-3-v-show" class="headerlink" title="5.3 v-show"></a>5.3 v-show</h2><p>基于表达式的真假值，改变元素的可见性。</p><p>仅改变元素的CSS样式，不脱离文档流。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&lt;div v-<span class="hljs-built_in">show</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;&lt;/div&gt;<br>v-<span class="hljs-built_in">show</span> 后面为表达式<br>值为<span class="hljs-literal">true</span>时将元素的<span class="hljs-built_in">display</span>改为<span class="hljs-built_in">block</span> <br>值为<span class="hljs-literal">false</span> 时候将元素的<span class="hljs-built_in">display</span>改为none<br></code></pre></td></tr></table></figure><h2 id="5-4-v-if"><a href="#5-4-v-if" class="headerlink" title="5.4 v-if"></a>5.4 v-if</h2><p>基于表达式的真假值，来条件性渲染元素或者模板片段。</p><p>判断是否进行渲染。</p><p>当 <code>v-if</code> 元素被触发，元素及其所包含的指令&#x2F;组件都会销毁和重构。如果初始条件是假，那么其内部的内容根本都不会被渲染。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;表达式为<span class="hljs-literal">true</span>则进行渲染&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="5-5-v-else"><a href="#5-5-v-else" class="headerlink" title="5.5 v-else"></a>5.5 v-else</h2><p>与v-if 或者v-if&#x2F;v-else-if 链式调用</p><p>v-else 中无需传入表达式</p><p>但在其中上一个兄弟元素必须由v-if 或者v-else-if</p><h2 id="5-6-v-for"><a href="#5-6-v-for" class="headerlink" title="5.6 v-for"></a>5.6 v-for</h2><p>基于原始的数据进行多次渲染元素或者模板块。</p><p>指令值必须使用特殊语法 <code>alias in expression</code> 为正在迭代的元素提供一个别名：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in itemlist&quot;</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.id</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="5-7-v-on"><a href="#5-7-v-on" class="headerlink" title="5.7 v-on"></a>5.7 v-on</h2><p>缩写格式：@</p><p>修饰符：</p><ul><li><code>.stop</code> - 调用 <code>event.stopPropagation()</code>。</li><li><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。</li><li><code>.capture</code> - 在捕获模式添加事件监听器。</li><li><code>.self</code> - 只有事件从元素本身发出才触发处理函数。</li><li><code>.&#123;keyAlias&#125;</code> - 只在某些按键下触发处理函数。</li><li><code>.once</code> - 最多触发一次处理函数。</li><li><code>.left</code> - 只在鼠标左键事件触发处理函数。</li><li><code>.right</code> - 只在鼠标右键事件触发处理函数。</li><li><code>.middle</code> - 只在鼠标中键事件触发处理函数。</li><li><code>.passive</code> - 通过 <code>&#123; passive: true &#125;</code> 附加一个 DOM 事件。</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- 方法处理函数 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 动态事件 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:</span>[<span class="hljs-attr">event</span>]=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 内联声明 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doThat(&#x27;hello&#x27;, $event)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 使用缩写的动态事件 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @[<span class="hljs-attr">event</span>]=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 停止传播 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 阻止默认事件 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 不带表达式地阻止默认事件 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 链式调用修饰符 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop.prevent</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 按键用于 keyAlias 修饰符--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;onEnter&quot;</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 点击事件将最多触发一次 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click.once</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 对象语法 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; mousedown: doThis, mouseup: doThat &#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="5-8-v-bind"><a href="#5-8-v-bind" class="headerlink" title="5.8 v-bind"></a>5.8 v-bind</h2><p>缩写为：”:”或者”.”</p><p>用于一个或者多个属性，也可以是组件的prop</p><ul><li><strong>修饰符：</strong><ul><li><code>.camel</code> - 将短横线命名的 attribute 转变为驼峰式命名。</li><li><code>.prop</code> - 强制绑定为 DOM property。3.2+</li><li><code>.attr</code> - 强制绑定为 DOM attribute。3.2+</li></ul></li></ul><p><strong>用途：</strong></p><p>当用于绑定 <code>class</code> 或 <code>style</code> attribute，<code>v-bind</code> 支持额外的值类型如数组或对象。详见下方的指南链接。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- 绑定 attribute --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">&quot;imageSrc&quot;</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 动态 attribute 名 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-bind:</span>[<span class="hljs-attr">key</span>]=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imageSrc&quot;</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 缩写形式的动态 attribute 名 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">:</span>[<span class="hljs-attr">key</span>]=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 内联字符串拼接 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;&#x27;/path/to/images/&#x27; + fileName&quot;</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- class 绑定 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; red: isRed &#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[classA, classB]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[classA, </span></span></span><span class="hljs-template-variable">&#123; classB: isB, classC: isC &#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- style 绑定 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; fontSize: size + &#x27;px&#x27; &#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;[styleObjectA, styleObjectB]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 绑定对象形式的 attribute --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; id: someProp, &#x27;other-attr&#x27;: otherProp &#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- prop 绑定。“prop” 必须在子组件中已声明。 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> <span class="hljs-attr">:prop</span>=<span class="hljs-string">&quot;someThing&quot;</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 传递子父组件共有的 prop --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;$props&quot;</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- XLink --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:xlink:special</span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="5-9-v-model"><a href="#5-9-v-model" class="headerlink" title="5.9 v-model"></a>5.9 v-model</h2><p>在表单输入元素或者组件上创建双向绑定</p><p>绑定值得类型会根据表单元素的输入元素或者组件输出的值而变化。</p><p> 仅限</p><ul><li><p><code>&lt;input&gt;</code></p></li><li><p><code>&lt;select&gt;</code></p></li><li><p><code>&lt;textarea&gt;</code></p></li><li><p>components</p></li><li><p><strong>修饰符：</strong></p><ul><li><a href="https://cn.vuejs.org/guide/essentials/forms.html#lazy"><code>.lazy</code></a> - 监听 <code>change</code> 事件而不是 <code>input</code></li><li><a href="https://cn.vuejs.org/guide/essentials/forms.html#number"><code>.number</code></a> - 将输入的合法字符串转为数字</li><li><a href="https://cn.vuejs.org/guide/essentials/forms.html#trim"><code>.trim</code></a> - 移除输入内容两端空格</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input v-model=<span class="hljs-string">&quot;model&quot;</span>&gt;<br><span class="hljs-keyword">export</span> defualt &#123;<br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span>&#123;<br><span class="hljs-attr">model</span>:<span class="hljs-string">&quot;&quot;</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-10-v-slot"><a href="#5-10-v-slot" class="headerlink" title="5.10 v-slot"></a>5.10 v-slot</h2><p>用于声明具名插槽l或是期望接收 props 的作用域插槽。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">BaseLayout</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>&gt;</span></span><br><span class="language-xml">    Header content</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>&gt;</span></span><br><span class="language-xml">    Default slot content</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>&gt;</span></span><br><span class="language-xml">    Footer content</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">BaseLayout</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 接收 prop 的具名插槽 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">InfiniteScroll</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:item</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">      </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">slotProps.item.text</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">InfiniteScroll</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 接收 prop 的默认插槽，并解构 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Mouse</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; x, y &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">  Mouse position: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">x</span> &#125;&#125;</span><span class="language-xml">, </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">y</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Mouse</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="5-11自定义指令"><a href="#5-11自定义指令" class="headerlink" title="5.11自定义指令"></a>5.11自定义指令</h2><p>在自定义指令中，提供几种钩子函数。</p><p>Vue.directice(“name”,{</p><p>inserted(el，bind){  &#x2F;&#x2F;el 为底层DOM元素 bind 为元素的属性值 </p><p>}</p><p>})</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">const</span> <span class="hljs-variable">myDirective</span> <span class="hljs-operator">=</span> &#123;<br>  <span class="hljs-comment">// 在绑定元素的 attribute 前</span><br>  <span class="hljs-comment">// 或事件监听器应用前调用</span><br>  <span class="hljs-title function_">created</span>(<span class="hljs-params">el</span>, <span class="hljs-params">binding</span>, <span class="hljs-params">vnode</span>, <span class="hljs-params">prevVnode</span>) &#123;<br>    <span class="hljs-comment">// 下面会介绍各个参数的细节</span><br>  &#125;,<br>  <span class="hljs-comment">// 在元素被插入到 DOM 前调用</span><br>  <span class="hljs-title function_">beforeMount</span>(<span class="hljs-params">el</span>, <span class="hljs-params">binding</span>, <span class="hljs-params">vnode</span>, <span class="hljs-params">prevVnode</span>) &#123;&#125;,<br>  <span class="hljs-comment">// 在绑定元素的父组件</span><br>  <span class="hljs-comment">// 及他自己的所有子节点都挂载完成后调用</span><br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params">el</span>, <span class="hljs-params">binding</span>, <span class="hljs-params">vnode</span>, <span class="hljs-params">prevVnode</span>) &#123;&#125;,<br>  <span class="hljs-comment">// 绑定元素的父组件更新前调用</span><br>  <span class="hljs-title function_">beforeUpdate</span>(<span class="hljs-params">el</span>, <span class="hljs-params">binding</span>, <span class="hljs-params">vnode</span>, <span class="hljs-params">prevVnode</span>) &#123;&#125;,<br>  <span class="hljs-comment">// 在绑定元素的父组件</span><br>  <span class="hljs-comment">// 及他自己的所有子节点都更新后调用</span><br>  <span class="hljs-title function_">updated</span>(<span class="hljs-params">el</span>, <span class="hljs-params">binding</span>, <span class="hljs-params">vnode</span>, <span class="hljs-params">prevVnode</span>) &#123;&#125;,<br>  <span class="hljs-comment">// 绑定元素的父组件卸载前调用</span><br>  <span class="hljs-title function_">beforeUnmount</span>(<span class="hljs-params">el</span>, <span class="hljs-params">binding</span>, <span class="hljs-params">vnode</span>, <span class="hljs-params">prevVnode</span>) &#123;&#125;,<br>  <span class="hljs-comment">// 绑定元素的父组件卸载后调用</span><br>  <span class="hljs-title function_">unmounted</span>(<span class="hljs-params">el</span>, <span class="hljs-params">binding</span>, <span class="hljs-params">vnode</span>, <span class="hljs-params">prevVnode</span>) &#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="5-12内容渲染指令"><a href="#5-12内容渲染指令" class="headerlink" title="5.12内容渲染指令"></a>5.12内容渲染指令</h2><h1 id="6、双向绑定"><a href="#6、双向绑定" class="headerlink" title="6、双向绑定"></a>6、双向绑定</h1><p> Vue采用的是单向数据流，从父组件到子组件采用props进行参数传递。</p><p>从子组件到父组件通过$emit（）进行参数传递。</p><h2 id="6-1-V-model"><a href="#6-1-V-model" class="headerlink" title="6.1 V-model"></a>6.1 V-model</h2><p>用于在表单元素上创建双向绑定语法。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">通过V-model进行双向绑定-对合成事件进行处理，例如中文日文输入。</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">通过旧方法实现双向绑定。</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;message&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;message=$event.target.value&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>通过修饰符简化操作例如通过number修饰符简化字符转换过程</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h1 id="7、插槽-v-slot"><a href="#7、插槽-v-slot" class="headerlink" title="7、插槽 (v-slot)"></a>7、插槽 (v-slot)</h1><p>由父组件中定义内容，将其插入到子组件的插槽中。</p><p>一般用于对公共组件内容的变更。如公用可以复用的子组件内容的修改。</p><p>v-slot：hearer对于到子组件中的slot</p><p>不指定v-slot：name的时候则为默认的default</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;s-<span class="hljs-keyword">index</span>-layout&gt;//父组件中引用子组件<br>&lt;<span class="hljs-keyword">template</span> v-slot:<span class="hljs-type">name</span>&gt;<br>//v-slot：<span class="hljs-type">name</span>可以简写为#：<span class="hljs-type">name</span><br>&lt;/<span class="hljs-keyword">template</span>&gt;<br>&lt;/s-<span class="hljs-keyword">index</span>-layout&gt;<br><br><br>子组件<br>&lt;slot <span class="hljs-type">name</span>:<span class="hljs-type">name</span>&gt;<br>默认导航<br>&lt;/slot&gt;<br></code></pre></td></tr></table></figure><p>编译作用域</p><p>在父级模板里面的所有内容都是在父级作用域中编译</p><p>子模板里面的所有内容都是在子作用域中编译</p><h3 id="7-1作用域插槽"><a href="#7-1作用域插槽" class="headerlink" title="7.1作用域插槽"></a>7.1作用域插槽</h3><p>子组件中一般为公用组件，可以复用。</p><p>将父组件中的内容插入到子组件中。</p><p>可将子组件中的内容传递到父组件中，可在父组件中判断数据操作。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">父组件：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">s-index-layout</span>&gt;</span>//父组件中引用子组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:name</span>=<span class="hljs-string">&quot;&#123;user&#125;&quot;</span>&gt;</span></span><br><span class="language-xml">//v-slot：name可以简写为#：name</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">user.email</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">s-index-layout</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">子组件：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name:name</span> <span class="hljs-attr">v-bind:user</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><br><span class="language-xml">默认导航</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="8、组件"><a href="#8、组件" class="headerlink" title="8、组件"></a>8、组件</h1><p>动态组件切换,利用生命周期，钩子函数中的计算属性函数进行切换。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&lt;component :<span class="hljs-built_in">is</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;&lt;/component&gt;  //<span class="hljs-built_in">title</span> 属性<br>computed: &#123;<br><span class="hljs-built_in">title</span>()&#123;   //监听<span class="hljs-built_in">title</span>的变化，执行下面语句，判断<span class="hljs-built_in">title</span>值为<span class="hljs-literal">true</span>或者<span class="hljs-literal">false</span> <br><span class="hljs-built_in">return</span> this.<span class="hljs-built_in">title</span> ? <span class="hljs-string">&quot;A&quot;</span> :<span class="hljs-string">&quot;B&quot;</span><br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>缓存组件实例</p><p>keep-alive  通过组件缓存，获取先前的DOM元素，提高加载的速度</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;keep-alive&gt;<br>&lt;component <span class="hljs-symbol">:is=<span class="hljs-string">&quot;title&quot;</span>&gt;&lt;/component&gt;</span><br>&lt;/keep-alive&gt;<br></code></pre></td></tr></table></figure><h2 id="8-1组件间通讯"><a href="#8-1组件间通讯" class="headerlink" title="8.1组件间通讯"></a>8.1组件间通讯</h2><h3 id="8-1-1访问外层组件"><a href="#8-1-1访问外层组件" class="headerlink" title="8.1.1访问外层组件"></a>8.1.1访问外层组件</h3><p>子组件直接访问根组件。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">this.<span class="hljs-variable">$root</span>.name; <span class="hljs-regexp">//</span>访问<br>this.<span class="hljs-variable">$root</span>.name=<span class="hljs-number">2</span>; <span class="hljs-regexp">//</span>写入根组件的数据<br>this.<span class="hljs-variable">$root</span>.sm; <span class="hljs-regexp">//</span>访问根组件的计算属性<br>this.<span class="hljs-variable">$root</span>.prism(); <span class="hljs-regexp">//</span>调用根组件的方法<br></code></pre></td></tr></table></figure><p>子组件访问父组件方法事件属性等</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">this.<span class="hljs-variable">$parent</span>.name; <span class="hljs-regexp">//</span>访问<br>this.<span class="hljs-variable">$parent</span>.name=<span class="hljs-number">2</span>; <span class="hljs-regexp">//</span>写入根组件的数据<br>this.<span class="hljs-variable">$parent</span>.sm; <span class="hljs-regexp">//</span>访问根组件的计算属性<br>this.<span class="hljs-variable">$parent</span>.prism(); <span class="hljs-regexp">//</span>调用根组件的方法<br></code></pre></td></tr></table></figure><h1 id="9、-ref"><a href="#9、-ref" class="headerlink" title="9、 ref"></a>9、 ref</h1><p>在父组件中访问子组件</p><p>在父组件中注册ref 对象，在子组件通过this.$refs.name</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta">父组件：<br>&lt;s-<span class="hljs-keyword">index</span>-layout ref=<span class="hljs-string">&quot;name&quot;</span>&gt;；<br><br>&lt;/s-<span class="hljs-keyword">index</span>-layout&gt;<br><br><span class="hljs-keyword">this</span>.$refs.name.fangfa()<br><span class="hljs-comment">//可在父组件中访问到子组件中的方法。</span><br></code></pre></td></tr></table></figure><p>$ refs是所有注册过ref集合（对象）；</p><p>$ refs不是响应式的，只在组件渲染完成之后才填充。</p><h1 id="10、vuex"><a href="#10、vuex" class="headerlink" title="10、vuex"></a>10、vuex</h1><h1 id="11、Vue-Router"><a href="#11、Vue-Router" class="headerlink" title="11、Vue Router"></a>11、Vue Router</h1><p>路由原理：</p><p>路由：通过互联网络传递信息的活动</p><p>监听浏览器History变化</p><p>URL中#后面<a href="https://www.xxx,com/#/">https://www.xxx,com#/</a> hashtag 监听hashtag 变化</p><p>window.onhashchange 监听URL中得hash变化</p><h1 id="12、延时执行"><a href="#12、延时执行" class="headerlink" title="12、延时执行"></a>12、延时执行</h1><p>setTimeout（（）&#x3D;&gt;{</p><p>需要延时执行的代码</p><p>},1500）</p><p>1500为时间，为1.5秒</p><h1 id="13、Token"><a href="#13、Token" class="headerlink" title="13、Token"></a>13、Token</h1><p>格式：<code>Bearer </code>+<code>token值</code></p><h1 id="14、全局前置守卫（路由）"><a href="#14、全局前置守卫（路由）" class="headerlink" title="14、全局前置守卫（路由）"></a>14、全局前置守卫（路由）</h1><p>使用全局前置守卫拦截未登录状态访问。</p><p>在路由router配置阶段进行配置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">router.beforeEach（function（to,from,next）&#123;<br><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(to.path=<span class="hljs-string">&#x27;/home&#x27;</span>)</span></span> <span class="hljs-comment">//path 为需要进行拦截的页面</span><br>&#123;<br>const token =localStorage<span class="hljs-selector-class">.getItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(token)</span></span>&#123;<br><span class="hljs-function"><span class="hljs-title">next</span><span class="hljs-params">()</span></span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-function"><span class="hljs-title">next</span><span class="hljs-params">(<span class="hljs-string">&#x27;/login&#x27;</span>)</span></span><br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-function"><span class="hljs-title">next</span><span class="hljs-params">()</span></span><br>&#125;<br>&#125;）<br></code></pre></td></tr></table></figure><h1 id="15、子路由"><a href="#15、子路由" class="headerlink" title="15、子路由"></a>15、子路由</h1><h1 id="16、表单验证"><a href="#16、表单验证" class="headerlink" title="16、表单验证"></a>16、表单验证</h1><h1 id="17、过滤器"><a href="#17、过滤器" class="headerlink" title="17、过滤器"></a>17、过滤器</h1><p>过滤器中的方法必须定义在<code>filters：&#123;&#125;</code>中</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&#123;&#123;testList | test&#125;&#125;<br><br>filters: &#123;<br><span class="hljs-comment">//test为过滤器名称，value 为传递过来的值。</span><br>test: <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<br>const <span class="hljs-built_in">first</span>=value.charAt(<span class="hljs-number">0</span>).toUpperCase()<br>const outher=value.<span class="hljs-built_in">slice</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">first</span>+outher;<br><span class="hljs-comment">//返回经过过滤后的数据，展示。</span><br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>利用过滤器进行对时间的格式化</p><p>最终显示效果为<code>今天是2023年6月21日</code></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&#123;&#123;data | <span class="hljs-built_in">time</span>&#125;&#125;<br><span class="hljs-built_in">time</span>: function(<span class="hljs-built_in">time</span>) &#123;<br>const <span class="hljs-built_in">year</span> = <span class="hljs-built_in">time</span>.getFullYear()<br>const <span class="hljs-built_in">month</span>=<span class="hljs-built_in">time</span>.getMonth()+<span class="hljs-number">1</span>; <br>const <span class="hljs-built_in">date</span>=<span class="hljs-built_in">time</span>.getDate()<br><span class="hljs-built_in">return</span> <span class="hljs-built_in">year</span>+<span class="hljs-string">&quot;年&quot;</span>+<span class="hljs-built_in">month</span>+<span class="hljs-string">&quot;月&quot;</span>+<span class="hljs-built_in">date</span>+<span class="hljs-string">&quot;日&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="18、tabs-标签切换"><a href="#18、tabs-标签切换" class="headerlink" title="18、tabs 标签切换"></a>18、tabs 标签切换</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h1 id="19、数组循环"><a href="#19、数组循环" class="headerlink" title="19、数组循环"></a>19、数组循环</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> a=<span class="hljs-selector-attr">[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>]</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.forEach</span>(<span class="hljs-built_in">function</span>(e)&#123; <span class="hljs-comment">//回调函数处理后续相关事务</span><br>console<span class="hljs-selector-class">.log</span>(e)  <span class="hljs-comment">//e为参数（循环每一项）</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>在数组中新增一个参数并构造成一个新的数组</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> arr=<span class="hljs-selector-attr">[&#123;a:<span class="hljs-string">&quot;1&quot;</span>,b:<span class="hljs-string">&quot;2&quot;</span>&#125;,&#123;a:<span class="hljs-string">&quot;2&quot;</span>,b:<span class="hljs-string">&quot;3&quot;</span>&#125;,&#123;a:<span class="hljs-string">&quot;4&quot;</span>,b:<span class="hljs-string">&quot;5&quot;</span>&#125;,&#123;a:<span class="hljs-string">&quot;6&quot;</span>,b:<span class="hljs-string">&quot;7&quot;</span>&#125;,&#123;a:<span class="hljs-string">&quot;8&quot;</span>,b:<span class="hljs-string">&quot;9&quot;</span>&#125;,]</span><br><span class="hljs-selector-tag">var</span> newarr=<span class="hljs-selector-attr">[]</span><br>arr<span class="hljs-selector-class">.forEach</span>(<span class="hljs-built_in">function</span>(e)&#123;<br>newarr<span class="hljs-selector-class">.push</span>(e)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="20、对象排序"><a href="#20、对象排序" class="headerlink" title="20、对象排序"></a>20、对象排序</h1><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sqf">let <span class="hljs-built_in">list</span> = &#123;<br>      <span class="hljs-number">1</span>: &#123; <span class="hljs-built_in">name</span>: <span class="hljs-string">&#x27;陈七&#x27;</span>, age: <span class="hljs-string">&#x27;20&#x27;</span>, sex: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-built_in">sort</span>: <span class="hljs-number">4</span> &#125;,<br>      <span class="hljs-number">2</span>: &#123; <span class="hljs-built_in">name</span>: <span class="hljs-string">&#x27;王五&#x27;</span>, age: <span class="hljs-string">&#x27;42&#x27;</span>, sex: <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-built_in">sort</span>: <span class="hljs-number">2</span> &#125;,<br>      <span class="hljs-number">3</span>: &#123; <span class="hljs-built_in">name</span>: <span class="hljs-string">&#x27;赵六&#x27;</span>, age: <span class="hljs-string">&#x27;27&#x27;</span>, sex: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-built_in">sort</span>: <span class="hljs-number">1</span> &#125;,<br>      <span class="hljs-number">4</span>: &#123; <span class="hljs-built_in">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>, age: <span class="hljs-string">&#x27;37&#x27;</span>, sex: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-built_in">sort</span>: <span class="hljs-number">3</span> &#125;,<br>      <span class="hljs-number">5</span>: &#123; <span class="hljs-built_in">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>, age: <span class="hljs-string">&#x27;53&#x27;</span>, sex: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-built_in">sort</span>: <span class="hljs-number">1</span> &#125;<br>    &#125;;<br><br><br>let arr = []<br><span class="hljs-comment">// 将需要排序的 key, 按照 &quot;从大到小&quot; 进行排列</span><br>let sortKeys = <span class="hljs-built_in">Object</span>.<span class="hljs-built_in">keys</span>(<span class="hljs-built_in">list</span>).<span class="hljs-built_in">sort</span>((a, b) =&gt; &#123;<br>  return <span class="hljs-built_in">list</span>[b].<span class="hljs-built_in">sort</span> - <span class="hljs-built_in">list</span>[a].<span class="hljs-built_in">sort</span><br>  <span class="hljs-comment">//其中sort为需要排序的关键词</span><br>  <span class="hljs-comment">//b-a则为从大到小</span><br>  <span class="hljs-comment">//a-b则为从小到大</span><br>&#125;)<br><span class="hljs-comment">// 循环排列好的 key, 重新组成一个新的数组</span><br><span class="hljs-keyword">for</span> (var sortIndex <span class="hljs-built_in">in</span> sortKeys) &#123;<br>  arr.push(<span class="hljs-built_in">list</span>[sortKeys[sortIndex]])<br>&#125;<br>console.<span class="hljs-built_in">log</span>(arr)  <span class="hljs-comment">//重新排序后的数组对象</span><br>this.tableData=arr<br></code></pre></td></tr></table></figure><h1 id="20、数据保留两位小数"><a href="#20、数据保留两位小数" class="headerlink" title="20、数据保留两位小数"></a>20、数据保留两位小数</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">parse<span class="hljs-constructor">Float((Number(<span class="hljs-params">row</span>.<span class="hljs-params">num</span> <span class="hljs-operator">/</span> 10000)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">Fixed(2)</span>))  --- 单位为万（<span class="hljs-number">1.</span>xx）万<br></code></pre></td></tr></table></figure><h1 id="21、对象的合并Object-assign"><a href="#21、对象的合并Object-assign" class="headerlink" title="21、对象的合并Object.assign"></a>21、对象的合并Object.assign</h1><p>Object.assign可以实现对象的合并。它的语法是这样的： Object.assign(target, …sources)</p><p>Object.assign会将source里面的可枚举属性复制到target。如果和target的已有属性重名，则会覆盖。同时后续的source会覆盖前面的source的同名属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">param = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;检测到有新版本！&quot;</span>,<br>    <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;请升级app到最新版本！&quot;</span>,<br>    <span class="hljs-attr">canceltext</span>: <span class="hljs-string">&quot;暂不升级&quot;</span>,<br>    <span class="hljs-attr">oktext</span>: <span class="hljs-string">&quot;立即升级&quot;</span><br>&#125;, param)<br></code></pre></td></tr></table></figure><p>将param 属性复制到{}中，已有的属性重名时将会被直接覆盖。</p><p>若param 中包含title 属性，则原有{}中的title 会被param中的title属性直接覆盖。</p><h1 id="22、正则表达式保留字符-数字"><a href="#22、正则表达式保留字符-数字" class="headerlink" title="22、正则表达式保留字符+数字"></a>22、正则表达式保留字符+数字</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 除去中文或者其他非字母数字的字符</span><br>item为需要进行转换的字符串<br><span class="hljs-keyword">let</span> newStr = <span class="hljs-title class_">String</span>(item).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[^a-zA-Z0-9]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="23、正则表达式大写转小写"><a href="#23、正则表达式大写转小写" class="headerlink" title="23、正则表达式大写转小写"></a>23、正则表达式大写转小写</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 正则表达将大写转小写</span><br>res为需要进行转换的字符串<br>let newStr = res.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/[A-Z]/g</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">match</span>) &#123;<br>  <span class="hljs-keyword">return</span> match.toLowerCase();<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="24、日历匹配（短日历）"><a href="#24、日历匹配（短日历）" class="headerlink" title="24、日历匹配（短日历）"></a>24、日历匹配（短日历）</h1><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">HeaderTitle</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/pages/common/headerTitle.vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;getSelfClockList&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/api/system/attendance&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;myAttendance&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123;<span class="hljs-title class_">HeaderTitle</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">weekList</span>: [</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-string">&quot;周一&quot;</span>, <span class="hljs-string">&quot;周二&quot;</span>, <span class="hljs-string">&quot;周三&quot;</span>, <span class="hljs-string">&quot;周四&quot;</span>, <span class="hljs-string">&quot;周五&quot;</span>, <span class="hljs-string">&quot;周六&quot;</span>, <span class="hljs-string">&quot;周日&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      ],</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">dayList</span>: [],</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">info</span>: [<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">lateAndEarlyList</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getTime</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getClockRecord</span>()</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">getClockRecord</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">getSelfClockList</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">lateAndEarlyList</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">lateAndEarlyList</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getDateF</span>()</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">itemSwitch</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">switch</span> (e) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;0&quot;</span>:</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;迟到&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;早退&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;迟到早退&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">colorSwitch</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">switch</span> (e) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;0&quot;</span>:</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;#ED6565&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;#ED6565&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;#ED6565&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">getTime</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> day = today.<span class="hljs-title function_">getDay</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 如果今天是周日，那么我们需要从上周的周日开始</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> startOfWeek = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(today.<span class="hljs-title function_">setDate</span>(today.<span class="hljs-title function_">getDate</span>() - day + (day === <span class="hljs-number">0</span> ? -<span class="hljs-number">6</span> : <span class="hljs-number">1</span>)));</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 一周时间</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dayList</span>.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(startOfWeek).<span class="hljs-title function_">getDate</span>() + j)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">getDateF</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">dayList</span>=[]</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getTime</span>()</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">dayList</span>.<span class="hljs-property">length</span>; i++) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">lateAndEarlyList</span>.<span class="hljs-property">length</span>; k++) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">let</span> filteredItems = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lateAndEarlyList</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">timeSelect</span>(item.<span class="hljs-property">time</span>)[<span class="hljs-number">0</span>] === <span class="hljs-title class_">String</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dayList</span>[i]);</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">let</span> lastItem = <span class="hljs-title class_">Array</span>(filteredItems[filteredItems.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]);</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">if</span> (lastItem[<span class="hljs-number">0</span>]) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>[i] = lastItem[<span class="hljs-number">0</span>].<span class="hljs-property">type</span></span></span><br><span class="language-javascript"><span class="language-xml">          &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">timeSelect</span>(<span class="hljs-params">time</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> time.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/([^-]*)$/</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--我的考勤--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 40rpx&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;u-flex u-row-around&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in weekList&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;week&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;u-flex u-row-around&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in dayList&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;day&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;u-flex u-row-around&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in info&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;work&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;color:colorSwitch(item)&#125;&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">itemSwitch</span>(<span class="hljs-name">item</span>) &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.center</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">62</span>rpx;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">62</span>rpx;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">14</span>rpx;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">122</span>rpx;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.week</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">width</span>: <span class="hljs-number">48</span>rpx;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">height</span>: <span class="hljs-number">34</span>rpx;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-family</span>: PingFangSC, PingFang SC;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24</span>rpx;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#9C9C9C</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">text-align</span>: right;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-style</span>: normal;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.day</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">width</span>: <span class="hljs-number">48</span>rpx;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">height</span>: <span class="hljs-number">40</span>rpx;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-family</span>: PingFangSC, PingFang SC;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28</span>rpx;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">24</span>, <span class="hljs-number">24</span>, <span class="hljs-number">24</span>, <span class="hljs-number">0.8</span>);</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-style</span>: normal;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.work</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">width</span>: <span class="hljs-number">48</span>rpx;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">height</span>: <span class="hljs-number">40</span>rpx;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-family</span>: PingFangSC, PingFang SC;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20</span>rpx;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-style</span>: normal;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.active</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#FEBD01</span>;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.active1</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#ABCBFE</span>;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="25、手搓日历组件"><a href="#25、手搓日历组件" class="headerlink" title="25、手搓日历组件"></a>25、手搓日历组件</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;view class=<span class="hljs-string">&quot;calendar&quot;</span>&gt;<br>  &lt;view class=<span class="hljs-string">&quot;calendar-weekdays&quot;</span>&gt;<br>    &lt;view class=<span class="hljs-string">&quot;weekday&quot;</span> v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;day in weekdays&quot;</span> :key=<span class="hljs-string">&quot;day&quot;</span>&gt;&lt;span class=<span class="hljs-string">&quot;weekdayName&quot;</span>&gt;&#123;&#123; day &#125;&#125;&lt;<span class="hljs-regexp">/span&gt;&lt;/</span>view&gt;<br>  &lt;/view&gt;<br>  &lt;!--      日期--&gt;<br>  &lt;view class=<span class="hljs-string">&quot;calendar-days&quot;</span>&gt;<br>    &lt;view class=<span class="hljs-string">&quot;day-row&quot;</span> v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(week, index) in currentMonthDates&quot;</span> :key=<span class="hljs-string">&quot;index&quot;</span>&gt;<br>      &lt;view :class=<span class="hljs-string">&quot;selectIndex===index&amp;&amp;selectdayIndex===dayIndex&amp;&amp;day?&#x27;day1&#x27;:&#x27;day&#x27;&quot;</span><br>            v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(day, dayIndex) in week&quot;</span> :key=<span class="hljs-string">&quot;dayIndex&quot;</span> @click=<span class="hljs-string">&quot;info(index,dayIndex)&quot;</span>&gt;<br>        &lt;view v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;day &gt; 0&quot;</span>&gt;&lt;span class=<span class="hljs-string">&quot;dayName&quot;</span><br>                                   :style=<span class="hljs-string">&quot;&#123;color:selectIndex===index&amp;&amp;selectdayIndex===dayIndex?&#x27;#2C7EFC&#x27;:&#x27;&#x27;&#125;&quot;</span>&gt;<br>          &#123;&#123; day &#125;&#125;&lt;<span class="hljs-regexp">/span&gt;&lt;/</span>view&gt;<br>        &lt;view v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;&#123;&#123; info[index][dayIndex]&#125;&#125;&lt;/view&gt;<br>        &lt;!--            &lt;view :class=<span class="hljs-string">&quot;[&#x27;work&#x27;,dayIndex&lt;2?&#x27;active&#x27;:&#x27;active1&#x27;]&quot;</span>&gt;&#123;&#123; index &#125;&#125;&lt;/view&gt;--&gt;<br>      &lt;/view&gt;<br>    &lt;/view&gt;<br>  &lt;/view&gt;<br><br>&lt;/view&gt;<br><br><br>  getDateF() &#123;<br>      <span class="hljs-regexp">//</span> 创建一个映射来快速查找 time -&gt; type<br>      const timeTypeMap = this.lateAndEarlyList.reduce((map, item) =&gt; &#123;<br>        const time = this.timeSelect(item.time)[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (time) &#123;<br>          map[time] = item.type;<br>        &#125;<br>        return map;<br>      &#125;, &#123;&#125;);<br>      console.log(timeTypeMap)<br>      <span class="hljs-keyword">for</span> (let j = <span class="hljs-number">0</span>; j &lt; this.currentMonthDates.length; j++) &#123;<br>        <span class="hljs-keyword">if</span> (!this.info[j]) &#123;<br>          this.info[j] = new Array(this.currentMonthDates[j].length).fill(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-regexp">//</span> 确保 info[j] 是一个与 currentMonthDates[j] 长度相同的空字符串数组<br>        &#125;<br>        <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; this.currentMonthDates[j].length; i++) &#123;<br>          const time = String(this.currentMonthDates[j][i]);<br>          this.info[j][i] = timeTypeMap[time] || <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-regexp">//</span> 使用映射来查找 type，如果找不到则设置为空字符串<br>        &#125;<br>      &#125;<br>      this.show=true<br>      <span class="hljs-regexp">//</span> j为纵向<br>      <span class="hljs-regexp">//</span> i为横向<br>      <span class="hljs-regexp">//</span> <span class="hljs-keyword">for</span> (let j = <span class="hljs-number">0</span>; j &lt; this.currentMonthDates.length; j++) &#123;<br>      <span class="hljs-regexp">//</span>   <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; this.currentMonthDates[j].length; i++) &#123;<br>      <span class="hljs-regexp">//</span>     <span class="hljs-keyword">for</span> (let k = <span class="hljs-number">0</span>; k &lt; this.lateAndEarlyList.length; k++) &#123;<br>      <span class="hljs-regexp">//</span>        this.lateAndEarlyList.filter(() =&gt; &#123;<br>      <span class="hljs-regexp">//</span>         <span class="hljs-keyword">if</span> (this.timeSelect(this.lateAndEarlyList[k].time)[<span class="hljs-number">0</span>] === String(this.currentMonthDates[j][i])) &#123;<br>      <span class="hljs-regexp">//</span>           this.info[j][i] = this.lateAndEarlyList[k].type<br>      <span class="hljs-regexp">//</span>         &#125;<br>      <span class="hljs-regexp">//</span>         <span class="hljs-keyword">if</span> (this.info[j][i])&#123;<br>      <span class="hljs-regexp">//</span>         &#125;<span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-regexp">//</span>           this.info[j][i]=<span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-regexp">//</span>         &#125;<br>      <span class="hljs-regexp">//</span>       &#125;);<br>      <span class="hljs-regexp">//</span><br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span> return this.timeSelect(this.lateAndEarlyList[k].time)[<span class="hljs-number">0</span>] ===String(this.currentMonthDates[j][i]);<br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span> <span class="hljs-keyword">if</span> (this.timeSelect(this.lateAndEarlyList[k].time)[<span class="hljs-number">0</span>] === String(this.currentMonthDates[j][i])) &#123;<br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span>   console.log(<span class="hljs-string">&quot;this.lateAndEarlyList[k].time&quot;</span>,this.lateAndEarlyList[k].type)<br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span>   this.info[j][i] =this.lateAndEarlyList[k].type<br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span> &#125;<span class="hljs-keyword">else</span><br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span> <span class="hljs-keyword">if</span> (this.info[j][i])&#123;<br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span>   this.info[j][i] = <span class="hljs-string">&quot;this.lateAndEarlyList[k].type&quot;</span><br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span> &#125;<br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span> console.log(<span class="hljs-string">&quot;this.lateAndEarlyList&quot;</span>,this.timeSelect(this.lateAndEarlyList[k].time)[<span class="hljs-number">0</span>])<br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span> console.log(<span class="hljs-string">&quot;this.currentMonthDates[j][i]&quot;</span>,String(this.currentMonthDates[j][i]))<br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span> let lastItem = Array(filteredItems[filteredItems.length - <span class="hljs-number">1</span>]);<br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span> <span class="hljs-keyword">if</span> (lastItem[<span class="hljs-number">0</span>]) &#123;<br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span>   this.info[i] = lastItem[<span class="hljs-number">0</span>].type<br>      <span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span> &#125;<br>      <span class="hljs-regexp">//</span>     &#125;<br>      <span class="hljs-regexp">//</span>   &#125;<br>      <span class="hljs-regexp">//</span> &#125;<br>      console.log(this.info)<br>    &#125;,<br></code></pre></td></tr></table></figure><h1 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h1><p>组合式API便携示例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&lt;script setup&gt;<br>import &#123;onMounted, ref, watch&#125; from <span class="hljs-string">&quot;vue&quot;</span>;<br><br>defineProps(&#123;<br>  <span class="hljs-attr">msg</span>: &#123;<br>    <span class="hljs-attr">type</span>: String,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;)<br>const <span class="hljs-built_in">number</span> =ref(<span class="hljs-number">11</span>)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserInfo</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-built_in">number</span>.value)<br>&#125;<br><span class="hljs-comment">// 自定义方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">up</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-built_in">number</span>.value++<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;点击了+++号&quot;</span>)<br>&#125;<br><span class="hljs-comment">// 监听方法</span><br>watch(<span class="hljs-built_in">number</span>,async (newVal,oldVal)=&gt;&#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;watch&quot;</span>,newVal)<br>&#125;)<br><span class="hljs-comment">// mounted 生命周期。</span><br><span class="hljs-comment">//调用方法</span><br>onMounted(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>  getUserInfo()<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>通过创建一个响应式数据，字段名为number给定初始值为Number类型</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">const</span> number =<span class="hljs-built_in">ref</span>(<span class="hljs-number">11</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO个人博客搭建</title>
    <link href="/2022/09/25/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/09/25/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装git"><a href="#一、安装git" class="headerlink" title="一、安装git"></a>一、安装git</h1><h1 id="二、安装node-js"><a href="#二、安装node-js" class="headerlink" title="二、安装node.js"></a>二、安装node.js</h1><h1 id="三、安装typora"><a href="#三、安装typora" class="headerlink" title="三、安装typora"></a>三、安装typora</h1><h1 id="四、安装hexo博客"><a href="#四、安装hexo博客" class="headerlink" title="四、安装hexo博客"></a>四、安装hexo博客</h1><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">cnpm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">hexo -v  <span class="hljs-operator">=</span><span class="hljs-operator">=</span>查看安装是否成功以及版本<br></code></pre></td></tr></table></figure><h4 id="1、建站"><a href="#1、建站" class="headerlink" title="1、建站"></a>1、建站</h4><p>hexo init  name 初始化博客 &#x2F;&#x2F;创建一个name文件夹</p><p>hexo s开启服务</p><p>服务启动后即可使用： <a href="http://localhost:4000/">http://localhost:4000/</a> 进行访问</p><p>随后可进行私人定制修改等操作</p><h5 id="source-x2F-posts-markdown文件存放目录"><a href="#source-x2F-posts-markdown文件存放目录" class="headerlink" title="source&#x2F;_posts:markdown文件存放目录"></a>source&#x2F;_posts:markdown文件存放目录</h5><h3 id="五、上传github-托管"><a href="#五、上传github-托管" class="headerlink" title="五、上传github 托管"></a>五、上传github 托管</h3><p>1、配置github的用户名邮箱</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">打开git bash<br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;yourname&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>2、然后创建SSH</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span> <span class="hljs-regexp">//y</span>ouremail输入你GitHub的邮箱<br></code></pre></td></tr></table></figure><p>​这个时候就会生成.ssh文件夹在你的计算机中,我的是在C:\Users.ssh</p><p>3、而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key把你的id_rsa.pub里面的信息复制进去.</p><p>4、返回到Git Bash</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">git@</span>github.com <span class="hljs-comment">//查看是否成功，</span><br></code></pre></td></tr></table></figure><p>看见sucessfully字样即成功。</p><p>5、随后将hexo与github关联起来</p><p>进入hexo文件夹，编辑——config.yml配置文件</p><p>修改</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">deploy：<br><br>​type：git<br><br>​repo：https：<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/name/</span>name.github.io.git<br><br>​branch：master<br>住：：（冒号）后面带一个空格<br></code></pre></td></tr></table></figure><p>6、安装deploy-git也就是部署的命令,这样你才能用命令部署到GitHub</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>7、执行以下三条命令将其部署到github中，稍等片刻即可访问</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean   <span class="hljs-comment">//hexo clean清除了你之前生成的东西，也可以不加</span><br>hexo <span class="hljs-keyword">generate</span> 或者 hexo g   <span class="hljs-comment">//生成静态文章，可以用 hexo g缩写</span><br>hexo deploy 或者 hexo d    <span class="hljs-comment">//部署文章，可以用hexo d缩写,注意deploy时可能要你输入username和password</span><br></code></pre></td></tr></table></figure><p>看到deploy done ：git字样即成功部署</p><p>随后即可访问</p><p>http：&#x2F;&#x2F;yourname.giuhub.io进行访问</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitee上传注意事项</title>
    <link href="/2022/09/25/gitee%E4%B8%8A%E4%BC%A0%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2022/09/25/gitee%E4%B8%8A%E4%BC%A0%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<p>和方法1的差别，在于先创建仓库。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git init <br>$ git remote add origin https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/用户个性地址/</span>HelloGitee.git<br></code></pre></td></tr></table></figure><p>这样就完成了版本的一次初始化。<br>接下去，进入你已经初始化好的或者克隆仓库的目录,然后执行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ git <span class="hljs-built_in">add</span> .<br><br></code></pre></td></tr></table></figure><p>修改&#x2F;添加文件，否则与原文件相比就没有变动。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>git add .<br><span class="hljs-variable">$ </span>git commit -m <span class="hljs-string">&quot;第一次提交&quot;</span><br><span class="hljs-variable">$ </span>git push origin master<br></code></pre></td></tr></table></figure><p>然后如果需要账号密码的话就输入账号密码，这样就完成了一次提交。此时，你可以在你的个人面板、仓库主页查看到你的提交记录。</p><p>在新建仓库时，如果在 Gitee 平台仓库上已经存在 readme 或其他文件，在提交时可能会存在冲突，这时用户需要选择的是保留线上的文件或者舍弃线上的文件，如果您舍弃线上的文件，则在推送时选择强制推送，强制推送需要执行下面的命令(默认不推荐该行为)：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git push origin <span class="hljs-keyword">master</span> <span class="hljs-title">-f</span><br></code></pre></td></tr></table></figure><p>如果您选择保留线上的 readme 文件,则需要先执行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git pull origin <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><p>#若需要删除重新上传<br>1、先删除文件夹中 .git 文件夹<br>2、重新进行上述操作即可。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库命名规范</title>
    <link href="/2022/09/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <url>/2022/09/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h3 id="1-1-基本命名原则"><a href="#1-1-基本命名原则" class="headerlink" title="1.1 基本命名原则"></a><strong>1.1 基本命名原则</strong></h3><p>以下基本原则适用于所有数据库对象命名，如无特别说明则为强制规范。<br><strong>Ø规范：遵循行业规范</strong><br>当有相关国家&#x2F;行业强制性数据结构标准规范存在时，用于存储某业务数据的业务表在表名命名上原则上应该遵从标准规定，其表中相关字段的中文名称（即数据项名称）若标准规范上有规定的应遵循规定。此外，若标准规范上对数据项的类型、长度有规定的，原则上也应当遵循或保证能直接兼容保存和访问。<br><strong>Ø规范：字母全部大写原则</strong><br>所有数据库对象命名字母全部大写。<a href="https://so.csdn.net/so/search?q=Oracle&spm=1001.2101.3001.7020">Oracle</a>对大小写不敏感，但是有些数据库对大小写敏感，统一大写有助于在多个数据库间移植。<br><strong>Ø规范：字符范围原则</strong><br>只能使用英文字母、下划线、数字进行命名，首位字符必须是英文字母。<br><strong>Ø规范：分段命名原则</strong><br>命名中多个单词间采用下划线分隔，<strong>以便阅读同时方便某些工具对数据库对象的映射。如XXX_XXX_XXX，但不限于三段式</strong>。<br><strong>Ø规范：勿用保留词</strong><br>数据库对象命名不能直接使用数据库保留关键字，但分段中可以使用。如USER不能用于表名、列名等，但是USER_NAME可以用于列名，USER_INFO也可以用于表名。详细保留关键字请参见最后第6.1节，保留字。<br><strong>Ø规范：简单命名原则</strong><br>命名尽可能简单，避免太长的命名，尽量使用缩写形式，但是缩写也要能够表达命名的含义。数据库对象命名总长度不得超过30字节，以免超过数据库命名长度限制（Oracle有30的限制，Mysql为64，SQL SERVER也是64）。建议每个单词分段长度不要超过6位。<br><strong>Ø建议：富有含义原则</strong><br>数据库对象命名通常用能表示其内容或者含义的英文单词或其缩写表示也可用其中文名称各字词的拼音首写字母或者拼音简写方式表示。数字应尽量避免使用。<br>此外在公安行业，对于业务表上表示业务属性的字段名（即字段英文名）的命名，业内普遍默认的规范通常是以其中文名称的每个汉字拼音首字母组成。考虑行业习惯和通常思路建议用：建议用于表示用户业务应用属性的数据项字段名采用中文拼音首字母命名，对于其它纯粹用于应用系统内部使用的则尽量使用英文单词进行命名。另外，当按中文名称拼音首字母组合出来后出现与其它字段名重名时，则将最后命名的这个数据项的最后一个汉字用其完整拼音字母代替。<br><strong>Ø建议：同义性原则</strong><br>对于同一含义尽量使用相同的单词命名，不管使用英文单词、英文缩写还是拼音首字母，以免引起误解。如TELEPNHOE的A表中表示固定电话号码，在B表中就不应该用于表示移动电话号码。尽量避免同一单词表示多种含义的情况。<br><strong>Ø建议：命名方式一致原则</strong><br>在一个系统、一个项目中尽量采用一致的命名方式，都采用英文单词或者拼音首字母。尤其要避免在一个对象命名中同时采用英文单词和拼音首字母。如确实需要在一个项目中采用两种命名方式，考虑系统功能设计相关表（开发）使用英文单词命名，业务相关的表（实施）使用拼音首字母。<br><strong>Ø建议：扩展性原则</strong><br>各系统或者项目在遵循本规范的基础上可以根据需要制定更明确的规范细则，以满足项目管理需要。如对模块进行统一命名，然后用于表名的前缀。建议每个系统在启动开发时建立数据字典，管理命名中使用的英文单词、英文单词缩写、拼音首字母缩写等，对用于命名的单词进行统一管理。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发</title>
    <link href="/2022/09/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F(1)/"/>
    <url>/2022/09/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="微信小程序开发从入门到实战"><a href="#微信小程序开发从入门到实战" class="headerlink" title="微信小程序开发从入门到实战"></a><font color="#00a9fb" >微信小程序开发从入门到实战</font></h1><p>&amp;#8195;&amp;#8195;本文将为您详细讲解安卓微信小程序从入门开发到应用上线的完整过程&amp;#8195;&amp;#8195;&amp;#8195;&amp;#8195;&amp;#8195;&amp;#8195;&amp;#8195;<font color="#f3f3f3">制作人——熊翔</font></p><h1 id="1、第一个属于自己的项目"><a href="#1、第一个属于自己的项目" class="headerlink" title="1、第一个属于自己的项目"></a>1、第一个属于自己的项目</h1><h2 id="1-1、账号注册"><a href="#1-1、账号注册" class="headerlink" title="1.1、账号注册"></a>1.1、账号注册</h2><p>&amp;#8195;&amp;#8195;目前微信小程序的注册范围已经非常全面，大家可以根据自己的需求选择对应的主体进行注册，不过需要注意的是，目前以个人为主体的小程序依然<strong>不支持</strong>微信支付</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191122223712878.png"></p><p><a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1&token=&lang=zh_CN"><font color="#000000" >直接进入微信公众平台进行注册</font></a></p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191124172723920.png" alt="image-20191124172723920"></p><p>&amp;#8195;&amp;#8195;注册完成后在微信公众平台登录后就是小程序后台管理页面，你可以在这里对小程序进行丰富的操作，这里我们主要是获取AppID，以便下一步安装好开发工具后创建项目</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191122235257048.png" alt="image-20191122235257048"></p><h2 id="1-2、安装开发工具"><a href="#1-2、安装开发工具" class="headerlink" title="1.2、安装开发工具"></a>1.2、安装开发工具</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank"><strong>官网下载地址：https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</strong></a></p><p>下载完成安装后会先进入新建项目页面，在这里新建时可以输入我们自己的AppID，同时可在微信后台<strong>成员管理</strong>页面添加成员，其他人员也可以直接使用自己的微信扫码进入开发工具对项目进行开发</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191123000425975.png" alt="image-20191123000425975"></p><p>内容填写完毕后点击<strong>新建</strong>，此时项目新建完成</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191124173602921.png" alt="image-20191124173602921"></p><h1 id="2、微信开发工具介绍"><a href="#2、微信开发工具介绍" class="headerlink" title="2、微信开发工具介绍"></a>2、微信开发工具介绍</h1><p>详细使用可以对照<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/page.html">官方文档</a></p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191124175041021.png" alt="image-20191124175041021"></p><h1 id="3、小程序目录结构"><a href="#3、小程序目录结构" class="headerlink" title="3、小程序目录结构"></a>3、小程序目录结构</h1><p>小程序开发框架的目标是通过尽可能简单、高效的方式让开发者可以在微信中开发具有原生 APP 体验的服务。</p><p>整个小程序框架系统分为两部分：**<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/">逻辑层</a>**（App Service）和 **<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/">视图层</a>**（View）。小程序提供了自己的视图层描述语言 <code>WXML</code> 和 <code>WXSS</code>，以及基于 <code>JavaScript</code> 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑。</p><h2 id="3-1、小程序文件结构"><a href="#3-1、小程序文件结构" class="headerlink" title="3.1、小程序文件结构"></a>3.1、小程序文件结构</h2><table><thead><tr><th align="center">作用</th><th align="center">文件类型</th></tr></thead><tbody><tr><td align="center">逻辑</td><td align="center">js</td></tr><tr><td align="center">结构</td><td align="center">wxml</td></tr><tr><td align="center">配置</td><td align="center">json</td></tr><tr><td align="center">样式表</td><td align="center">wxss</td></tr></tbody></table><h2 id="3-2、简单项目文件结构"><a href="#3-2、简单项目文件结构" class="headerlink" title="3.2、简单项目文件结构"></a>3.2、简单项目文件结构</h2><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191124210629269.png" alt="image-20191124210629269"></p><h1 id="4、小程序配置文件"><a href="#4、小程序配置文件" class="headerlink" title="4、小程序配置文件"></a>4、小程序配置文件</h1><p>小程序主要有两种配置文件，全局配置 <code>app.json </code>和页面配置 <code>.json</code> </p><blockquote><p>注意:配置文件中要严格遵循格式限制,不能出现任何注释,强行要写可以仿照json格式加入,这种方式运行时会有**<font color="#aaaa00">黄色的警告</font>**出现</p></blockquote><h2 id="4-1、全局配置"><a href="#4-1、全局配置" class="headerlink" title="4.1、全局配置"></a>4.1、全局配置</h2><p> 小程序根目录下的 <code>app.json</code> 文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。 </p><p> 完整配置项说明请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html">小程序全局配置</a> </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;pages/logs/index&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Demo&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tabBar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;首页&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/logs/logs&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;日志&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;networkTimeout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10000</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;downloadFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10000</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;navigateToMiniProgramAppIdList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;wx...........&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>基本设置项</p><p>pages</p><p>tabBar</p><p>networkTimeout</p><p>debug</p><p>navigationStyle</p><h2 id="4-2、页面配置"><a href="#4-2、页面配置" class="headerlink" title="4.2、页面配置"></a>4.2、页面配置</h2><p>每一个小程序页面也可以使用同名 <code>.json</code> 文件来对本页面的窗口表现进行配置，页面中配置项会覆盖 <code>app.json</code> 的 <code>window</code> 中相同的配置项。</p><p>完整配置项说明请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html">小程序页面配置</a></p><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;navigationBarBackgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;navigationBarTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;微信接口功能演示&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#eeeeee&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;backgroundTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;light&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-3、sitemap-配置"><a href="#4-3、sitemap-配置" class="headerlink" title="4.3、sitemap 配置"></a>4.3、sitemap 配置</h2><p>小程序根目录下的 <code>sitemap.json</code> 文件用来配置小程序及其页面是否允许被微信索引。</p><p>完整配置项说明请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html">小程序 sitemap 配置</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;allow&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;page&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;path/to/page&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;matching&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inclusive&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;disallow&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;page&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;allow&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;page&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p> 包含 <code>a 和 b</code> 参数的 <code>path/to/page</code> 页面会被微信优先索引，其他页面都会被索引，例如： </p><ul><li><code>path/to/page?a=1&amp;b=2</code> &#x3D;&gt; 优先被索引</li><li><code>path/to/page?a=1&amp;b=2&amp;c=3</code> &#x3D;&gt; 优先被索引</li><li><code>path/to/page</code> &#x3D;&gt; 不被索引</li><li><code>path/to/page?a=1</code> &#x3D;&gt; 不被索引</li><li>其他页面不会被索引</li></ul><blockquote><p><strong>注：没有 sitemap.json 则默认所有页面都能被索引</strong></p><p><strong>注：<code>&#123;&quot;action&quot;: &quot;allow&quot;, &quot;page&quot;: &quot;\*&quot;&#125;</code> 是优先级最低的默认规则，未显式指明 “disallow” 的都默认被索引</strong></p></blockquote><h1 id="5、WXML-语法参考"><a href="#5、WXML-语法参考" class="headerlink" title="5、WXML 语法参考"></a>5、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/"><font color="#000000">WXML 语法参考</font></a></h1><p>WXML（WeiXin Markup Language）是框架设计的一套标签语言，结合<a href="https://developers.weixin.qq.com/miniprogram/dev/component/">基础组件</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html">事件系统</a>，可以构建出页面的结构。</p><p>要完整了解 WXML 语法，请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/">WXML 语法参考</a>。</p><h2 id="5-1、数据绑定"><a href="#5-1、数据绑定" class="headerlink" title="5.1、数据绑定"></a>5.1、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/data.html"><font color="#000000">数据绑定</font></a></h2><p> WXML 中的动态数据均来自对应 Page 的 data。 </p><p><strong>响应的数据绑定</strong></p><p>框架的核心是一个响应的数据绑定系统，可以让数据与视图非常简单地保持同步。当做数据修改的时候，只需要在逻辑层修改数据，视图层就会做相应的更新。</p><p>通过这个简单的例子来看：</p><p><a href="https://developers.weixin.qq.com/s/l0gLEKmv6gZa">在开发者工具中预览效果</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- This is our View --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> Hello &#123;&#123;name&#125;&#125;! <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span> Click me! <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// This is our App Service.</span><br><span class="hljs-comment">// This is our data.</span><br><span class="hljs-keyword">var</span> helloData = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;WeChat&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// Register a Page.</span><br><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: helloData,<br>  <span class="hljs-attr">changeName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-comment">// sent data change to view</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;MINA&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="5-1-1、简单绑定"><a href="#5-1-1、简单绑定" class="headerlink" title="5.1.1、简单绑定"></a>5.1.1、简单绑定</h3><p>数据绑定使用 Mustache 语法（双大括号）将变量包起来，可以作用于：</p><h4 id="5-1-1-1、内容"><a href="#5-1-1-1、内容" class="headerlink" title="5.1.1.1、内容"></a>5.1.1.1、内容</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> &#123;&#123; message &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello MINA!&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="5-1-1-2、组件属性-需要在双引号之内"><a href="#5-1-1-2、组件属性-需要在双引号之内" class="headerlink" title="5.1.1.2、组件属性(需要在双引号之内)"></a>5.1.1.2、组件属性(需要在双引号之内)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;item-&#123;&#123;id&#125;&#125;&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">0</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="5-1-1-3、控制属性-需要在双引号之内"><a href="#5-1-1-3、控制属性-需要在双引号之内" class="headerlink" title="5.1.1.3、控制属性(需要在双引号之内)"></a>5.1.1.3、控制属性(需要在双引号之内)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;condition&#125;&#125;&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">condition</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="5-1-1-4、关键字-需要在双引号之内"><a href="#5-1-1-4、关键字-需要在双引号之内" class="headerlink" title="5.1.1.4、关键字(需要在双引号之内)"></a>5.1.1.4、关键字(需要在双引号之内)</h4><p><code>true</code>：boolean 类型的 true，代表真值。</p><p><code>false</code>： boolean 类型的 false，代表假值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">checkbox</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;&#123;&#123;false&#125;&#125;&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">checkbox</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p> <em><strong>特别注意：不要直接写 <code>checked=&quot;false&quot;</code>，其计算结果是一个字符串，转成 boolean 类型后代表真值。</strong></em> </p></blockquote><h3 id="5-1-2、运算"><a href="#5-1-2、运算" class="headerlink" title="5.1.2、运算"></a>5.1.2、运算</h3><p> 可以在 <code>&#123;&#123;&#125;&#125;</code> 内进行简单的运算，支持的有如下几种方式： </p><h4 id="5-1-2-1、三元运算"><a href="#5-1-2-1、三元运算" class="headerlink" title="5.1.2.1、三元运算"></a>5.1.2.1、三元运算</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">hidden</span>=<span class="hljs-string">&quot;&#123;&#123;flag ? true : false&#125;&#125;&quot;</span>&gt;</span> Hidden <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-1-2-2、算数运算"><a href="#5-1-2-2、算数运算" class="headerlink" title="5.1.2.2、算数运算"></a>5.1.2.2、算数运算</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> &#123;&#123;a + b&#125;&#125; + &#123;&#123;c&#125;&#125; + d <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">c</span>: <span class="hljs-number">3</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>view中的内容为 <code>3 + 3 + d</code>。</p><h4 id="5-1-2-3、逻辑判断"><a href="#5-1-2-3、逻辑判断" class="headerlink" title="5.1.2.3、逻辑判断"></a>5.1.2.3、逻辑判断</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;length &gt; 5&#125;&#125;&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-1-2-4、字符串运算"><a href="#5-1-2-4、字符串运算" class="headerlink" title="5.1.2.4、字符串运算"></a>5.1.2.4、字符串运算</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;&quot;hello&quot; + name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>Page(&#123;<br>  data:&#123;<br>    name: &#x27;MINA&#x27;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="5-1-2-5、数据路径运算"><a href="#5-1-2-5、数据路径运算" class="headerlink" title="5.1.2.5、数据路径运算"></a>5.1.2.5、数据路径运算</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;object.key&#125;&#125; &#123;&#123;array[0]&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>Page(&#123;<br>  data: &#123;<br>    object: &#123;<br>      key: &#x27;Hello &#x27;<br>    &#125;,<br>    array: [&#x27;MINA&#x27;]<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="5-1-3、组合"><a href="#5-1-3、组合" class="headerlink" title="5.1.3、组合"></a>5.1.3、组合</h3><p> 也可以在 Mustache 内直接进行组合，构成新的对象或者数组。 </p><h4 id="5-1-3-1、数组"><a href="#5-1-3-1、数组" class="headerlink" title="5.1.3.1、数组"></a>5.1.3.1、数组</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;[zero, 1, 2, 3, 4]&#125;&#125;&quot;</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>Page(&#123;<br>  data: &#123;<br>    zero: 0<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>最终组合成数组<code>[0, 1, 2, 3, 4]</code>。</p><h4 id="5-1-3-2、对象"><a href="#5-1-3-2、对象" class="headerlink" title="5.1.3.2、对象"></a>5.1.3.2、对象</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;objectCombine&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;&#123;&#123;for: a, bar: b&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>Page(&#123;<br>  data: &#123;<br>    a: 1,<br>    b: 2<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>最终组合成的对象是 <code>&#123;for: 1, bar: 2&#125;</code></p><p>也可以用扩展运算符 <code>...</code> 来将一个对象展开</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;objectCombine&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;&#123;&#123;...obj1, ...obj2, e: 5&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>Page(&#123;<br>  data: &#123;<br>    obj1: &#123;<br>      a: 1,<br>      b: 2<br>    &#125;,<br>    obj2: &#123;<br>      c: 3,<br>      d: 4<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>最终组合成的对象是 <code>&#123;a: 1, b: 2, c: 3, d: 4, e: 5&#125;</code>。</p><p>如果对象的 key 和 value 相同，也可以间接地表达。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;objectCombine&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;&#123;&#123;foo, bar&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>Page(&#123;<br>  data: &#123;<br>    foo: &#x27;my-foo&#x27;,<br>    bar: &#x27;my-bar&#x27;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>最终组合成的对象是 <code>&#123;foo: &#39;my-foo&#39;, bar:&#39;my-bar&#39;&#125;</code>。</p><p><strong>注意</strong>：上述方式可以随意组合，但是如有存在变量名相同的情况，后边的会覆盖前面，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;objectCombine&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;&#123;&#123;...obj1, ...obj2, a, c: 6&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>Page(&#123;<br>  data: &#123;<br>    obj1: &#123;<br>      a: 1,<br>      b: 2<br>    &#125;,<br>    obj2: &#123;<br>      b: 3,<br>      c: 4<br>    &#125;,<br>    a: 5<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>最终组合成的对象是 <code>&#123;a: 5, b: 3, c: 6&#125;</code>。</p><blockquote><p><strong>注意：</strong> 花括号和引号之间如果有空格，将最终被解析成为字符串</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;[1,2,3]&#125;&#125; &quot;</span>&gt;</span><br>  &#123;&#123;item&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等同于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;[1,2,3] + &#x27; &#x27;&#125;&#125;&quot;</span>&gt;</span><br>  &#123;&#123;item&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-2、列表渲染"><a href="#5-2、列表渲染" class="headerlink" title="5.2、列表渲染"></a>5.2、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/list.html"><font color="#000000">列表渲染</font></a></h2><h3 id="5-2-1、wx-for"><a href="#5-2-1、wx-for" class="headerlink" title="5.2.1、wx:for"></a>5.2.1、wx:for</h3><p>在组件上使用 <code>wx:for</code> 控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。</p><p>默认数组的当前项的下标变量名默认为 <code>index</code>，数组当前项的变量名默认为 <code>item</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;array&#125;&#125;&quot;</span>&gt;</span><br>  &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>Page(&#123;<br>  data: &#123;<br>    array: [&#123;<br>      message: &#x27;foo&#x27;,<br>    &#125;, &#123;<br>      message: &#x27;bar&#x27;<br>    &#125;]<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用 <code>wx:for-item</code> 可以指定数组当前元素的变量名，</p><p>使用 <code>wx:for-index</code> 可以指定数组当前下标的变量名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;array&#125;&#125;&quot;</span> <span class="hljs-attr">wx:for-index</span>=<span class="hljs-string">&quot;idx&quot;</span> <span class="hljs-attr">wx:for-item</span>=<span class="hljs-string">&quot;itemName&quot;</span>&gt;</span><br>  &#123;&#123;idx&#125;&#125;: &#123;&#123;itemName.message&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>wx:for</code> 也可以嵌套，下边是一个九九乘法表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#125;&#125;&quot;</span> <span class="hljs-attr">wx:for-item</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#125;&#125;&quot;</span> <span class="hljs-attr">wx:for-item</span>=<span class="hljs-string">&quot;j&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;i &lt;= j&#125;&#125;&quot;</span>&gt;</span><br>      &#123;&#123;i&#125;&#125; * &#123;&#123;j&#125;&#125; = &#123;&#123;i * j&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-2、block-wx-for"><a href="#5-2-2、block-wx-for" class="headerlink" title="5.2.2、block wx:for"></a>5.2.2、block wx:for</h3><p>类似 <code>block wx:if</code>，也可以将 <code>wx:for</code> 用在&#96;&#96;标签上，以渲染一个包含多节点的结构块。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;[1, 2, 3]&#125;&#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> &#123;&#123;index&#125;&#125;: <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-3、wx-key"><a href="#5-2-3、wx-key" class="headerlink" title="5.2.3、wx:key"></a>5.2.3、wx:key</h3><p>如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">input</a> 中的输入内容，<a href="https://developers.weixin.qq.com/miniprogram/dev/component/switch.html">switch</a> 的选中状态），需要使用 <code>wx:key</code> 来指定列表中项目的唯一的标识符。</p><p><code>wx:key</code> 的值以两种形式提供</p><ol><li><strong>字符串</strong>，代表在 for 循环的 <strong>array 中 item 的某个 property</strong>，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。</li><li><strong>保留关键字 <code>*this</code></strong> 代表在 for 循环中的 <strong>item 本身</strong>，这种表示需要 item 本身是一个唯一的字符串或者数字，如：</li></ol><p>当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。</p><p><strong>如不提供 <code>wx:key</code>，会报一个 <code>warning</code>， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。</strong></p><p><strong>示例代码：</strong></p><p><a href="https://developers.weixin.qq.com/s/tpg5tKmv6kZt">在开发者工具中预览效果</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">switch</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;objectArray&#125;&#125;&quot;</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;unique&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: block;&quot;</span>&gt;</span> &#123;&#123;item.id&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">switch</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;switch&quot;</span>&gt;</span> Switch <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;addToFront&quot;</span>&gt;</span> Add to the front <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">switch</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;numberArray&#125;&#125;&quot;</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;*this&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: block;&quot;</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">switch</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;addNumberToFront&quot;</span>&gt;</span> Add to the front <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">objectArray</span>: [<br>      &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">unique</span>: <span class="hljs-string">&#x27;unique_5&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">unique</span>: <span class="hljs-string">&#x27;unique_4&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">unique</span>: <span class="hljs-string">&#x27;unique_3&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">unique</span>: <span class="hljs-string">&#x27;unique_2&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">unique</span>: <span class="hljs-string">&#x27;unique_1&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">unique</span>: <span class="hljs-string">&#x27;unique_0&#x27;</span>&#125;,<br>    ],<br>    <span class="hljs-attr">numberArray</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>  &#125;,<br>  <span class="hljs-attr">switch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">const</span> length = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">objectArray</span>.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>      <span class="hljs-keyword">const</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * length)<br>      <span class="hljs-keyword">const</span> y = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * length)<br>      <span class="hljs-keyword">const</span> temp = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">objectArray</span>[x]<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">objectArray</span>[x] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">objectArray</span>[y]<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">objectArray</span>[y] = temp<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">objectArray</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">objectArray</span><br>    &#125;)<br>  &#125;,<br>  <span class="hljs-attr">addToFront</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">const</span> length = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">objectArray</span>.<span class="hljs-property">length</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">objectArray</span> = [&#123;<span class="hljs-attr">id</span>: length, <span class="hljs-attr">unique</span>: <span class="hljs-string">&#x27;unique_&#x27;</span> + length&#125;].<span class="hljs-title function_">concat</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">objectArray</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">objectArray</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">objectArray</span><br>    &#125;)<br>  &#125;,<br>  <span class="hljs-attr">addNumberToFront</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">numberArray</span> = [ <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">numberArray</span>.<span class="hljs-property">length</span> + <span class="hljs-number">1</span> ].<span class="hljs-title function_">concat</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">numberArray</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">numberArray</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">numberArray</span><br>    &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>当 <code>wx:for</code> 的值为字符串时，会将字符串解析成字符串数组</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;array&quot;</span>&gt;</span><br>  &#123;&#123;item&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>等同于</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;[&#x27;a&#x27;,&#x27;r&#x27;,&#x27;r&#x27;,&#x27;a&#x27;,&#x27;y&#x27;]&#125;&#125;&quot;</span>&gt;</span><br>  &#123;&#123;item&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 花括号和引号之间如果有空格，将最终被解析成为字符串</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;[1,2,3]&#125;&#125; &quot;</span>&gt;</span><br>  &#123;&#123;item&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>等同于</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;[1,2,3] + &#x27; &#x27;&#125;&#125;&quot;</span> &gt;</span><br>  &#123;&#123;item&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-3、条件渲染"><a href="#5-3、条件渲染" class="headerlink" title="5.3、条件渲染"></a>5.3、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/conditional.html"><font color="#000000">条件渲染</font></a></h2><h3 id="5-3-1、wx-if"><a href="#5-3-1、wx-if" class="headerlink" title="5.3.1、wx:if"></a>5.3.1、wx:if</h3><p>在框架中，使用 <code>wx:if=&quot;&quot;</code> 来判断是否需要渲染该代码块：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;condition&#125;&#125;&quot;</span>&gt;</span> True <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以用 <code>wx:elif</code> 和 <code>wx:else</code> 来添加一个 else 块：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;length &gt; 5&#125;&#125;&quot;</span>&gt;</span> 1 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:elif</span>=<span class="hljs-string">&quot;&#123;&#123;length &gt; 2&#125;&#125;&quot;</span>&gt;</span> 2 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:else</span>&gt;</span> 3 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-3-2、block-wx-if"><a href="#5-3-2、block-wx-if" class="headerlink" title="5.3.2、block wx:if"></a>5.3.2、block wx:if</h3><p>因为 <code>wx:if</code> 是一个控制属性，需要将它添加到一个标签上。如果要一次性判断多个组件标签， 可以使用一个 &lt;block&#x2F;&gt;   标签将多个组件包装起来，并在上边使用 <code>wx:if</code> 控制属性 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> view1 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> view2 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> <strong>&#96;&#96;</strong> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</p></blockquote><h3 id="5-3-3、wx-if-vs-hidden"><a href="#5-3-3、wx-if-vs-hidden" class="headerlink" title="5.3.3、wx:if vs hidden"></a>5.3.3、<code>wx:if</code> vs <code>hidden</code></h3><p>因为 <code>wx:if</code> 之中的模板也可能包含数据绑定，所以当 <code>wx:if</code> 的条件值切换时，框架有一个局部渲染的过程，因为它会确保条件块在切换时销毁或重新渲染。</p><p>同时 <code>wx:if</code> 也是<strong>惰性的</strong>，如果在初始渲染条件为 <code>false</code>，框架什么也不做，在条件第一次变成真的时候才开始局部渲染。</p><p>相比之下，<code>hidden</code> 就简单的多，组件始终会被渲染，只是简单的控制显示与隐藏。</p><p>一般来说，<code>wx:if</code> 有更高的切换消耗而 <code>hidden</code> 有更高的初始渲染消耗。因此，如果需要频繁切换的情景下，用 <code>hidden</code> 更好，如果在运行时条件不大可能改变则 <code>wx:if</code> 较好。</p><h2 id="5-4、模板"><a href="#5-4、模板" class="headerlink" title="5.4、模板"></a>5.4、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/template.html"><font color="#000000">模板</font></a></h2><p>WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。</p><h3 id="5-4-1、定义模板"><a href="#5-4-1、定义模板" class="headerlink" title="5.4.1、定义模板"></a>5.4.1、定义模板</h3><p>使用 name 属性，作为模板的名字。然后在<code>&lt;template/&gt;</code>内定义代码片段，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  index: int</span><br><span class="hljs-comment">  msg: string</span><br><span class="hljs-comment">  time: string</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;msgItem&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span> &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span> Time: &#123;&#123;time&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-4-2、使用模板"><a href="#5-4-2、使用模板" class="headerlink" title="5.4.2、使用模板"></a>5.4.2、使用模板</h3><p>使用 is 属性，声明需要的使用的模板，然后将模板所需要的 data 传入，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;msgItem&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;&#123;&#123;...item&#125;&#125;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">item</span>: &#123;<br>      <span class="hljs-attr">index</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;this is a template&#x27;</span>,<br>      <span class="hljs-attr">time</span>: <span class="hljs-string">&#x27;2016-09-15&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>is 属性可以使用 Mustache 语法，来动态决定具体需要渲染哪个模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;odd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> odd <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;even&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> even <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;[1, 2, 3, 4, 5]&#125;&#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;&#123;&#123;item % 2 == 0 ? &#x27;even&#x27; : &#x27;odd&#x27;&#125;&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-4-3、模板的作用域"><a href="#5-4-3、模板的作用域" class="headerlink" title="5.4.3、模板的作用域"></a>5.4.3、模板的作用域</h3><p>模板拥有自己的作用域，只能使用 data 传入的数据以及模板定义文件中定义的 <code>&lt;wxs /&gt;</code>模块。</p><h2 id="5-5、引用"><a href="#5-5、引用" class="headerlink" title="5.5、引用"></a>5.5、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/import.html"><font color="#000000">引用</font></a></h2><p>WXML 提供两种文件引用方式<code>import</code>和<code>include</code>。</p><h3 id="5-5-1、import"><a href="#5-5-1、import" class="headerlink" title="5.5.1、import"></a>5.5.1、import</h3><p><code>import</code>可以在该文件中使用目标文件定义的<code>template</code>，如：</p><p>在 item.wxml 中定义了一个叫<code>item</code>的<code>template</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- item.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 index.wxml 中引用了 item.wxml，就可以使用<code>item</code>模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;item.wxml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;&#123;&#123;text: &#x27;forbar&#x27;&#125;&#125;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-5-2、import-的作用域"><a href="#5-5-2、import-的作用域" class="headerlink" title="5.5.2、import 的作用域"></a>5.5.2、import 的作用域</h3><p>import 有作用域的概念，即只会 import 目标文件中定义的 template，而不会 import 目标文件 import 的 template。</p><p>**如：C import B，B import A，在C中可以使用B定义的<code>template</code>，在B中可以使用A定义的<code>template</code>，但是C不能使用A定义的<code>template</code>**。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- A.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span> A template <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- B.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;a.wxml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;B&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span> B template <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- C.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;b.wxml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;A&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- Error! Can not use tempalte when not import A. --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;B&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-5-3、include"><a href="#5-5-3、include" class="headerlink" title="5.5.3、include"></a>5.5.3、include</h3><p> <code>include</code> 可以将目标文件<strong>除了</strong><code>&lt;template/&gt;</code> <code>&lt;wxs/&gt;</code> 外的整个代码引入，相当于是拷贝到 <code>include</code> 位置，如： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;header.wxml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> body <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;footer.wxml&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- header.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> header <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- footer.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> footer <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="6、WXS-语法参考"><a href="#6、WXS-语法参考" class="headerlink" title="6、WXS 语法参考"></a>6、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/"><font color="#000000">WXS 语法参考</font></a></h1><p>WXS（WeiXin Script）是小程序的一套脚本语言，结合 <code>WXML</code>，可以构建出页面的结构。</p><p>WXS 与 JavaScript 是不同的语言，有自己的语法，并不和 JavaScript 一致。</p><h2 id="6-1、-WXS-模块"><a href="#6-1、-WXS-模块" class="headerlink" title="6.1、 WXS 模块"></a>6.1、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/01wxs-module.html"><font color="#000000"> WXS 模块</font></a></h2><p> WXS 代码可以编写在 wxml 文件中的 <code>&lt;wxs&gt;</code>标签内，或以 <code>.wxs</code> 为后缀名的文件内。 </p><p>每一个 <code>.wxs</code> 文件和  <code>&lt;wxs&gt;</code>标签都是一个单独的模块。</p><p>每个模块都有自己独立的作用域。即在一个模块里面定义的变量与函数，默认为私有的，对其他模块不可见。</p><p>一个模块要想对外暴露其内部的私有变量与函数，只能通过 <code>module.exports</code> 实现。</p><p><strong>.wxs 文件</strong></p><p> 创建 <code>.wxs</code> 文件，在其中直接编写 WXS 脚本。 该 <code>.wxs</code> 文件可以被其他的<code> .wxs</code> 文件 或 WXML 中的 <code>&lt;wxs&gt;</code> 标签引用。</p><p><strong>module 对象</strong></p><p>每个 <code>wxs</code> 模块均有一个内置的 <code>module</code> 对象。</p><p><strong>属性</strong></p><ul><li><code>exports</code>: 通过该属性，可以对外共享本模块的私有变量与函数。</li></ul><p><strong>module 属性</strong></p><p>module 属性是当前 <code>&lt;wxs&gt;</code>标签的模块名。在单个 wxml 文件内，建议其值唯一。有重复模块名则按照先后顺序覆盖（后者覆盖前者）。不同文件之间的 wxs 模块名不会相互覆盖。</p><p>module 属性值的命名必须符合下面两个规则：</p><ul><li>首字符必须是：字母（a-zA-Z），下划线（_）</li><li>剩余字符可以是：字母（a-zA-Z），下划线（_）， 数字（0-9）</li></ul><p><strong>require函数</strong></p><p>在<code>.wxs</code>模块中引用其他 <code>wxs</code> 文件模块，可以使用 <code>require</code> 函数。</p><p>引用的时候，要注意如下几点：</p><ul><li>只能引用 <code>.wxs</code> 文件模块，且必须使用相对路径。</li><li><code>wxs</code> 模块均为单例，<code>wxs</code> 模块在第一次被引用时，会自动初始化为单例对象。多个页面，多个地方，多次引用，使用的都是同一个 <code>wxs</code> 模块对象。</li><li>如果一个 <code>wxs</code> 模块在定义之后，一直没有被引用，则该模块不会被解析与运行。</li></ul><p><strong>src 属性</strong></p><p>src 属性可以用来引用其他的 <code>wxs</code> 文件模块。</p><p>引用的时候，要注意如下几点：</p><ul><li>只能引用 <code>.wxs</code> 文件模块，且必须使用相对路径。</li><li><code>wxs</code> 模块均为单例，<code>wxs</code> 模块在第一次被引用时，会自动初始化为单例对象。多个页面，多个地方，多次引用，使用的都是同一个 <code>wxs</code> 模块对象。</li><li>如果一个 <code>wxs</code> 模块在定义之后，一直没有被引用，则该模块不会被解析与运行。</li></ul><h2 id="6-2、变量"><a href="#6-2、变量" class="headerlink" title="6.2、变量"></a>6.2、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/02variate.html"><font color="#000000">变量</font></a></h2><ul><li>WXS 中的变量均为值的引用。</li><li>没有声明的变量直接赋值使用，会被定义为全局变量。</li><li>如果只声明变量而不赋值，则默认值为 <code>undefined</code>。</li><li>var表现与javascript一致，会有变量提升。</li></ul><h2 id="6-3、注释"><a href="#6-3、注释" class="headerlink" title="6.3、注释"></a>6.3、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/03annotation.html"><font color="#000000">注释</font></a></h2><h2 id="6-4、运算符"><a href="#6-4、运算符" class="headerlink" title="6.4、运算符"></a>6.4、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/04operator.html"><font color="#000000">运算符</font></a></h2><h2 id="6-5、语句"><a href="#6-5、语句" class="headerlink" title="6.5、语句"></a>6.5、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/05statement.html"><font color="#000000">语句</font></a></h2><h2 id="6-6、数据类型"><a href="#6-6、数据类型" class="headerlink" title="6.6、数据类型"></a>6.6、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/06datatype.html"><font color="#000000">数据类型</font></a></h2><h2 id="6-7、基础类库"><a href="#6-7、基础类库" class="headerlink" title="6.7、基础类库"></a>6.7、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/07basiclibrary.html"><font color="#000000">基础类库</font></a></h2><h1 id="7、事件系统"><a href="#7、事件系统" class="headerlink" title="7、事件系统"></a>7、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html"><font color="#000000">事件系统</font></a></h1><ul><li>事件是视图层到逻辑层的通讯方式。</li><li>事件可以将用户的行为反馈到逻辑层进行处理。</li><li>事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处理函数。</li><li>事件对象可以携带额外信息，如 id, dataset, touches。</li></ul><h2 id="7-1、事件的使用方式"><a href="#7-1、事件的使用方式" class="headerlink" title="7.1、事件的使用方式"></a>7.1、事件的使用方式</h2><ul><li>在组件中绑定一个事件处理函数。</li></ul><p>如<code>bindtap</code>，当用户点击该组件的时候会在该页面对应的Page中找到相应的事件处理函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tapTest&quot;</span> <span class="hljs-attr">data-hi-data</span>=<span class="hljs-string">&quot;WeChat&quot;</span> <span class="hljs-attr">data-hiData</span>=<span class="hljs-string">&quot;develop&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;tapName&quot;</span>&gt;</span> Click me! <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在相应的Page定义中写上相应的事件处理函数，参数是event。</li></ul><blockquote><p> 注意，这里的数据以data-开头， 这种写法中，连字符写法会转换成驼峰写法，而大写字符会自动转成小写字符。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">tapName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>注意，这里可能有些事件不如预期触发，如2.9.3基础库中，input组件的bindinput事件不能触发，可以去开发者社区提交问题或搜索相关问题</p></blockquote><h2 id="7-2、使用WXS函数响应事件"><a href="#7-2、使用WXS函数响应事件" class="headerlink" title="7.2、使用WXS函数响应事件"></a>7.2、使用WXS函数响应事件</h2><h2 id="7-3、事件分类"><a href="#7-3、事件分类" class="headerlink" title="7.3、事件分类"></a>7.3、事件分类</h2><p>事件分为冒泡事件和非冒泡事件：</p><ol><li>冒泡事件：当一个组件上的事件被触发后，该事件会向父节点传递。</li><li>非冒泡事件：当一个组件上的事件被触发后，该事件不会向父节点传递。</li></ol><p>WXML的冒泡事件列表：</p><table><thead><tr><th align="left">类型</th><th align="left">触发条件</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left">touchstart</td><td align="left">手指触摸动作开始</td><td align="left"></td></tr><tr><td align="left">touchmove</td><td align="left">手指触摸后移动</td><td align="left"></td></tr><tr><td align="left">touchcancel</td><td align="left">手指触摸动作被打断，如来电提醒，弹窗</td><td align="left"></td></tr><tr><td align="left">touchend</td><td align="left">手指触摸动作结束</td><td align="left"></td></tr><tr><td align="left">tap</td><td align="left">手指触摸后马上离开</td><td align="left"></td></tr><tr><td align="left">longpress</td><td align="left">手指触摸后，超过350ms再离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td align="left">longtap</td><td align="left">手指触摸后，超过350ms再离开（推荐使用longpress事件代替）</td><td align="left"></td></tr><tr><td align="left">transitionend</td><td align="left">会在 WXSS transition 或 wx.createAnimation 动画结束后触发</td><td align="left"></td></tr><tr><td align="left">animationstart</td><td align="left">会在一个 WXSS animation 动画开始时触发</td><td align="left"></td></tr><tr><td align="left">animationiteration</td><td align="left">会在一个 WXSS animation 一次迭代结束时触发</td><td align="left"></td></tr><tr><td align="left">animationend</td><td align="left">会在一个 WXSS animation 动画完成时触发</td><td align="left"></td></tr><tr><td align="left">touchforcechange</td><td align="left">在支持 3D Touch 的 iPhone 设备，重按时会触发</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr></tbody></table><p><strong>注：除上表之外的其他组件自定义事件如无特殊声明都是非冒泡事件，如 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/form.html">form</a> 的<code>submit</code>事件，<a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">input</a> 的<code>input</code>事件，<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">scroll-view</a> 的<code>scroll</code>事件，(详见各个<a href="https://developers.weixin.qq.com/miniprogram/dev/component/">组件</a>)</strong></p><h1 id="8、生命周期和运行机制"><a href="#8、生命周期和运行机制" class="headerlink" title="8、生命周期和运行机制"></a>8、生命周期和运行机制</h1><h2 id="8-1、小程序生命周期"><a href="#8-1、小程序生命周期" class="headerlink" title="8.1、小程序生命周期"></a>8.1、小程序生命周期</h2><p>App(Object object)</p><p>注册小程序。接受一个 <code>Object</code> 参数，其指定小程序的生命周期回调等。</p><p><strong>App() 必须在 <code>app.js</code> 中调用，必须调用且只能调用一次。不然会出现无法预期的后果。</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onLaunch-Object-object">onLaunch</a></td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">生命周期回调——监听小程序初始化。</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onShow-Object-object">onShow</a></td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">生命周期回调——监听小程序启动或切前台。</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onHide">onHide</a></td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">生命周期回调——监听小程序切后台。</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onError-String-error">onError</a></td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">错误监听函数。</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onPageNotFound-Object-object">onPageNotFound</a></td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">页面不存在监听函数。</td></tr></tbody></table><blockquote><p> 关于小程序前后台的定义和小程序的运行机制，请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/operating-mechanism.html">运行机制</a>章节。 </p></blockquote><p>AppObject getApp(Object object)</p><p>获取到小程序全局唯一的 <code>App</code> 实例。</p><blockquote><p>注意</p><ul><li>不要在定义于 <code>App()</code> 内的函数中，或调用 <code>App</code> 前调用 <code>getApp()</code> ，使用 <code>this</code> 就可以拿到 app 实例。</li><li>通过 <code>getApp()</code> 获取实例之后，不要私自调用生命周期函数。</li></ul></blockquote><h2 id="8-2、页面生命周期"><a href="#8-2、页面生命周期" class="headerlink" title="8.2、页面生命周期"></a>8.2、页面生命周期</h2><p>Page(Object object)</p><p>注册小程序中的一个页面。接受一个 <code>Object</code> 类型参数，其指定页面的初始数据、生命周期回调、事件处理函数等。</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#data">data</a></td><td align="left">Object</td><td align="left"></td><td align="left"></td><td align="left">页面的初始数据</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onLoad-Object-query">onLoad</a></td><td align="left">function</td><td align="left"></td><td align="left"></td><td align="left">生命周期回调—监听页面加载</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShow">onShow</a></td><td align="left">function</td><td align="left"></td><td align="left"></td><td align="left">生命周期回调—监听页面显示</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onReady">onReady</a></td><td align="left">function</td><td align="left"></td><td align="left"></td><td align="left">生命周期回调—监听页面初次渲染完成</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onHide">onHide</a></td><td align="left">function</td><td align="left"></td><td align="left"></td><td align="left">生命周期回调—监听页面隐藏</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onUnload">onUnload</a></td><td align="left">function</td><td align="left"></td><td align="left"></td><td align="left">生命周期回调—监听页面卸载</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onPullDownRefresh">onPullDownRefresh</a></td><td align="left">function</td><td align="left"></td><td align="left"></td><td align="left">监听用户下拉动作</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onReachBottom">onReachBottom</a></td><td align="left">function</td><td align="left"></td><td align="left"></td><td align="left">页面上拉触底事件的处理函数</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShareAppMessage-Object-object">onShareAppMessage</a></td><td align="left">function</td><td align="left"></td><td align="left"></td><td align="left">用户点击右上角转发</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onPageScroll-Object-object">onPageScroll</a></td><td align="left">function</td><td align="left"></td><td align="left"></td><td align="left">页面滚动触发事件的处理函数</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onResize-Object-object">onResize</a></td><td align="left">function</td><td align="left"></td><td align="left"></td><td align="left">页面尺寸改变时触发，详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html#%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E5%90%AF%E7%94%A8%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC%E6%94%AF%E6%8C%81">响应显示区域变化</a></td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onTabItemTap-Object-object">onTabItemTap</a></td><td align="left">function</td><td align="left"></td><td align="left"></td><td align="left">当前是 tab 页时，点击 tab 时触发</td></tr></tbody></table><h2 id="8-3、在页面中使用-behaviors"><a href="#8-3、在页面中使用-behaviors" class="headerlink" title="8.3、在页面中使用 behaviors"></a>8.3、在页面中使用 behaviors</h2><blockquote><p> 基础库 2.9.2 开始支持，低版本需做<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">兼容处理</a>。 </p><p>页面可以引用 behaviors 。 behaviors 可以用来让多个页面有相同的数据字段和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// my-behavior.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Behavior</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">sharedText</span>: <span class="hljs-string">&#x27;This is a piece of data shared between pages.&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">sharedMethod</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">sharedText</span> === <span class="hljs-string">&#x27;This is a piece of data shared between pages.&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// page-a.js</span><br><span class="hljs-keyword">var</span> myBehavior = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./my-behavior.js&#x27;</span>)<br><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">behaviors</span>: [myBehavior],<br>  <span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">sharedText</span> === <span class="hljs-string">&#x27;This is a piece of data shared between pages.&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>具体用法参见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html">behaviors</a> 。</p><p>下图说明了页面 <code>Page</code> 实例的生命周期。</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/page-lifecycle.2e646c86.png" alt="img"></p><h2 id="8-4、小程序运行机制"><a href="#8-4、小程序运行机制" class="headerlink" title="8.4、小程序运行机制"></a>8.4、小程序运行机制</h2><h3 id="8-4-1、前台-x2F-后台状态"><a href="#8-4-1、前台-x2F-后台状态" class="headerlink" title="8.4.1、前台&#x2F;后台状态"></a>8.4.1、前台&#x2F;后台状态</h3><p>小程序启动后，界面被展示给用户，此时小程序处于<strong>前台</strong>状态。</p><p>当用户点击右上角胶囊按钮关闭小程序，或者按了设备 Home 键离开微信时，小程序并没有完全终止运行，而是进入了<strong>后台</strong>状态，小程序还可以运行一小段时间。</p><p>当用户再次进入微信或再次打开小程序，小程序又会从后台进入<strong>前台</strong>。但如果用户很久没有再进入小程序，或者系统资源紧张，小程序可能被<strong>销毁</strong>，即完全终止运行。</p><h3 id="8-4-2、小程序启动"><a href="#8-4-2、小程序启动" class="headerlink" title="8.4.2、小程序启动"></a>8.4.2、小程序启动</h3><p>这样，小程序启动可以分为两种情况，一种是<strong>冷启动</strong>，一种是<strong>热启动</strong>。</p><ul><li>冷启动：如果用户首次打开，或小程序销毁后被用户再次打开，此时小程序需要重新加载启动，即冷启动。</li><li>热启动：如果用户已经打开过某小程序，然后在一定时间内再次打开该小程序，此时小程序并未被销毁，只是从后台状态进入前台状态，这个过程就是热启动。</li></ul><h3 id="8-4-3、小程序销毁时机"><a href="#8-4-3、小程序销毁时机" class="headerlink" title="8.4.3、小程序销毁时机"></a>8.4.3、小程序销毁时机</h3><p>通常，只有当小程序进入后台一定时间，或者系统资源占用过高，才会被销毁。具体而言包括以下几种情形。</p><ul><li>当小程序进入后台，可以会维持一小段时间的运行状态，如果这段时间内都未进入前台，小程序会被销毁。</li><li>当小程序占用系统资源过高，可能会被系统销毁或被微信客户端主动回收。<ul><li>在 iOS 上，当微信客户端在一定时间间隔内（目前是 5 秒）连续收到两次及以上系统内存告警时，会主动进行小程序的销毁，并提示用户 「该小程序可能导致微信响应变慢被终止」</li><li>建议小程序在必要时使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/performance/wx.onMemoryWarning.html">wx.onMemoryWarning</a> 监听内存告警事件，进行必要的内存清理。</li></ul></li></ul><p><strong>启动场景分类</strong></p><p>用户打开小程序时，场景可分为以下 A 、 B 两类：</p><p>A. 打开首页： <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/scene.html">场景值</a>有以下几项：</p><table><thead><tr><th align="left">场景值ID</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">1001</td><td align="left">发现栏小程序主入口</td></tr><tr><td align="left">1019</td><td align="left">微信支付入口</td></tr><tr><td align="left">1023</td><td align="left">安卓系统桌面图标</td></tr><tr><td align="left">1038</td><td align="left">从另一个小程序返回</td></tr><tr><td align="left">1056</td><td align="left">音乐播放器菜单</td></tr><tr><td align="left">1089</td><td align="left">首页下拉小程序栏</td></tr></tbody></table><p>B. 打开小程序指定的某个页面： 场景值为除 A 以外的其他</p><p>不同场景类别的启动将具有不同的行为。</p><p><strong>热启动逻辑</strong></p><blockquote><p>基础库 1.4.0 开始支持，低版本需做<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">兼容处理</a>。</p></blockquote><p>小程序在热启动时，可能需要立刻跳转到别的页面，如点击分享卡片进入小程序时。此时可能会自动产生一些页面跳转。</p><p>按照场景值的类别，这种跳转行为可以归纳为：</p><table><thead><tr><th align="left">上一次的场景</th><th align="left">当前打开的场景</th><th align="left">效果</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">A</td><td align="left">保留原来的状态</td></tr><tr><td align="left">B</td><td align="left">A</td><td align="left">清空原来的页面栈，打开首页（相当于执行 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html">wx.reLaunch</a> 到首页）</td></tr><tr><td align="left">A 或 B</td><td align="left">B</td><td align="left">清空原来的页面栈，打开指定页面（相当于执行 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html">wx.reLaunch</a> 到指定页）</td></tr></tbody></table><p>A <strong>类场景的重新启动策略</strong></p><blockquote><p>基础库 2.8.0 开始支持，低版本需做<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">兼容处理</a>。</p></blockquote><p>小程序被销毁后，下次冷启动如果属于 B 类场景，将会进入特定的页面。</p><p>下次冷启动如果属于 A 类场景，默认情况下将会进入小程序的首页。在页面对应的 json 文件中（也可以全局配置在 app.json 的 window 段中），指定 <code>restartStrategy</code> 配置项可以改变这个默认的行为，使得从某个页面退出后，下次 A 类场景的冷启动可以回到这个页面。</p><p><strong>代码示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;restartStrategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;homePage&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>restartStrategy</code> 可选值：</p><table><thead><tr><th align="left">可选值</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">homePage</td><td align="left">（默认值）如果从这个页面退出小程序，下次将从首页冷启动</td></tr><tr><td align="left">homePageAndLatestPage</td><td align="left">如果从这个页面退出小程序，下次冷启动后立刻加载这个页面，页面的参数保持不变（不可用于 tab 页）</td></tr></tbody></table><p>注意：即使不配置为 <code>homePage</code> ，小程序如果退出过久（当前默认一天时间，可以使用<strong>退出状态</strong>来调整），下次冷启动时也将不再遵循 <code>restartStrategy</code> 的配置，而是直接从首页冷启动。</p><p>无论如何，页面中的状态并不会被保留，如输入框中的文本内容、 checkbox 的勾选状态等都不会还原。如果需要还原或部分还原，需要利用<strong>退出状态</strong>。</p><p><strong>退出状态</strong></p><p>每当小程序可能被销毁之前，页面回调函数 <code>onSaveExitState</code> 会被调用。如果想保留页面中的状态，可以在这个回调函数中“保存”一些数据，下次启动时可以通过 <code>exitState</code> 获得这些已保存数据。</p><p><strong>代码示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;restartStrategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;homePageAndLatestPage&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> prevExitState = <span class="hljs-variable language_">this</span>.<span class="hljs-property">exitState</span> <span class="hljs-comment">// 尝试获得上一次退出前 onSaveExitState 保存的数据</span><br>    <span class="hljs-keyword">if</span> (prevExitState !== <span class="hljs-literal">undefined</span>) &#123; <span class="hljs-comment">// 如果是根据 restartStrategy 配置进行的冷启动，就可以获取到</span><br>      prevExitState.<span class="hljs-property">myDataField</span> === <span class="hljs-string">&#x27;myData&#x27;</span> <br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">onSaveExitState</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> exitState = &#123; <span class="hljs-attr">myDataField</span>: <span class="hljs-string">&#x27;myData&#x27;</span> &#125; <span class="hljs-comment">// 需要保存的数据</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">data</span>: exitState,<br>      <span class="hljs-attr">expireTimeStamp</span>: <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() + <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> <span class="hljs-comment">// 超时时刻</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>onSaveExitState</code> 返回值可以包含两项：</p><table><thead><tr><th align="left">字段名</th><th align="left">类型</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">data</td><td align="left">Any</td><td align="left">需要保存的数据（只能是 JSON 兼容的数据）</td></tr><tr><td align="left">expireTimeStamp</td><td align="left">Number</td><td align="left">超时时刻，在这个时刻后，保存的数据保证一定被丢弃，默认为 (当前时刻 + 1 天)</td></tr></tbody></table><p>一个更完整的示例：<a href="https://developers.weixin.qq.com/s/ELP5uTmN7E8l">在开发者工具中预览效果</a></p><p>注意事项：</p><ul><li>如果超过 <code>expireTimeStamp</code> ，保存的数据将被丢弃，且冷启动时不遵循 <code>restartStrategy</code> 的配置，而是直接从首页冷启动。</li><li><code>expireTimeStamp</code> 有可能被自动提前，如微信客户端需要清理数据的时候。</li><li>在小程序存活期间， <code>onSaveExitState</code> 可能会被多次调用，此时以最后一次的调用结果作为最终结果。</li><li>在某些特殊情况下（如微信客户端直接被系统杀死），这个方法将不会被调用，下次冷启动也不遵循 <code>restartStrategy</code> 的配置，而是直接从首页冷启动。</li></ul><h1 id="9、页面路由及页面数据传递"><a href="#9、页面路由及页面数据传递" class="headerlink" title="9、页面路由及页面数据传递"></a>9、页面路由及页面数据传递</h1><p> 在小程序中所有页面的路由全部由框架进行管理。 </p><h2 id="9-1、页面栈"><a href="#9-1、页面栈" class="headerlink" title="9.1、页面栈"></a>9.1、页面栈</h2><p>框架以栈的形式维护了当前的所有页面。 当发生路由切换的时候，页面栈的表现如下：</p><table><thead><tr><th align="left">路由方式</th><th align="left">页面栈表现</th></tr></thead><tbody><tr><td align="left">初始化</td><td align="left">新页面入栈</td></tr><tr><td align="left">打开新页面</td><td align="left">新页面入栈</td></tr><tr><td align="left">页面重定向</td><td align="left">当前页面出栈，新页面入栈</td></tr><tr><td align="left">页面返回</td><td align="left">页面不断出栈，直到目标返回页</td></tr><tr><td align="left">Tab 切换</td><td align="left">页面全部出栈，只留下新的 Tab 页面</td></tr><tr><td align="left">重加载</td><td align="left">页面全部出栈，只留下新的页面</td></tr></tbody></table><p>开发者可以使用 <code>getCurrentPages()</code> 函数获取当前页面栈。</p><h2 id="9-2、路由方式"><a href="#9-2、路由方式" class="headerlink" title="9.2、路由方式"></a>9.2、路由方式</h2><p>对于路由的触发方式以及页面生命周期函数如下：</p><table><thead><tr><th align="left">路由方式</th><th align="left">触发时机</th><th align="left">路由前页面</th><th align="left">路由后页面</th></tr></thead><tbody><tr><td align="left">初始化</td><td align="left">小程序打开的第一个页面</td><td align="left"></td><td align="left">onLoad, onShow</td></tr><tr><td align="left">打开新页面</td><td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html">wx.navigateTo</a> <br />使用组件<a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html"><code>&lt;navigator open-type=&quot;navigateTo&quot;/&gt;</code></a></td><td align="left">onHide</td><td align="left">onLoad, onShow</td></tr><tr><td align="left">页面重定向</td><td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html">wx.redirectTo</a> <br />使用组件 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html"><code>&lt;navigator open-type=&quot;redirectTo&quot;/&gt;</code></a></td><td align="left">onUnload</td><td align="left">onLoad, onShow</td></tr><tr><td align="left">页面返回</td><td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html">wx.navigateBack</a> <br />使用组件<a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html"><code>&lt;navigator open-type=&quot;navigateBack&quot;&gt;</code></a> <br />用户按左上角返回按钮</td><td align="left">onUnload</td><td align="left">onShow</td></tr><tr><td align="left">Tab 切换</td><td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html">wx.switchTab</a><br /> 使用组件<a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html"><code>&lt;navigator open-type=&quot;switchTab&quot;/&gt;</code></a><br />用户切换 Tab</td><td align="left"></td><td align="left">各种情况请参考下表</td></tr><tr><td align="left">重启动</td><td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html">wx.reLaunch</a> <br />使用组件 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html"><code>&lt;navigator open-type=&quot;reLaunch&quot;/&gt;</code></a></td><td align="left">onUnload</td><td align="left">onLoad, onShow</td></tr></tbody></table><p>Tab 切换对应的生命周期（以 A、B 页面为 Tabbar 页面，C 是从 A 页面打开的页面，D 页面是从 C 页面打开的页面为例）：</p><table><thead><tr><th align="left">当前页面</th><th align="left">路由后页面</th><th align="left">触发的生命周期（按顺序）</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">A</td><td align="left">Nothing happend</td></tr><tr><td align="left">A</td><td align="left">B</td><td align="left">A.onHide(), B.onLoad(), B.onShow()</td></tr><tr><td align="left">A</td><td align="left">B（再次打开）</td><td align="left">A.onHide(), B.onShow()</td></tr><tr><td align="left">C</td><td align="left">A</td><td align="left">C.onUnload(), A.onShow()</td></tr><tr><td align="left">C</td><td align="left">B</td><td align="left">C.onUnload(), B.onLoad(), B.onShow()</td></tr><tr><td align="left">D</td><td align="left">B</td><td align="left">D.onUnload(), C.onUnload(), B.onLoad(), B.onShow()</td></tr><tr><td align="left">D（从转发进入）</td><td align="left">A</td><td align="left">D.onUnload(), A.onLoad(), A.onShow()</td></tr><tr><td align="left">D（从转发进入）</td><td align="left">B</td><td align="left">D.onUnload(), B.onLoad(), B.onShow()</td></tr></tbody></table><p><strong>Tips</strong>:</p><ul><li><code>navigateTo</code>, <code>redirectTo</code> 只能打开非 tabBar 页面。</li><li><code>switchTab</code> 只能打开 tabBar 页面。</li><li><code>reLaunch</code> 可以打开任意页面。</li><li>页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。</li><li>调用页面路由带的参数可以在目标页面的<code>onLoad</code>中获取。</li></ul><h2 id="9-3、页面数据传递"><a href="#9-3、页面数据传递" class="headerlink" title="9.3、页面数据传递"></a>9.3、页面数据传递</h2><ul><li>可以在跳转链接中拼接相应参数</li><li>可以在跳转后的页面通过获取页面栈得到数据</li><li>可以将数据设置给app.js中的全局变量</li></ul><h1 id="10、基础组件"><a href="#10、基础组件" class="headerlink" title="10、基础组件"></a>10、<a href="https://developers.weixin.qq.com/miniprogram/dev/component/"><font color="#000000">基础组件</font></a></h1><h2 id="10-1、体验小程序"><a href="#10-1、体验小程序" class="headerlink" title="10.1、体验小程序"></a>10.1、体验小程序</h2><p>开发者可使用微信客户端(6.7.2 及以上版本)扫码下方小程序码，体验小程序。</p><p><a href="https://github.com/wechat-miniprogram/miniprogram-demo">查看小程序示例源码</a></p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/demo.ef5c5bef.jpg" alt="img"></p><h2 id="10-2、原生组件"><a href="#10-2、原生组件" class="headerlink" title="10.2、原生组件"></a>10.2、原生组件</h2><p>小程序中的部分组件是由客户端创建的原生组件，这些组件有：</p><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/camera.html"><code>camera</code></a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/canvas.html"><code>canvas</code></a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html"><code>input</code></a>（仅在focus时表现为原生组件）</li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/live-player.html"><code>live-player</code></a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/live-pusher.html"><code>live-pusher</code></a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/map.html"><code>map</code></a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/textarea.html"><code>textarea</code></a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/video.html"><code>video</code></a></li></ul><h2 id="10-3、原生组件的使用限制"><a href="#10-3、原生组件的使用限制" class="headerlink" title="10.3、原生组件的使用限制"></a>10.3、原生组件的使用限制</h2><p>由于原生组件脱离在 WebView 渲染流程外，因此在使用时有以下限制：</p><ul><li><p>原生组件的层级是最高的，所以页面中的其他组件无论设置<code>z-index</code>为多少，都无法盖在原生组件上。</p><ul><li>后插入的原生组件可以覆盖之前的原生组件。</li></ul></li><li><p>原生组件还无法在picker-view中使用。</p><ul><li>基础库 2.4.4 以下版本，原生组件不支持在 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">scroll-view</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html">swiper</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/component/movable-view.html">movable-view</a> 中使用。</li></ul></li><li><p>部分CSS样式无法应用于原生组件，例如：</p><ul><li>无法对原生组件设置 CSS 动画</li><li>无法定义原生组件为 <code>position: fixed</code></li><li>不能在父级节点使用 <code>overflow: hidden</code> 来裁剪原生组件的显示区域</li></ul></li><li><p>原生组件的事件监听不能使用 <code>bind:eventname</code> 的写法，只支持 <code>bindeventname</code>。原生组件也不支持 catch 和 capture 的事件绑定方式。</p></li><li><p>原生组件会遮挡 vConsole 弹出的调试面板。 <strong>在工具上，原生组件是用web组件模拟的，因此很多情况并不能很好的还原真机的表现，建议开发者在使用到原生组件时尽量在真机上进行调试。</strong></p></li></ul><p><strong>cover-view 与 cover-image</strong></p><p>为了解决原生组件层级最高的限制。小程序专门提供了 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/cover-view.html"><code>cover-view</code></a> 和 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/cover-image.html"><code>cover-image</code></a> 组件，可以覆盖在<strong>部分</strong>原生组件上面。这两个组件也是原生组件，但是使用限制与其他原生组件有所不同。</p><h2 id="10-4、原生组件同层渲染"><a href="#10-4、原生组件同层渲染" class="headerlink" title="10.4、原生组件同层渲染"></a>10.4、原生组件同层渲染</h2><p>同层渲染是为了解决原生组件的层级问题，在支持同层渲染后，原生组件与其它组件可以随意叠加，有关层级的限制将不再存在。但需要注意的是，组件内部仍由原生渲染，样式一般还是对原生组件内部无效。<strong>当前 video, map 组件已支持同层渲染。</strong></p><h2 id="10-5、原生组件相对层级"><a href="#10-5、原生组件相对层级" class="headerlink" title="10.5、原生组件相对层级"></a>10.5、原生组件相对层级</h2><p>为了可以调整原生组件之间的相对层级位置，小程序在 v2.7.0 及以上版本支持在样式中声明 z-index 来指定原生组件的层级。该 z-index 仅调整原生组件之间的层级顺序，其层级仍<strong>高于</strong>其他非原生组件。</p><h1 id="11、自定义组件"><a href="#11、自定义组件" class="headerlink" title="11、自定义组件"></a>11、自定义组件</h1><p> 开发者可以将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用；也可以将复杂的页面拆分成多个低耦合的模块，有助于代码维护。自定义组件在使用时与基础组件非常相似。 </p><p>通俗来讲就是将一些小程序中使用的较多的模块提取成一个自定义组件</p><h2 id="11-1、创建自定义组件"><a href="#11-1、创建自定义组件" class="headerlink" title="11.1、创建自定义组件"></a>11.1、创建自定义组件</h2><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191212115217417.png" alt="image-20191212115217417"></p><p>类似于页面，一个自定义组件由 <code>json</code> <code>wxml</code> <code>wxss</code> <code>js</code> 4个文件组成。要编写一个自定义组件，首先需要在 <code>json</code> 文件中进行自定义组件声明（将 <code>component</code> 字段设为 <code>true</code> 可将这一组文件设为自定义组件）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;component&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>同时，还要在 <code>wxml</code> 文件中编写组件模板，在 <code>wxss</code> 文件中加入组件样式，它们的写法与页面的写法类似。具体细节和注意事项参见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html">组件模板和样式</a> 。</p><p><strong>代码示例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这是自定义组件的内部WXML结构 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>  &#123;&#123;innerText&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 这里的样式只应用于这个自定义组件 */</span><br><span class="hljs-selector-class">.inner</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：在组件wxss中不应使用ID选择器、属性选择器和标签名选择器。</strong></p><p>在自定义组件的 <code>js</code> 文件中，需要使用 <code>Component()</code> 来注册组件，并提供组件的属性定义、内部数据和自定义方法。</p><p>组件的属性值和内部数据将被用于组件 <code>wxml</code> 的渲染，其中，属性值是可由组件外部传入的。更多细节参见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/component.html">Component构造器</a> 。</p><p><strong>代码示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-attr">properties</span>: &#123;<br>    <span class="hljs-comment">// 这里定义了innerText属性，属性值可以在组件使用时指定</span><br>    <span class="hljs-attr">innerText</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;default value&#x27;</span>,<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-comment">// 这里是一些组件内部数据</span><br>    <span class="hljs-attr">someData</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">// 这里是一个自定义方法</span><br>    <span class="hljs-attr">customMethod</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="11-2、使用自定义组件"><a href="#11-2、使用自定义组件" class="headerlink" title="11.2、使用自定义组件"></a>11.2、使用自定义组件</h2><p>使用已注册的自定义组件前，首先要在页面的 <code>json</code> 文件中进行引用声明。此时需要提供每个自定义组件的标签名和对应的自定义组件文件路径：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;usingComponents&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;component-tag-name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;path/to/the/custom/component&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这样，在页面的 <code>wxml</code> 中就可以像使用基础组件一样使用自定义组件。节点名即自定义组件的标签名，节点属性即传递给组件的属性值。</p><blockquote><p>开发者工具 1.02.1810190 及以上版本支持在 app.json 中声明 usingComponents 字段，在此处声明的自定义组件视为全局自定义组件，在小程序内的页面或自定义组件中可以直接使用而无需再声明。</p></blockquote><p><strong>代码示例：</strong></p><p><a href="https://developers.weixin.qq.com/s/OMfVAKmZ6KZT">在开发者工具中预览效果</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 以下是对一个自定义组件的引用 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component-tag-name</span> <span class="hljs-attr">inner-text</span>=<span class="hljs-string">&quot;Some text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-tag-name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>自定义组件的 <code>wxml</code> 节点结构在与数据结合之后，将被插入到引用位置内。</p><h2 id="11-3、细节注意事项"><a href="#11-3、细节注意事项" class="headerlink" title="11.3、细节注意事项"></a><font color='#fb4748'>11.3、细节注意事项</font></h2><p>一些需要注意的细节：</p><ul><li>因为 WXML 节点标签名只能是小写字母、中划线和下划线的组合，所以自定义组件的标签名也只能包含这些字符。</li><li>自定义组件也是可以引用自定义组件的，引用方法类似于页面引用自定义组件的方式（使用 <code>usingComponents</code> 字段）。</li><li>自定义组件和页面所在项目根目录名不能以“wx-”为前缀，否则会报错。</li></ul><p>注意，是否在页面文件中使用 <code>usingComponents</code> 会使得页面的 <code>this</code> 对象的原型稍有差异，包括：</p><ul><li>使用 <code>usingComponents</code> 页面的原型与不使用时不一致，即 <code>Object.getPrototypeOf(this)</code> 结果不同。</li><li>使用 <code>usingComponents</code> 时会多一些方法，如 <code>selectComponent</code> 。</li><li>出于性能考虑，使用 <code>usingComponents</code> 时， <code>setData</code> 内容不会被直接深复制，即 <code>this.setData(&#123; field: obj &#125;)</code> 后 <code>this.data.field === obj</code> 。（深复制会在这个值被组件间传递时发生。）</li></ul><p>如果页面比较复杂，新增或删除 <code>usingComponents</code> 定义段时建议重新测试一下。</p><h2 id="11-4、-lt-slot-gt-节点"><a href="#11-4、-lt-slot-gt-节点" class="headerlink" title="11.4、&lt;slot&gt;节点"></a>11.4、<code>&lt;slot&gt;</code>节点</h2><p>在组件的wxml中可以包含 <code>slot</code> 节点，用于承载组件使用者提供的wxml结构。  也可以简单地认为是个插槽，将节点内地结构插入到组件相应位置</p><p><strong>代码示例：</strong></p><p><a href="https://developers.weixin.qq.com/s/1udXLnmi6KY2">在开发者工具中预览效果</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 组件模板 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>这里是组件的内部节点<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 引用组件的页面模板 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component-tag-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot&gt; 的位置上 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>这里是插入到组件slot中的内容<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">component-tag-name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意，在模板中引用到的自定义组件及其对应的节点名需要在 <code>json</code> 文件中显式定义，否则会被当作一个无意义的节点。除此以外，节点名也可以被声明为<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/generics.html">抽象节点</a>。</p><h3 id="11-4-1、多个-lt-slot-gt-节点"><a href="#11-4-1、多个-lt-slot-gt-节点" class="headerlink" title="11.4.1、多个&lt;slot&gt;节点"></a>11.4.1、多个<code>&lt;slot&gt;</code>节点</h3><p> 默认情况下，一个组件的wxml中只能有一个slot。需要使用多slot时，可以在组件js中声明启用。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-attr">options</span>: &#123;<br>    <span class="hljs-attr">multipleSlots</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 在组件定义时的选项中启用多slot支持</span><br>  &#125;,<br>  <span class="hljs-attr">properties</span>: &#123; <span class="hljs-comment">/* ... */</span> &#125;,<br>  <span class="hljs-attr">methods</span>: &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>此时，可以在这个组件的wxml中使用多个slot，以不同的 <code>name</code> 来区分。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 组件模板 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;before&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>这里是组件的内部细节<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;after&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用时，用 <code>slot</code> 属性来将节点插入到不同的slot上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 引用组件的页面模板 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component-tag-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot name=&quot;before&quot;&gt; 的位置上 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;before&quot;</span>&gt;</span>这里是插入到组件slot name=&quot;before&quot;中的内容<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot name=&quot;after&quot;&gt; 的位置上 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;after&quot;</span>&gt;</span>这里是插入到组件slot name=&quot;after&quot;中的内容<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">component-tag-name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="11-5、组件样式"><a href="#11-5、组件样式" class="headerlink" title="11.5、组件样式"></a>11.5、组件样式</h2><p>组件对应 <code>wxss</code> 文件的样式，只对组件wxml内的节点生效。编写组件样式时，需要注意以下几点：</p><ul><li>组件和引用组件的页面不能使用id选择器（<code>#a</code>）、属性选择器（<code>[a]</code>）和标签名选择器，请改用class选择器。</li><li>组件和引用组件的页面中使用后代选择器（<code>.a .b</code>）在一些极端情况下会有非预期的表现，如遇，请避免使用。</li><li>子元素选择器（<code>.a&gt;.b</code>）只能用于 <code>view</code> 组件与其子节点之间，用于其他组件可能导致非预期的情况。</li><li>继承样式，如 <code>font</code> 、 <code>color</code> ，会从组件外继承到组件内。</li><li>除继承样式外， <code>app.wxss</code> 中的样式、组件所在页面的的样式对自定义组件无效（除非更改组件样式隔离选项）。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#a</span> &#123; &#125; <span class="hljs-comment">/* 在组件中不能使用 */</span><br><span class="hljs-selector-attr">[a]</span> &#123; &#125; <span class="hljs-comment">/* 在组件中不能使用 */</span><br><span class="hljs-selector-tag">button</span> &#123; &#125; <span class="hljs-comment">/* 在组件中不能使用 */</span><br><span class="hljs-selector-class">.a</span> &gt; <span class="hljs-selector-class">.b</span> &#123; &#125; <span class="hljs-comment">/* 除非 .a 是 view 组件节点，否则不一定会生效 */</span><br></code></pre></td></tr></table></figure><p>除此以外，组件可以指定它所在节点的默认样式，使用 <code>:host</code> 选择器（需要包含基础库 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.7.2</a> 或更高版本的开发者工具支持）。</p><h3 id="11-5-1、组件样式隔离"><a href="#11-5-1、组件样式隔离" class="headerlink" title="11.5.1、组件样式隔离"></a>11.5.1、组件样式隔离</h3><p>默认情况下，自定义组件的样式只受到自定义组件 wxss 的影响。除非以下两种情况：</p><ul><li><font color="#fb4748"><code>app.wxss</code> 或页面的 <code>wxss</code> 中使用了<strong>标签名选择器</strong>（或一些其他特殊选择器）来直接指定样式，这些选择器会影响到页面和全部组件。通常情况下这是不推荐的做法。</font></li><li>指定特殊的样式隔离选项 <code>styleIsolation</code> 。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-attr">options</span>: &#123;<br>    <span class="hljs-attr">styleIsolation</span>: <span class="hljs-string">&#x27;isolated&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>styleIsolation</code> 选项从基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.6.5</a> 开始支持。它支持以下取值：</p><ul><li><p><code>isolated</code> 表示启用样式隔离，在自定义组件内外，使用 class 指定的样式将不会相互影响（一般情况下的默认值）；</p></li><li><p><code>apply-shared</code> 表示页面 wxss 样式将影响到自定义组件，但自定义组件 wxss 中指定的样式不会影响页面；</p></li><li><p><code>shared</code> 表示页面 wxss 样式将影响到自定义组件，自定义组件 wxss 中指定的样式也会影响页面和其他设置了 <code>apply-shared</code> 或 <code>shared</code> 的自定义组件。（这个选项在插件中不可用。）</p></li><li><p><code>page-isolated</code> 表示在这个页面禁用 app.wxss ，同时，页面的 wxss 不会影响到其他自定义组件；</p></li><li><p><code>page-apply-shared</code> 表示在这个页面禁用 app.wxss ，同时，页面 wxss 样式不会影响到其他自定义组件，但设为 <code>shared</code> 的自定义组件会影响到页面；</p></li><li><p><code>page-shared</code> 表示在这个页面禁用 app.wxss ，同时，页面 wxss 样式会影响到其他设为 <code>apply-shared</code> 或 <code>shared</code> 的自定义组件，也会受到设为 <code>shared</code> 的自定义组件的影响。</p></li></ul><p>此外，小程序基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.2.3</a> 以上支持 <code>addGlobalClass</code> 选项，即在 <code>Component</code> 的 <code>options</code> 中设置 <code>addGlobalClass: true</code> 。 这个选项等价于设置 <code>styleIsolation: apply-shared</code> ，但设置了 <code>styleIsolation</code> 选项后这个选项会失效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 组件 custom-component.js */</span><br><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-attr">options</span>: &#123;<br>    <span class="hljs-attr">addGlobalClass</span>: <span class="hljs-literal">true</span>,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 组件 custom-component.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red-text&quot;</span>&gt;</span>这段文本的颜色由 app.wxss 和页面 wxss 中的样式定义来决定<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* app.wxss */</span><br><span class="hljs-selector-class">.red-text</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="12、云开发配置"><a href="#12、云开发配置" class="headerlink" title="12、云开发配置"></a>12、云开发配置</h1><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191212201052055.png" alt="image-20191212201052055"></p><p>在小程序开发工具中点击云开发按钮可以快速进行云开发设置</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191212201340348.png" alt="image-20191212201340348"></p><p>点击确定等待处理完成</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191212201613373.png" alt="image-20191212201613373"></p><h2 id="12-1、云函数"><a href="#12-1、云函数" class="headerlink" title="12.1、云函数"></a>12.1、云函数</h2><h3 id="12-1-1、创建一个云函数"><a href="#12-1-1、创建一个云函数" class="headerlink" title="12.1.1、创建一个云函数"></a>12.1.1、创建一个云函数</h3><p>在项目根目录找到 <code>project.config.json</code> 文件，新增 <code>cloudfunctionRoot</code> 字段，指定本地已存在的目录作为云函数的本地根目录</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;cloudfunctionRoot&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./cloudfunctions/&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里的functions既是你在项目根目录创建的存放云函数的目录，设置好后会有对应的图标</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191212203633916.png" alt="image-20191212203633916"></p><p>然后在云函数目录点击鼠标右键，选择新建Node.js云函数</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191212203758033.png" alt="image-20191212203758033"></p><p>然后输入对应的函数名后就会自动创建好，并且会有如下模板代码块</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191212204106076.png" alt="image-20191212204106076"></p><p> 云函数的传入参数有两个，一个是 <code>event</code> 对象，一个是 <code>context</code> 对象。<code>event</code> 指的是触发云函数的事件，当小程序端调用云函数时，<code>event</code> 就是小程序端调用云函数时传入的参数，外加后端自动注入的小程序用户的 openid 和小程序的 appid。<code>context</code> 对象包含了此处调用的调用信息和运行状态，可以用它来了解服务运行的情况。在模板中也默认 <code>require</code> 了 <code>wx-server-sdk</code>，这是一个帮助我们在云函数中操作数据库、存储以及调用其他云函数的微信提供的库，关于 <code>wx-server-sdk</code> 的使用我们在另一个<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/wx-server-sdk.html">章节</a>讲述。 </p><h3 id="12-1-2、调用云函数"><a href="#12-1-2、调用云函数" class="headerlink" title="12.1.2、调用云函数"></a>12.1.2、调用云函数</h3><p>在小程序中调用这个云函数前，我们还需要先将该云函数部署到云端。在云函数目录上右键，在右键菜单中，我们可以将云函数整体打包上传并部署到线上环境中。</p><p>部署完成后，我们可以在小程序中调用该云函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">callFunction</span>(&#123;<br>  <span class="hljs-comment">// 云函数名称</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;add&#x27;</span>,<br>  <span class="hljs-comment">// 传给云函数的参数</span><br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  &#125;,<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">result</span>.<span class="hljs-property">sum</span>) <span class="hljs-comment">// 3</span><br>  &#125;,<br>  <span class="hljs-attr">fail</span>: <span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>当然，Promise 风格的调用也是支持的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">callFunction</span>(&#123;<br>  <span class="hljs-comment">// 云函数名称</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;add&#x27;</span>,<br>  <span class="hljs-comment">// 传给云函数的参数</span><br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  &#125;,<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">result</span>) <span class="hljs-comment">// 3</span><br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span>)<br></code></pre></td></tr></table></figure><blockquote><p>调用前需要先初始化云函数： wx.cloud.init()</p><p>unionId仅在满足 unionId 获取条件时返回</p></blockquote><h2 id="12-2、-数据库"><a href="#12-2、-数据库" class="headerlink" title="12.2、 数据库"></a>12.2、 <a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database.html"><font color="#000">数据库</font></a></h2><h3 id="12-2-1、创建第一个集合"><a href="#12-2-1、创建第一个集合" class="headerlink" title="12.2.1、创建第一个集合"></a>12.2.1、创建第一个集合</h3><p> 打开控制台，选择 “数据库” 标签页，通过 “添加集合” 入口创建一个集合。假设我们要创建一个待办事项小程序，我们创建一个名为 <code>todos</code> 的集合。创建成功后，可以看到 <code>todos</code> 集合管理界面，界面中我们可以添加记录、查找记录、管理索引和管理权限。 </p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191215153646367.png" alt="image-20191215153646367"></p><h3 id="12-2-2、创建第一条记录"><a href="#12-2-2、创建第一条记录" class="headerlink" title="12.2.2、创建第一条记录"></a>12.2.2、创建第一条记录</h3><p>控制台提供了可视化添加数据的交互界面，点击 “添加记录” 添加我们的第一条待办事项：</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20191215153959454.png" alt="image-20191215153959454"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 描述，String 类型</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;learn mini-program cloud service&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 截止时间，Date 类型</span><br>  <span class="hljs-attr">&quot;due&quot;</span><span class="hljs-punctuation">:</span> Date(<span class="hljs-string">&quot;2018-09-01&quot;</span>)<span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 标签，Array 类型</span><br>  <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;tech&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;mini-program&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;cloud&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 个性化样式，Object 类型</span><br>  <span class="hljs-attr">&quot;style&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;red&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 是否已完成，Boolean 类型</span><br>  <span class="hljs-attr">&quot;done&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>添加完成后可在控制台中查看到刚添加的数据。</p><h3 id="12-2-3、导入数据"><a href="#12-2-3、导入数据" class="headerlink" title="12.2.3、导入数据"></a>12.2.3、导入数据</h3><p>云控制台支持上传文件导入已有的数据，可<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/import.html">查看指引</a>了解如何操作。</p><h3 id="12-2-4、增删查改"><a href="#12-2-4、增删查改" class="headerlink" title="12.2.4、增删查改"></a>12.2.4、增删查改</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//使用前先初始化</span><br><span class="hljs-keyword">const</span> db = wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">database</span>()<br><span class="hljs-comment">//或</span><br><span class="hljs-keyword">const</span> testDB = wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">database</span>(&#123;<br>  <span class="hljs-attr">env</span>: <span class="hljs-string">&#x27;test&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p> 要操作一个集合，需先获取它的引用。在获取了数据库的引用后，就可以通过数据库引用上的 <code>collection</code> 方法获取一个集合的引用了，比如获取待办事项清单集合： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> todos = db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>)<br></code></pre></td></tr></table></figure><p>获取集合的引用并不会发起网络请求去拉取它的数据，我们可以通过此引用在该集合上进行增删查改的操作，除此之外，还可以通过集合上的 <code>doc</code> 方法来获取集合中一个指定 ID 的记录的引用。同理，记录的引用可以用于对特定记录进行更新和删除操作。</p><p>假设我们有一个待办事项的 ID 为 <code>todo-identifiant-aleatoire</code>，那么我们可以通过 <code>doc</code> 方法获取它的引用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> todo = db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">doc</span>(<span class="hljs-string">&#x27;todo-identifiant-aleatoire&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="12-2-4-1、插入数据"><a href="#12-2-4-1、插入数据" class="headerlink" title="12.2.4.1、插入数据"></a>12.2.4.1、插入数据</h4><p>可以通过在集合对象上调用 <code>add</code> 方法往集合中插入一条记录。还是用待办事项清单的例子，比如我们想新增一个待办事项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">add</span>(&#123;<br>  <span class="hljs-comment">// data 字段表示需新增的 JSON 数据</span><br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-comment">// _id: &#x27;todo-identifiant-aleatoire&#x27;, // 可选自定义 _id，在此处场景下用数据库自动分配的就可以了</span><br>    <span class="hljs-attr">description</span>: <span class="hljs-string">&quot;learn cloud database&quot;</span>,<br>    <span class="hljs-attr">due</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2018-09-01&quot;</span>),<br>    <span class="hljs-attr">tags</span>: [<br>      <span class="hljs-string">&quot;cloud&quot;</span>,<br>      <span class="hljs-string">&quot;database&quot;</span><br>    ],<br>    <span class="hljs-comment">// 为待办事项添加一个地理位置（113°E，23°N）</span><br>    <span class="hljs-attr">location</span>: <span class="hljs-keyword">new</span> db.<span class="hljs-property">Geo</span>.<span class="hljs-title class_">Point</span>(<span class="hljs-number">113</span>, <span class="hljs-number">23</span>),<br>    <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span><br>  &#125;,<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-comment">// res 是一个对象，其中有 _id 字段标记刚创建的记录的 id</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>当然，Promise 风格也是支持的，只要传入对象中没有 <code>success</code>, <code>fail</code> 或 <code>complete</code>，那么 <code>add</code> 方法就会返回一个 Promise：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">add</span>(&#123;<br>  <span class="hljs-comment">// data 字段表示需新增的 JSON 数据</span><br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">description</span>: <span class="hljs-string">&quot;learn cloud database&quot;</span>,<br>    <span class="hljs-attr">due</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2018-09-01&quot;</span>),<br>    <span class="hljs-attr">tags</span>: [<br>      <span class="hljs-string">&quot;cloud&quot;</span>,<br>      <span class="hljs-string">&quot;database&quot;</span><br>    ],<br>    <span class="hljs-attr">location</span>: <span class="hljs-keyword">new</span> db.<span class="hljs-property">Geo</span>.<span class="hljs-title class_">Point</span>(<span class="hljs-number">113</span>, <span class="hljs-number">23</span>),<br>    <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br></code></pre></td></tr></table></figure><p>数据库的增删查改 API 都同时支持回调风格和 Promise 风格调用。</p><p>在创建成功之后，我们可以在控制台中查看到刚新增的数据。</p><p>可以在 <a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.add.html">add API 文档</a>中查阅完整的 API 定义。</p><h4 id="12-2-4-2、查询数据"><a href="#12-2-4-2、查询数据" class="headerlink" title="12.2.4.2、查询数据"></a>12.2.4.2、查询数据</h4><p>在记录和集合上都有提供 <code>get</code> 方法用于获取单个记录或集合中多个记录的数据。</p><h5 id="12-2-4-2-1、获取一个记录的数据"><a href="#12-2-4-2-1、获取一个记录的数据" class="headerlink" title="12.2.4.2.1、获取一个记录的数据"></a>12.2.4.2.1、获取一个记录的数据</h5><p>我们先来看看如何获取一个记录的数据，假设我们已有一个 ID 为 <code>todo-identifiant-aleatoire</code> 的在集合 todos 上的记录，那么我们可以通过在该记录的引用调用 <code>get</code> 方法获取这个待办事项的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">doc</span>(<span class="hljs-string">&#x27;todo-identifiant-aleatoire&#x27;</span>).<span class="hljs-title function_">get</span>(&#123;<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-comment">// res.data 包含该记录的数据</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>也可以用 Promise 风格调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">doc</span>(<span class="hljs-string">&#x27;todo-identifiant-aleatoire&#x27;</span>).<span class="hljs-title function_">get</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// res.data 包含该记录的数据</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="12-2-4-2-2、获取多个记录的数据"><a href="#12-2-4-2-2、获取多个记录的数据" class="headerlink" title="12.2.4.2.2、获取多个记录的数据"></a>12.2.4.2.2、获取多个记录的数据</h5><p>我们也可以一次性获取多条记录。通过调用集合上的 <code>where</code> 方法可以指定查询条件，再调用 <code>get</code> 方法即可只返回满足指定查询条件的记录，比如获取用户的所有未完成的待办事项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">where</span>(&#123;<br>  <span class="hljs-attr">_openid</span>: <span class="hljs-string">&#x27;user-open-id&#x27;</span>,<br>  <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span><br>&#125;)<br>.<span class="hljs-title function_">get</span>(&#123;<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-comment">// res.data 是包含以上定义的两条记录的数组</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>where</code> 方法接收一个对象参数，该对象中每个字段和它的值构成一个需满足的匹配条件，各个字段间的关系是 “与” 的关系，即需同时满足这些匹配条件，在这个例子中，就是查询出 todos 集合中 <code>_openid</code> 等于 <code>user-open-id</code> 且 <code>done</code> 等于 <code>false</code> 的记录。在查询条件中我们也可以指定匹配一个嵌套字段的值，比如找出自己的标为黄色的待办事项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">where</span>(&#123;<br>  <span class="hljs-attr">_openid</span>: <span class="hljs-string">&#x27;user-open-id&#x27;</span>,<br>  <span class="hljs-attr">style</span>: &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;yellow&#x27;</span><br>  &#125;<br>&#125;)<br>.<span class="hljs-title function_">get</span>(&#123;<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>也可以用 “点表示法” 表示嵌套字段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">where</span>(&#123;<br>  <span class="hljs-attr">_openid</span>: <span class="hljs-string">&#x27;user-open-id&#x27;</span>,<br>  <span class="hljs-string">&#x27;style.color&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span><br>&#125;)<br>.<span class="hljs-title function_">get</span>(&#123;<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="12-2-4-2-3、获取一个集合的数据"><a href="#12-2-4-2-3、获取一个集合的数据" class="headerlink" title="12.2.4.2.3、获取一个集合的数据"></a>12.2.4.2.3、获取一个集合的数据</h5><p>如果要获取一个集合的数据，比如获取 todos 集合上的所有记录，可以在集合上调用 <code>get</code> 方法获取，但通常不建议这么使用，在小程序中我们需要尽量避免一次性获取过量的数据，只应获取必要的数据。为了防止误操作以及保护小程序体验，小程序端在获取集合数据时服务器一次默认并且最多返回 20 条记录，云函数端这个数字则是 100。开发者可以通过 <code>limit</code> 方法指定需要获取的记录数量，但小程序端不能超过 20 条，云函数端不能超过 100 条。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">get</span>(&#123;<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-comment">// res.data 是一个包含集合中有权限访问的所有记录的数据，不超过 20 条</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>也可以用 Promise 风格调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">get</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// res.data 是一个包含集合中有权限访问的所有记录的数据，不超过 20 条</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>下面是在云函数端获取一个集合所有记录的例子，因为有最多一次取 100 条的限制，因此很可能一个请求无法取出所有数据，需要分批次取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br>cloud.<span class="hljs-title function_">init</span>()<br><span class="hljs-keyword">const</span> db = cloud.<span class="hljs-title function_">database</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAX_LIMIT</span> = <span class="hljs-number">100</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">main</span> = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>  <span class="hljs-comment">// 先取出集合记录总数</span><br>  <span class="hljs-keyword">const</span> countResult = <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">count</span>()<br>  <span class="hljs-keyword">const</span> total = countResult.<span class="hljs-property">total</span><br>  <span class="hljs-comment">// 计算需分几次取</span><br>  <span class="hljs-keyword">const</span> batchTimes = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(total / <span class="hljs-number">100</span>)<br>  <span class="hljs-comment">// 承载所有读操作的 promise 的数组</span><br>  <span class="hljs-keyword">const</span> tasks = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; batchTimes; i++) &#123;<br>    <span class="hljs-keyword">const</span> promise = db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">skip</span>(i * <span class="hljs-variable constant_">MAX_LIMIT</span>).<span class="hljs-title function_">limit</span>(<span class="hljs-variable constant_">MAX_LIMIT</span>).<span class="hljs-title function_">get</span>()<br>    tasks.<span class="hljs-title function_">push</span>(promise)<br>  &#125;<br>  <span class="hljs-comment">// 等待所有</span><br>  <span class="hljs-keyword">return</span> (<span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(tasks)).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">data</span>: acc.<span class="hljs-property">data</span>.<span class="hljs-title function_">concat</span>(cur.<span class="hljs-property">data</span>),<br>      <span class="hljs-attr">errMsg</span>: acc.<span class="hljs-property">errMsg</span>,<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="12-2-4-3、查询指令"><a href="#12-2-4-3、查询指令" class="headerlink" title="12.2.4.3、查询指令"></a>12.2.4.3、查询指令</h4><p> 使用数据库 API 提供的 <code>where</code> 方法我们可以构造复杂的查询条件完成复杂的查询任务。在本节中我们还是使用<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/read.html">上一章节</a>中使用的示例数据。 </p><p>API 提供了以下查询指令：</p><table><thead><tr><th align="left">查询指令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">eq</td><td align="left">等于</td></tr><tr><td align="left">neq</td><td align="left">不等于</td></tr><tr><td align="left">lt</td><td align="left">小于</td></tr><tr><td align="left">lte</td><td align="left">小于或等于</td></tr><tr><td align="left">gt</td><td align="left">大于</td></tr><tr><td align="left">gte</td><td align="left">大于或等于</td></tr><tr><td align="left">in</td><td align="left">字段值在给定数组中</td></tr><tr><td align="left">nin</td><td align="left">字段值不在给定数组中</td></tr></tbody></table><p>还可以使用逻辑操作符 </p><table><thead><tr><th>逻辑操作符</th><th>说明</th></tr></thead><tbody><tr><td>and</td><td>与</td></tr><tr><td>or</td><td>或</td></tr><tr><td>not</td><td>非</td></tr><tr><td>nor</td><td>都不</td></tr></tbody></table><p>更多具体的查询指令 API 文档可参考<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/Command.html">数据库 API 文档</a>。</p><h3 id="12-2-5、更新数据"><a href="#12-2-5、更新数据" class="headerlink" title="12.2.5、更新数据"></a>12.2.5、更新数据</h3><p>更新数据主要有两个方法：</p><table><thead><tr><th align="left">API</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">update</td><td align="left">局部更新一个或多个记录</td></tr><tr><td align="left">set</td><td align="left">替换更新一个记录</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">doc</span>(<span class="hljs-string">&#x27;todo-identifiant-aleatoire&#x27;</span>).<span class="hljs-title function_">update</span>(&#123;<br>  <span class="hljs-comment">// data 传入需要局部更新的数据</span><br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-comment">// 表示将 done 字段置为 true</span><br>    <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>如果需要替换更新一条记录，可以在记录上使用 <code>set</code> 方法，替换更新意味着用传入的对象替换指定的记录：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> _ = db.<span class="hljs-property">command</span><br>db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">doc</span>(<span class="hljs-string">&#x27;todo-identifiant-aleatoire&#x27;</span>).<span class="hljs-title function_">set</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">description</span>: <span class="hljs-string">&quot;learn cloud database&quot;</span>,<br>    <span class="hljs-attr">due</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2018-09-01&quot;</span>),<br>    <span class="hljs-attr">tags</span>: [<br>      <span class="hljs-string">&quot;cloud&quot;</span>,<br>      <span class="hljs-string">&quot;database&quot;</span><br>    ],<br>    <span class="hljs-attr">style</span>: &#123;<br>      <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;skyblue&quot;</span><br>    &#125;,<br>    <span class="hljs-comment">// 位置（113°E，23°N）</span><br>    <span class="hljs-attr">location</span>: <span class="hljs-keyword">new</span> db.<span class="hljs-property">Geo</span>.<span class="hljs-title class_">Point</span>(<span class="hljs-number">113</span>, <span class="hljs-number">23</span>),<br>    <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span><br>  &#125;,<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>如果指定 ID 的记录不存在，则会自动创建该记录，该记录将拥有指定的 ID。</p><h3 id="12-2-6、删除数据"><a href="#12-2-6、删除数据" class="headerlink" title="12.2.6、删除数据"></a>12.2.6、删除数据</h3><p>在这章节我们一起看看如何使用数据库 API 完成数据删除，在本节中我们还是沿用<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/read.html">读取数据</a>章节中使用的数据。</p><h3 id="12-2-6-1、删除一条记录"><a href="#12-2-6-1、删除一条记录" class="headerlink" title="12.2.6.1、删除一条记录"></a>12.2.6.1、删除一条记录</h3><p>对记录使用 <code>remove</code> 方法可以删除该条记录，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">doc</span>(<span class="hljs-string">&#x27;todo-identifiant-aleatoire&#x27;</span>).<span class="hljs-title function_">remove</span>(&#123;<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="12-2-6-2、删除多条记录"><a href="#12-2-6-2、删除多条记录" class="headerlink" title="12.2.6.2、删除多条记录"></a>12.2.6.2、删除多条记录</h3><p>如果需要更新多个数据，需在 Server 端进行操作（云函数）。可通过 <code>where</code> 语句选取多条记录执行删除，只有有权限删除的记录会被删除。比如删除所有已完成的待办事项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用了 async await 语法</span><br><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br><span class="hljs-keyword">const</span> db = cloud.<span class="hljs-title function_">database</span>()<br><span class="hljs-keyword">const</span> _ = db.<span class="hljs-property">command</span><br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">main</span> = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">where</span>(&#123;<br>      <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span><br>    &#125;).<span class="hljs-title function_">remove</span>()<br>  &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在大多数情况下，我们希望用户只能操作自己的数据（自己的代表事项），不能操作其他人的数据（其他人的待办事项），这就需要引入权限控制了。</p><h2 id="12-3、存储"><a href="#12-3、存储" class="headerlink" title="12.3、存储"></a>12.3、存储</h2><h3 id="12-3-1、上传文件"><a href="#12-3-1、上传文件" class="headerlink" title="12.3.1、上传文件"></a>12.3.1、上传文件</h3><p>在小程序端可调用 <code>wx.cloud.uploadFile</code> 方法进行上传：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">uploadFile</span>(&#123;<br>  <span class="hljs-attr">cloudPath</span>: <span class="hljs-string">&#x27;example.png&#x27;</span>, <span class="hljs-comment">// 上传至云端的路径</span><br>  <span class="hljs-attr">filePath</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 小程序临时文件路径</span><br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 返回文件 ID</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">fileID</span>)<br>  &#125;,<br>  <span class="hljs-attr">fail</span>: <span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>上传成功后会获得文件唯一标识符，即文件 ID，后续操作都基于文件 ID 而不是 URL。</p><h3 id="12-3-2、下载文件"><a href="#12-3-2、下载文件" class="headerlink" title="12.3.2、下载文件"></a>12.3.2、下载文件</h3><p>可以根据文件 ID 下载文件，用户仅可下载其有访问权限的文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">downloadFile</span>(&#123;<br>  <span class="hljs-attr">fileID</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 文件 ID</span><br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 返回临时文件路径</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">tempFilePath</span>)<br>  &#125;,<br>  <span class="hljs-attr">fail</span>: <span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="12-3-3、删除文件"><a href="#12-3-3、删除文件" class="headerlink" title="12.3.3、删除文件"></a>12.3.3、删除文件</h3><p>可以通过 <code>wx.cloud.deleteFile</code> 删除文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">deleteFile</span>(&#123;<br>  <span class="hljs-attr">fileList</span>: [<span class="hljs-string">&#x27;a7xzcb&#x27;</span>],<br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// handle success</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">fileList</span>)<br>  &#125;,<br>  <span class="hljs-attr">fail</span>: <span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>更详细的 API 可参考小程序端及后端存储 API 文件。</p><h3 id="12-3-4组件支持"><a href="#12-3-4组件支持" class="headerlink" title="12.3.4组件支持"></a>12.3.4组件支持</h3><p>支持在 <code>image</code>、<code>audio</code> 等组件中传入云文件 ID</p><p><strong>换取临时链接</strong></p><p>可以根据文件 ID 换取临时文件网络链接，文件链接有有效期为两个小时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">getTempFileURL</span>(&#123;<br>  <span class="hljs-attr">fileList</span>: [<span class="hljs-string">&#x27;cloud://xxx.png&#x27;</span>],<br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// fileList 是一个有如下结构的对象数组</span><br>    <span class="hljs-comment">// [&#123;</span><br>    <span class="hljs-comment">//    fileID: &#x27;cloud://xxx.png&#x27;, // 文件 ID</span><br>    <span class="hljs-comment">//    tempFileURL: &#x27;&#x27;, // 临时文件网络链接</span><br>    <span class="hljs-comment">//    maxAge: 120 * 60 * 1000, // 有效期</span><br>    <span class="hljs-comment">// &#125;]</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">fileList</span>)<br>  &#125;,<br>  <span class="hljs-attr">fail</span>: <span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>API</strong> 文档</p><p>可以在此参考详细的API 文档：</p><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/Cloud.uploadFile.html">uploadFile</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/Cloud.downloadFile.html">downloadFile</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/Cloud.deleteFile.html">deleteFile</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/Cloud.getTempFileURL.html">getTempFileURL</a></li></ul><h1 id="13、微信小程序权限"><a href="#13、微信小程序权限" class="headerlink" title="13、微信小程序权限"></a>13、微信小程序权限</h1><p>部分接口需要经过用户授权同意才能调用。我们把这些接口按使用范围分成多个 <code>scope</code> ，用户选择对 <code>scope</code> 来进行授权，当授权给一个 <code>scope</code> 之后，其对应的所有接口都可以直接使用。</p><p>此类接口调用时：</p><ul><li>如果用户未接受或拒绝过此权限，会弹窗询问用户，用户点击同意后方可调用接口；</li><li>如果用户已授权，可以直接调用接口；</li><li>如果用户已拒绝授权，则不会出现弹窗，而是直接进入接口 fail 回调。</li></ul><h2 id="13-1、获取用户授权设置"><a href="#13-1、获取用户授权设置" class="headerlink" title="13.1、获取用户授权设置"></a>13.1、获取用户授权设置</h2><p>开发者可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html">wx.getSetting</a> 获取用户当前的授权状态。</p><h2 id="13-2、打开设置界面"><a href="#13-2、打开设置界面" class="headerlink" title="13.2、打开设置界面"></a>13.2、打开设置界面</h2><p>用户可以在小程序设置界面（「右上角」 - 「关于」 - 「右上角」 - 「设置」）中控制对该小程序的授权状态。</p><p>开发者可以调用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.openSetting.html">wx.openSetting</a> 打开设置界面，引导用户开启授权。</p><h2 id="13-3、提前发起授权请求"><a href="#13-3、提前发起授权请求" class="headerlink" title="13.3、提前发起授权请求"></a>13.3、提前发起授权请求</h2><p>开发者可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/authorize/wx.authorize.html">wx.authorize</a> 在调用需授权 API 之前，提前向用户发起授权请求。</p><p>scope 列表</p><table><thead><tr><th align="left">scope</th><th align="left">对应接口</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">scope.userInfo</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html">wx.getUserInfo</a></td><td align="left">用户信息</td></tr><tr><td align="left">scope.userLocation</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.getLocation.html">wx.getLocation</a>, <a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.chooseLocation.html">wx.chooseLocation</a></td><td align="left">地理位置</td></tr><tr><td align="left">scope.userLocationBackground</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdateBackground.html">wx.startLocationUpdateBackground</a></td><td align="left">后台定位</td></tr><tr><td align="left">scope.address</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/address/wx.chooseAddress.html">wx.chooseAddress</a></td><td align="left">通讯地址</td></tr><tr><td align="left">scope.invoiceTitle</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/invoice/wx.chooseInvoiceTitle.html">wx.chooseInvoiceTitle</a></td><td align="left">发票抬头</td></tr><tr><td align="left">scope.invoice</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/invoice/wx.chooseInvoice.html">wx.chooseInvoice</a></td><td align="left">获取发票</td></tr><tr><td align="left">scope.werun</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/werun/wx.getWeRunData.html">wx.getWeRunData</a></td><td align="left">微信运动步数</td></tr><tr><td align="left">scope.record</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.startRecord.html">wx.startRecord</a></td><td align="left">录音功能</td></tr><tr><td align="left">scope.writePhotosAlbum</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html">wx.saveImageToPhotosAlbum</a>, <a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.saveVideoToPhotosAlbum.html">wx.saveVideoToPhotosAlbum</a></td><td align="left">保存到相册</td></tr><tr><td align="left">scope.camera</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/component/camera.html">camera</a> 组件</td><td align="left">摄像头</td></tr></tbody></table><h2 id="13-4、授权有效期"><a href="#13-4、授权有效期" class="headerlink" title="13.4、授权有效期"></a>13.4、授权有效期</h2><p>一旦用户明确同意或拒绝过授权，其授权关系会记录在后台，直到用户主动删除小程序。</p><p><strong>最佳实践</strong></p><p>在真正需要使用授权接口时，才向用户发起授权申请，并在授权申请中说明清楚要使用该功能的理由。</p><p><strong>注意事项</strong></p><ol><li><code>wx.authorize(&#123;scope: &quot;scope.userInfo&quot;&#125;)</code>，不会弹出授权窗口，请使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/button.html"><code>&lt;button&gt;</code></a></li><li>需要授权 <code>scope.userLocation</code>、<code>scope.userLocationBackground</code> 时必须<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission">配置地理位置用途说明</a>。</li></ol><h2 id="13-5、后台定位"><a href="#13-5、后台定位" class="headerlink" title="13.5、后台定位"></a>13.5、后台定位</h2><p>与其它类型授权不同的是，scope.userLocationBackground 不会弹窗提醒用户。需要用户在设置页中，主动将“位置信息”选项设置为“使用小程序期间和离开小程序后”。开发者可以通过调用<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.openSetting.html">wx.openSetting</a>，打开设置页。</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/background-location.8290c764.png" alt="background-location"></p><h2 id="13-6、小程序订阅消息"><a href="#13-6、小程序订阅消息" class="headerlink" title="13.6、小程序订阅消息"></a>13.6、小程序订阅消息</h2><p>消息能力是小程序能力中的重要组成，我们为开发者提供了订阅消息能力，以便实现服务的闭环和更优的体验。</p><ul><li>订阅消息推送位置：服务通知</li><li>订阅消息下发条件：用户自主订阅</li><li>订阅消息卡片跳转能力：点击查看详情可跳转至该小程序的页面</li></ul><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/request-subscribe-message.3851318e.jpg" alt="intro"></p><h3 id="13-6-1、步骤一：获取模板-ID"><a href="#13-6-1、步骤一：获取模板-ID" class="headerlink" title="13.6.1、步骤一：获取模板 ID"></a>13.6.1、步骤一：获取模板 ID</h3><p>在微信公众平台手动配置获取模板 ID：<br>登录 <a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com</a> 获取模板，如果没有合适的模板，可以申请添加新模板，审核通过后可使用。</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/subscribe-message.b562750a.jpg" alt="intro"></p><h3 id="13-6-2、步骤二：获取下发权限"><a href="#13-6-2、步骤二：获取下发权限" class="headerlink" title="13.6.2、步骤二：获取下发权限"></a>13.6.2、步骤二：获取下发权限</h3><p>详见小程序端消息订阅接口 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/subscribe-message/wx.requestSubscribeMessage.html">wx.requestSubscribeMessage</a></p><h3 id="13-6-3、步骤三：调用接口下发订阅消息"><a href="#13-6-3、步骤三：调用接口下发订阅消息" class="headerlink" title="13.6.3、步骤三：调用接口下发订阅消息"></a>13.6.3、步骤三：调用接口下发订阅消息</h3><p>详见服务端消息发送接口 <a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/subscribe-message/subscribeMessage.send.html">subscribeMessage.send</a></p><h1 id="14、微信支付"><a href="#14、微信支付" class="headerlink" title="14、微信支付"></a>14、微信支付</h1><p> 最常规的普通模式，适用于有自己开发团队或外包开发商的直连商户收款。 </p><h2 id="14-1、开通支付流程"><a href="#14-1、开通支付流程" class="headerlink" title="14.1、开通支付流程"></a>14.1、开通支付流程</h2><p>1.获取到小程序开发者账号后，进行微信认证。微信认证指引：<a href="https://mp.weixin.qq.com/debug/wxadoc/introduction/">https://mp.weixin.qq.com/debug/wxadoc/introduction/#</a>小程序申请微信认证</p><p>2.小程序开通微信支付，即申请或复用微信支付商户号 申请完小程序后，登录小程序后台（mp.weixin.qq.com）。点击左侧导航栏的微信支付，在页面中进行开通。（开通申请要求小程序已发布上线）</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/chapter7_11_2.png" alt="img"></p><p>点击开通按钮后，有2种方式可以获取微信支付能力，新申请微信支付商户号或绑定一个已有的微信支付商户号，请根据你的业务需要和具体情况选择，只能二选一。开通指引：<a href="http://kf.qq.com/faq/140225MveaUz161230yqiIby.html">http://kf.qq.com/faq/140225MveaUz161230yqiIby.html</a></p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/chapter7_11_3.png" alt="img"></p><p>3.商户在微信公众平台或开放平台提交微信支付申请，微信支付工作人员审核资料无误后开通相应的微信支付权限。微信支付申请审核通过后，商户在申请资料填写的邮箱中收取到由微信支付小助手发送的邮件，此邮件包含开发时需要使用的支付账户信息。</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/chapter3_1.png" alt="微信审核通过邮件模板"></p><table><thead><tr><th align="left">邮件中参数</th><th align="left">API参数名</th><th align="left">详细说明</th></tr></thead><tbody><tr><td align="left">APPID</td><td align="left">appid</td><td align="left">appid是微信小程序后台APP的唯一标识，在小程序后台申请小程序账号后，微信会自动分配对应的appid，用于标识该应用。可在小程序–&gt;设置–&gt;开发设置中查看。</td></tr><tr><td align="left">微信支付商户号</td><td align="left">mch_id</td><td align="left">商户申请微信支付后，由微信支付分配的商户收款账号。</td></tr><tr><td align="left">API密钥</td><td align="left">key</td><td align="left">交易过程生成签名的密钥，仅保留在商户系统和微信支付后台，不会在网络中传播。商户妥善保管该Key，切勿在网络中传输，不能在其他客户端中存储，保证key不会被泄漏。商户可根据邮件提示登录微信商户平台进行设置。也可按以下路径设置：微信商户平台(pay.weixin.qq.com)–&gt;账户设置–&gt;API安全–&gt;密钥设置</td></tr><tr><td align="left">Appsecret</td><td align="left">secret</td><td align="left">AppSecret是APPID对应的接口密码，用于获取接口调用凭证时使用。</td></tr></tbody></table><p>开发指引**</p><p> 除被扫支付场景以外，商户系统先调用统一下单接口在微信支付服务后台生成预支付交易单，返回正确的预支付交易回话标识后再按扫码、JSAPI、APP、小程序等不同场景生成交易串调起支付,具体API接口请查看”API列表”</p><p><strong>注意：</strong><br>appid必须为最后拉起收银台的小程序appid；<br>mch_id为和appid成对绑定的支付商户号，收款资金会进入该商户号；<br>trade_type请填写JSAPI；<br>openid为appid对应的用户标识，即使用wx.login接口获得的openid</p><h2 id="14-2、调起支付流程"><a href="#14-2、调起支付流程" class="headerlink" title="14.2、调起支付流程"></a>14.2、调起支付流程</h2><p><a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=9_1">调用统一下单接口进行订单生成</a></p><p>将关键信息返回给微信小程序端后使用支付接口</p><p><strong>wx.requestPayment(Object object)</strong></p><p>发起微信支付。了解更多信息，请查看<a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_3&index=1">微信支付接口文档</a></p><p><strong>参数</strong></p><p><strong>Object</strong> object</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">timeStamp</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">时间戳，从 1970 年 1 月 1 日 00:00:00 至今的秒数，即当前的时间</td></tr><tr><td align="left">nonceStr</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">随机字符串，长度为32个字符以下</td></tr><tr><td align="left">package</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">统一下单接口返回的 prepay_id 参数值，提交格式如：prepay_id&#x3D;***</td></tr><tr><td align="left">signType</td><td align="left">string</td><td align="left">MD5</td><td align="left">否</td><td align="left">签名算法</td></tr><tr><td align="left">paySign</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">签名，具体签名方案参见 <a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7&index=3">小程序支付接口文档</a></td></tr><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p><strong>object.signType 的合法值</strong></p><table><thead><tr><th align="left">值</th><th align="left">说明</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left">MD5</td><td align="left">MD5</td><td align="left"></td></tr><tr><td align="left">HMAC-SHA256</td><td align="left">HMAC-SHA256</td><td align="left"></td></tr></tbody></table><p><strong>示例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-title function_">requestPayment</span>(&#123;<br>  <span class="hljs-attr">timeStamp</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">nonceStr</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">package</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">signType</span>: <span class="hljs-string">&#x27;MD5&#x27;</span>,<br>  <span class="hljs-attr">paySign</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  success (res) &#123; &#125;,<br>  fail (res) &#123; &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="15、第三方平台代开发"><a href="#15、第三方平台代开发" class="headerlink" title="15、第三方平台代开发"></a><a href="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Third_party_platform_appid.html"><font color="#000">15、第三方平台代开发</font></a></h1><p>小程序运营者，可以一键授权给第三方平台，通过第三方平台来完成业务。第三方平台在小程序的前后端开发上同直接开发小程序有所区别，其所拥有的各项 API 以及详细说明请查看 <a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1489144594_DhNoV&token=&lang=zh_CN">代小程序实现业务</a> ，其余部分请阅读下文。</p><p>开发第三方平台小程序具有一定的复杂性，首先需要确认三个概念：</p><ul><li>open3rd：第三方平台，是小程序官方认可的第三方开发商 <a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419318292&token=&lang=zh_CN">详情</a></li><li>3rdMiniProgramAppid：第三方平台申请的并绑定在该平台上的小程序，用于开发小程序模板</li><li>extAppid：授权给第三方平台的小程序</li></ul><p>第三方平台相关的小程序开发需要做一些特殊的处理：</p><ul><li>小程序模板的开发</li><li>小程序模板结合 extAppid 的开发调试</li><li>使用 <code>directCommit</code> 直接提交至待审核列表 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/ext.html#directCommit">详情</a></li></ul><p>最新版本的开发工具支持第三方平台小程序的开发和预览。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>与开发普通小程序一致，第三方平台开发者填入相关的 3rdMiniProgramAppid ，设定项目名称和选择项目目录即可创建项目。</p><p>对于第三方平台小程序，可以在项目页卡查看到相关的 open3rd 信息以及当前的第三方的 3rdMiniProgramAppid ，如若项目配置了相关的 extAppid ，那么项目页卡中也会有相关信息。</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/ext.a7c2d1f3.png" alt="ext"></p><h2 id="小程序模板开发"><a href="#小程序模板开发" class="headerlink" title="小程序模板开发"></a>小程序模板开发</h2><p>与开发普通小程序一致，开发者在开发工具上开发好相关的业务逻辑之后，在项目页卡中提交预览即可以在微信中查看小程序的真实表现。</p><p>有所不同的是，第三方平台小程序的提交上传是上传至该第三方平台的 open 帐号下的模板草稿箱中，该平台的管理员需要自行对该模板进行相应的设置，更多请参考 <a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1489144594_DhNoV&token=&lang=zh_CN">开放平台的文档</a> 。</p><h2 id="extAppid-的开发调试"><a href="#extAppid-的开发调试" class="headerlink" title="extAppid 的开发调试"></a>extAppid 的开发调试</h2><p>为了方便第三方平台的开发者引入 extAppid 的开发调试工作，需要引入 <code>ext.json</code> 的概念。</p><p><code>ext.json</code> 是一个配置文件，放置在小程序项目的根目录下。</p><p>以下是一个包含了所有配置选项的 <code>ext.json</code> ：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;extEnable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;extAppid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wxf9c4501a76931b33&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;directCommit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ext&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wechat&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;attr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;open.weixin.qq.com&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;users&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;user_1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;user_2&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;extPages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;pages/logs/logs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logs&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;backgroundTextStyle&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;light&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;navigationBarBackgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#fff&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Demo&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;navigationBarTextStyle&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;black&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tabBar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;首页&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/logs/logs&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;日志&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;networkTimeout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10000</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;downloadFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10000</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>ext.json</code>中的配置字段分为两种</p><ul><li>特有的字段</li><li>同 <code>app.json</code> 相同的字段</li></ul><h2 id="特有的字段"><a href="#特有的字段" class="headerlink" title="特有的字段"></a>特有的字段</h2><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">必填</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/ext.html#extenable">extEnable</a></td><td align="left">Boolean</td><td align="left">是</td><td align="left">配置 ext.json 是否生效</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/ext.html#extappid">extAppid</a></td><td align="left">String</td><td align="left">是</td><td align="left">配置 extAppid</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/ext.html#ext">ext</a></td><td align="left">Object</td><td align="left">否</td><td align="left">开发自定义的数据字段</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/ext.html#extpages">extPages</a></td><td align="left">String Array</td><td align="left">否</td><td align="left">单独设置每个页面的 json</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/ext.html#directCommit">directCommit</a></td><td align="left">Boolean</td><td align="left">否</td><td align="left">是否直接提交到待审核列表</td></tr></tbody></table><h3 id="extEnable"><a href="#extEnable" class="headerlink" title="extEnable"></a>extEnable</h3><p><code>extEnable</code> 是一个 <code>Boolean</code> 类型的字段，用于规定当前的 <code>ext.json</code> 文件是否生效，开发者可以通过修改这个字段来开启和关闭 extAppid 的结合开发。</p><h3 id="extAppid"><a href="#extAppid" class="headerlink" title="extAppid"></a>extAppid</h3><p><code>extAppid</code> 是授权调试的 <code>AppID</code> ，例如开发者在此处填写的是 <code>wxf9c4501a76931b33</code> 那么在 <code>extEnable</code> 为真的情况下，后续的开发逻辑都会基于 <code>wxf9c4501a76931b33</code> 来运行。</p><h3 id="ext"><a href="#ext" class="headerlink" title="ext"></a>ext</h3><p><code>ext</code> 字段是开发自定义的数据字段，在小程序中可以通过 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfigSync.html">wx.getExtConfigSync</a> 或者 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html">wx.getExtConfig</a> 获取到这些配置信息。</p><p>例如上面的例子中，通过 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfigSync.html">wx.getExtConfigSync</a> 就可以获得 <code>ext</code> 字段的所有配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wechat&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;attr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;open.weixin.qq.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;users&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;user_1&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;user_2&quot;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="extPages"><a href="#extPages" class="headerlink" title="extPages"></a>extPages</h3><p><code>extPages</code> 是一个对象，对象中的每个 <code>key</code> 应该是该小程序模板 <code>app.json</code> 中定义的页面，每个 <code>key</code> 对应的 <code>value</code> 是 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE">page.json</a> 中所规定的各项配置。</p><p>当开发者设置这个配置以后，小程序框架会对应的修改相对应的 <code>page</code> 的配置信息。</p><h3 id="directCommit"><a href="#directCommit" class="headerlink" title="directCommit"></a>directCommit</h3><p><code>directCommit</code> 是一个 <code>Boolean</code> 类型的字段，用于规定当前的上传操作是否是直接上传到 extAppid 的审核列表中。</p><p>当 <code>directCommit</code> 为 <code>true</code> 真时，开发者在工具中的上传操作，会直接上传到对应的 extAppid 的审核列表，第三方平台只需要调用 <code>https://api.weixin.qq.com/wxa/submit_audit?access_token=TOKEN</code> 即可以提交审核。更多请参考 <a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1489140610_Uavc4&token=&lang=zh_CN">第三方平台文档</a></p><p>当 <code>directCommit</code> 为 <code>false</code> 或者没有定义时，开发者在工具中的上传操作，会直接上传到对应的草稿箱中。</p><p><em>tips: 可以使用工具的命令行接口 或者 http 接口来实现自动化的代码提交审核</em></p><h3 id="同-app-json-相同的字段"><a href="#同-app-json-相同的字段" class="headerlink" title="同 app.json 相同的字段"></a>同 <code>app.json</code> 相同的字段</h3><p>当 <code>ext.json</code> 中的字段同 <code>app.json</code> 中一致时，<code>ext.json</code> 的字段会覆盖 <code>app.json</code> 中的对应字段，例如以下的 <code>ext.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;backgroundTextStyle&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;light&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;navigationBarBackgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#fff&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ext navigationBarTitleText&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;navigationBarTextStyle&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;black&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>那么该小程序最终的 <code>navigationBarTitleText</code> 应该是 <code>ext navigationBarTitleText</code> 。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux项目部署</title>
    <link href="/2022/09/25/linux%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/09/25/linux%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装linux系统"><a href="#一、安装linux系统" class="headerlink" title="一、安装linux系统"></a>一、安装linux系统</h1><p>最小化安装</p><h1 id="二、安装所需要环境mysql"><a href="#二、安装所需要环境mysql" class="headerlink" title="二、安装所需要环境mysql"></a>二、安装所需要环境mysql</h1><h5 id="1、安装新版mysql前，需将系统自带的mariadb-lib卸载"><a href="#1、安装新版mysql前，需将系统自带的mariadb-lib卸载" class="headerlink" title="1、安装新版mysql前，需将系统自带的mariadb-lib卸载"></a>1、安装新版mysql前，需将系统自带的mariadb-lib卸载</h5><p><code>rpm -qa|grep mariadb</code></p><h5 id="2、删除自带的mariadb"><a href="#2、删除自带的mariadb" class="headerlink" title="2、删除自带的mariadb"></a>2、删除自带的mariadb</h5><p><code>rpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64</code>（此处跟显示的包名）</p><h5 id="3、进行：yum-y-install-wget-安装从网上下载文件的wget命令"><a href="#3、进行：yum-y-install-wget-安装从网上下载文件的wget命令" class="headerlink" title="3、进行：yum -y install wget 安装从网上下载文件的wget命令"></a>3、进行：yum -y install wget 安装从网上下载文件的wget命令</h5><h5 id="4、添加repo源-下载源-5-7-版本"><a href="#4、添加repo源-下载源-5-7-版本" class="headerlink" title="4、添加repo源 下载源 5.7 版本"></a>4、添加repo源 下载源 5.7 版本</h5><p> <code>wget http://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm</code> </p><h5 id="5、安装rpm包："><a href="#5、安装rpm包：" class="headerlink" title="5、安装rpm包："></a>5、安装rpm包：</h5><h5 id="rpm-ivh-mysql80-community-release-el7-3-noarch-rpm包"><a href="#rpm-ivh-mysql80-community-release-el7-3-noarch-rpm包" class="headerlink" title="rpm -ivh mysql80-community-release-el7-3.noarch.rpm包"></a><code>rpm -ivh mysql80-community-release-el7-3.noarch.rpm</code>包</h5><h5 id="6、安装mysql"><a href="#6、安装mysql" class="headerlink" title="6、安装mysql"></a>6、安装mysql</h5><h5 id="yum-install-mysql-server"><a href="#yum-install-mysql-server" class="headerlink" title="yum install mysql-server"></a><code>yum install mysql-server</code></h5><h6 id="若出现-GPG-Keys-are-configured-as-file-x2F-x2F-x2F-etc-x2F-pki-x2F-rpm-gpg-x2F-RPM-GPG-KEY-mysql"><a href="#若出现-GPG-Keys-are-configured-as-file-x2F-x2F-x2F-etc-x2F-pki-x2F-rpm-gpg-x2F-RPM-GPG-KEY-mysql" class="headerlink" title="若出现.GPG Keys are configured as: file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-mysql"></a>若出现.GPG Keys are configured as: file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-mysql</h6><h6 id="则rpm-import-https-repo-mysql-com-RPM-GPG-KEY-mysql-2022"><a href="#则rpm-import-https-repo-mysql-com-RPM-GPG-KEY-mysql-2022" class="headerlink" title="则rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022"></a>则<code>rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</code></h6><h6 id="然后在执行安装mysql-yum-install-mysql-server"><a href="#然后在执行安装mysql-yum-install-mysql-server" class="headerlink" title="然后在执行安装mysql yum install mysql-server"></a>然后在执行安装mysql <code>yum install mysql-server</code></h6><h5 id="7、按照提示进行下一步操作，安装结束，使用以下命令检查安装状态"><a href="#7、按照提示进行下一步操作，安装结束，使用以下命令检查安装状态" class="headerlink" title="7、按照提示进行下一步操作，安装结束，使用以下命令检查安装状态"></a>7、按照提示进行下一步操作，安装结束，使用以下命令检查安装状态</h5><p><code>systemctl status mysqld</code></p><h5 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h5><h1 id="三、接下来安装jdk"><a href="#三、接下来安装jdk" class="headerlink" title="三、接下来安装jdk"></a>三、接下来安装jdk</h1><h5 id="1、将jdk安装文件上传至目录（随意）"><a href="#1、将jdk安装文件上传至目录（随意）" class="headerlink" title="1、将jdk安装文件上传至目录（随意）"></a>1、将jdk安装文件上传至目录（随意）</h5><p>&#x2F;usr&#x2F;local（为例）</p><h5 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h5><p>tar -zxvf 文件名</p><h5 id="3、并修改配置文件，vi-x2F-etc-x2F-profile"><a href="#3、并修改配置文件，vi-x2F-etc-x2F-profile" class="headerlink" title="3、并修改配置文件，vi &#x2F;etc&#x2F;profile"></a>3、并修改配置文件，vi &#x2F;etc&#x2F;profile</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#Java Env</span><br><br><span class="hljs-built_in">export</span> JAVA_HOME= 自己的路径<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CLASSPATH</span>=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$JAVA_HOME/bin<br></code></pre></td></tr></table></figure><h6 id="若出现-bash-usr-local-jdk1-8-0-341-bin-java-lib-ld-linux-so-2-bad-ELF-interpreter-没有那个文件或目录"><a href="#若出现-bash-usr-local-jdk1-8-0-341-bin-java-lib-ld-linux-so-2-bad-ELF-interpreter-没有那个文件或目录" class="headerlink" title="若出现-bash: /usr/local/jdk1.8.0_341/bin/java: /lib/ld-linux.so.2: bad ELF interpreter: 没有那个文件或目录"></a>若出现<code>-bash: /usr/local/jdk1.8.0_341/bin/java: /lib/ld-linux.so.2: bad ELF interpreter: </code>没有那个文件或目录</h6><p>使用命令<code>yum install glibc.i686</code></p><h5 id="完成后即可验证"><a href="#完成后即可验证" class="headerlink" title="完成后即可验证"></a>完成后即可验证</h5><p><code>Java -version</code></p><h5 id="查看jdk版本以及是否安装"><a href="#查看jdk版本以及是否安装" class="headerlink" title="查看jdk版本以及是否安装"></a>查看jdk版本以及是否安装</h5><h1 id="四、安装maven"><a href="#四、安装maven" class="headerlink" title="四、安装maven"></a>四、安装maven</h1><h5 id="将jdk文件上传至目录"><a href="#将jdk文件上传至目录" class="headerlink" title="将jdk文件上传至目录"></a>将jdk文件上传至目录</h5><p>&#x2F;usr&#x2F;local</p><h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><p>tar -zxvf 文件名</p><h5 id="并修改配置文件，vi-x2F-etc-x2F-profile"><a href="#并修改配置文件，vi-x2F-etc-x2F-profile" class="headerlink" title="并修改配置文件，vi &#x2F;etc&#x2F;profile"></a>并修改配置文件，vi &#x2F;etc&#x2F;profile</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">MAVEN_HOME</span>=/var/jenkins_home/thh/apache-maven-3.6.3 <span class="hljs-built_in">export</span> MAVEN_HOME <span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$&#123;PATH&#125;</span>:$&#123;MAVEN_HOME&#125;/bin<br></code></pre></td></tr></table></figure><h5 id="mvn-v-查看安装是否成功"><a href="#mvn-v-查看安装是否成功" class="headerlink" title="mvn -v 查看安装是否成功"></a>mvn -v 查看安装是否成功</h5><h1 id="五、安装tomcat"><a href="#五、安装tomcat" class="headerlink" title="五、安装tomcat"></a>五、安装tomcat</h1><h1 id="六、配置mysql"><a href="#六、配置mysql" class="headerlink" title="六、配置mysql"></a>六、配置mysql</h1><h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service mysqld <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p>注：mysql5.7 版本以上默认密码不再是为空了，而是在安装时会随机生成一个默认密码<br>用以下命令可查看该默认的密码</p><p><code>grep &quot;temporary password&quot; /var/log/mysqld.log</code></p><p>更改mysql 用户密码<br>登录mysql</p><p><code>mysql -u root -p</code></p><p>输入查看到的默认密码</p><p>修改密码<br>mysql5.7版本以后的修改密码语句</p><p><code>ALTER USER USER() IDENTIFIED BY &#39;Admin@123456&#39;;</code></p><p>一开始有难度设定，在设定完较难的难度后，我们拥有权限后就可以查询</p><p><code>SHOW VARIABLES LIKE &#39;validate_password%&#39;;</code></p><p>修改密码难度</p><p><code>set global validate_password.policy=LOW;</code></p><p>然后修改用户运行远程登录</p><p><code>mysql&gt; use mysql;</code></p><p>修改连接时候密码</p><p><code>mysql&gt; update user set host = &#39;%&#39; where user = &#39;root&#39;;</code><br><code>mysql&gt; FLUSH PRIVILEGES;</code><br><code>mysql&gt; select host, user from user;</code></p><p><code>mysql&gt;ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;Admin@123456&#39;;</code></p><p><code>mysql&gt; FLUSH PRIVILEGES;</code></p><p>完成后即可使用Navicat Premium 15远程连接数据库并进行配置</p><h2 id="七、开放端口3306"><a href="#七、开放端口3306" class="headerlink" title="七、开放端口3306"></a>七、开放端口3306</h2><p>1、开启防火墙</p><p>systemctl start firewalld</p><p>2、开放端口3306</p><p>firewall-<a href="https://so.csdn.net/so/search?q=cmd&spm=1001.2101.3001.7020">cmd</a> –zone&#x3D;public –add-port&#x3D;3306&#x2F;tcp –permanent</p><p>3、重启防火墙</p><p>firewall-cmd –reload</p><h1 id="附一、卸载mysql"><a href="#附一、卸载mysql" class="headerlink" title="附一、卸载mysql"></a>附一、卸载mysql</h1><p>使用<a href="https://so.csdn.net/so/search?q=yum&spm=1001.2101.3001.7020">yum</a>安装的Mysql需要先进行清除 命令：</p><p><code>yum remove mysql mysql-server mysql-libs mysql-serve.</code></p><p>再次查询是否有剩余文件 命令：</p><p><code>rpm -qa|grep mysql</code></p><p>使用过rpm -ev +对应文件名 删除剩余文件 命令：</p><p>rpm -ev 显示文件名</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
